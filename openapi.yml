openapi: "3.0.2"
info:
  title: Comfy API
  version: "1.0"
servers:
  - url: https://api.comfy.org
paths:
  /users:
    get:
      summary: Get information about the calling user.
      operationId: getUser
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "404":
          description: Not Found
        "401":
          description: Unauthorized
  /customers:
    post:
      summary: Create a new customer
      description: Creates a new customer using the provided token. No request body is needed as user information is extracted from the token.
      operationId: createCustomer
      x-excluded: true
      tags:
        - API Nodes
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: Customer already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "201":
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Search for customers
      description: Search for customers by email, name, Stripe ID, or Metronome ID.
      operationId: searchCustomers
      x-excluded: true
      tags:
        - API Nodes
        - Admin
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email address to search for
        - in: query
          name: name
          schema:
            type: string
          description: Customer name to search for
        - in: query
          name: stripe_id
          schema:
            type: string
          description: Stripe customer ID to search for
        - in: query
          name: metronome_id
          schema:
            type: string
          description: Metronome customer ID to search for\
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number to retrieve
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of customers to return per page
      responses:
        "200":
          description: Customers matching the search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    description: Current page number
                  limit:
                    type: integer
                    description: Number of customers per page
                  totalPages:
                    type: integer
                    description: Total number of pages available
                  customers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
                  total:
                    type: integer
                    description: Total number of matching customers
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /customers/me:
    get:
      summary: Get authenticated customer details
      description: Returns details about the currently authenticated customer based on their JWT token.
      operationId: getAuthenticatedCustomer
      x-excluded: true
      tags:
        - API Nodes
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: Customer details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "401":
          description: Unauthorized or invalid token
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /customers/{customer_id}:
    get:
      summary: Get a customer by ID
      description: Returns details about a customer by their ID.
      operationId: getCustomerById
      x-excluded: true
      tags:
        - API Nodes
        - Admin
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: customer_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Customer details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: "#/components/schemas/Customer"
        "401":
          description: Unauthorized or invalid token
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /customers/api-keys:
    get:
      summary: List all API keys for a customer
      operationId: listCustomerAPIKeys
      x-excluded: true
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKey'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new API key for a customer
      operationId: createCustomerAPIKey
      x-excluded: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    $ref: '#/components/schemas/APIKeyWithPlaintext'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized
        '404':
          description: Customer or API key not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /customers/api-keys/{api_key_id}:
    delete:
      summary: Delete an API key for a customer
      operationId: deleteCustomerAPIKey
      x-excluded: true
      parameters:
        - in: path
          name: api_key_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: API key deleted
        '401':
          description: Unauthorized
        '404':
          description: Customer or API key not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /customers/credit:
    post:
      summary: Initiates a Credit Purchase.
      operationId: InitiateCreditPurchase
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount_micros:
                  type: integer
                  format: int64
                  description: the amount of the checkout transaction in micro value
                currency:
                  type: string
                  description: the currency used in the checkout transaction
              required:
                - amount_micros
                - currency
      responses:
        "201":
          description: Customer Checkout created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkout_url:
                    type: string
                    description: the url to redirect the customer
        "400":
          description: Bad request, invalid token or user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized or invalid token
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /customers/billing:
    post:
      summary: Access customer billing portal
      description: Creates a session for the customer to access their billing portal where they can manage subscriptions, payment methods, and view invoices.
      operationId: AccessBillingPortal
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                return_url:
                  type: string
                  description: Optional URL to redirect the customer after they're done with the billing portal
      responses:
        "200":
          description: Billing portal session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  billing_portal_url:
                    type: string
                    description: The URL to redirect the customer to the billing portal
        "400":
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized or invalid token
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /customers/usage:
    post:
      summary: Get customer's usage
      description: Returns the customer's as a dashboard URL.
      operationId: GetCustomerUsage
      x-excluded: true
      tags:
        - API Nodes
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The dashboard URL for the customer's usage
        '401':
          description: Unauthorized or invalid token
        '404':
          description: Customer not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                   
  /customers/balance:
    get:
      summary: Get customer's remaining balance
      description: Returns the customer's current remaining balance in microamount and its currency.
      operationId: GetCustomerBalance
      x-excluded: true
      tags:
        - API Nodes
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: Customer balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  amount_micros:
                    type: number
                    format: double
                    description: The remaining balance in microamount (1/1,000,000 of the currency unit)
                  currency:
                    type: string
                    description: The currency code (e.g., "usd")
                required:
                  - amount_micros
                  - currency
        "401":
          description: Unauthorized or invalid token
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /customers/{customer_id}/balance:
    get:
      summary: Get customer's remaining balance by ID
      description: Returns the specified customer's current remaining balance in microamount and its currency.
      operationId: GetCustomerBalanceById
      x-excluded: true
      tags:
        - API Nodes
        - Admin
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: customer_id
          required: true
          schema:
            type: string
          description: The ID of the customer whose balance to retrieve
      responses:
        "200":
          description: Customer balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  amount_micros:
                    type: number
                    format: double
                    description: The remaining balance in microamount (1/1,000,000 of the currency unit)
                  currency:
                    type: string
                    description: The currency code (e.g., "usd")
                required:
                  - amount_micros
                  - currency
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized or invalid token
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /customers/storage:
    post:
      summary: Store a resource for a customer
      description: Store a resource for a customer. Resource will have a 24 hour expiry. The signed URL will be generated for the specified file path.
      operationId: createCustomerStorageResource
      x-excluded: true
      tags:
        - API Nodes
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file_name:
                  type: string
                  description: The desired name of the file (e.g., 'profile.jpg')
                content_type:
                  type: string
                  description: The content type of the file (e.g., 'image/png')
                file_hash:
                  type: string
                  description: The hash of the file. If provided, an existing file with the same hash may be returned.
              required:
                - file_name
      responses:
        "200":
          description: Signed URL generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerStorageResourceResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /customers/{customer_id}/events:
    get:
      summary: Get events related to customer
      operationId: GetCustomerEventsById
      x-excluded: true
      tags:
        - API Nodes
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: customer_id
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Page number of the nodes list
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          description: Number of nodes to return per page
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: filter
          description: Event type to filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of events available
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  page:
                    type: integer
                    description: Current page number
                  limit:
                    type: integer
                    description: Maximum number of nodes per page
                  totalPages:
                    type: integer
                    description: Total number of pages available
        '400':
          description: Invalid input, object invalid
        '404':
          description: Not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /customers/events:
    get:
      summary: Get events related to customer
      operationId: GetCustomerEvents
      x-excluded: true
      tags:
        - API Nodes
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: page
          description: Page number of the nodes list
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          description: Number of nodes to return per page
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: filter
          description: Event type to filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of events available
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  page:
                    type: integer
                    description: Current page number
                  limit:
                    type: integer
                    description: Maximum number of nodes per page
                  totalPages:
                    type: integer
                    description: Total number of pages available
        '400':
          description: Invalid input, object invalid
        '404':
          description: Not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /upload-artifact:
    post:
      summary: Receive artifacts (output files) from the ComfyUI GitHub Action
      description: Receive artifacts (output files) from the ComfyUI GitHub Action
      x-excluded: true
      tags:
        - ComfyUI CI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                repo:
                  type: string
                  description: Repository name
                job_id:
                  type: string
                  description: Unique identifier for the job
                run_id:
                  type: string
                  description: Unique identifier for the run
                os:
                  type: string
                  description: Operating system used in the run
                cuda_version:
                  type: string
                  description: Cuda version.
                bucket_name:
                  type: string
                  description: The name of the bucket where the output files are stored
                output_files_gcs_paths:
                  type: string
                  description: A comma separated string that contains GCS path(s) to output files. eg. gs://bucket-name/output, gs://bucket-name/output2
                comfy_logs_gcs_path:
                  type: string
                  description: The path to ComfyUI logs. eg. gs://bucket-name/logs
                comfy_run_flags:
                  type: string
                  description: The flags used in the comfy run
                commit_hash:
                  type: string
                commit_time:
                  type: string
                  description: The time of the commit in the format of "YYYY-MM-DDTHH:MM:SSZ" (2016-10-10T00:00:00Z)
                commit_message:
                  type: string
                  description: The commit message
                workflow_name:
                  type: string
                  description: The name of the workflow
                branch_name:
                  type: string
                start_time:
                  type: integer
                  format: int64
                  description: The start time of the job as a Unix timestamp.
                end_time:
                  type: integer
                  format: int64
                  description: The end time of the job as a Unix timestamp.
                avg_vram:
                  type: integer
                  description: The average amount of VRAM used in the run.
                peak_vram:
                  type: integer
                  description: The peak amount of VRAM used in the run.
                pr_number:
                  type: string
                  description: The pull request number
                author:
                  type: string
                  description: The author of the commit
                job_trigger_user:
                  type: string
                  description: The user who triggered the job
                python_version:
                  type: string
                  description: The python version used in the run
                pytorch_version:
                  type: string
                  description: The pytorch version used in the run
                machine_stats:
                  $ref: "#/components/schemas/MachineStats"
                status:
                  $ref: "#/components/schemas/WorkflowRunStatus"
              required:
                - repo
                - job_id
                - run_id
                - os
                - commit_hash
                - commit_time
                - commit_message
                - branch_name
                - workflow_name
                - start_time
                - end_time
                - pr_number
                - python_version
                - job_trigger_user
                - author
                - status

      responses:
        '200':
          description: Successfully received the artifact details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request
        '500':
          description: Internal server error
  /gitcommit:
    get:
      summary: Retrieve CI data for a given commit
      description: Returns all runs, jobs, job results, and storage files associated with a given commit.
      x-excluded: true
      tags:
        - ComfyUI CI
      parameters:
        - in: query
          name: commitId
          required: false
          schema:
            type: string
          description: The ID of the commit to fetch data for.
        - in: query
          name: operatingSystem
          required: false
          schema:
            type: string
          description: The operating system to filter the CI data by.
        - in: query
          name: workflowName
          required: false
          schema:
            type: string
          description: The name of the workflow to filter the CI data by.
        - in: query
          name: branch
          required: false
          schema:
            type: string
          description: The branch of the gitcommit to filter the CI data by.
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number to retrieve.
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 10
          description: The number of items to include per page.
        - in: query
          name: repoName
          required: false
          schema:
            type: string
            default: comfyanonymous/ComfyUI
          description: The repo to filter by.
      responses:
        '200':
          description: An object containing runs, jobs, job results, and storage files
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobResults:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActionJobResult'
                  totalNumberOfPages:
                    type: integer
        '404':
          description: Commit not found
        '500':
          description: Internal server error
  /gitcommitsummary:
    get:
      summary: Retrieve a summary of git commits
      description: Returns a summary of git commits, including status, start time, and end time.
      x-excluded: true
      tags:
        - ComfyUI CI
      parameters:
        - in: query
          name: repoName
          required: false
          schema:
            type: string
            default: comfyanonymous/ComfyUI
          description: The repository name to filter the git commits by.
        - in: query
          name: branchName
          required: false
          schema:
            type: string
          description: The branch name to filter the git commits by.
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number to retrieve.
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 10
          description: The number of items to include per page.
      responses:
        '200':
          description: Successfully retrieved git commit summaries
          content:
            application/json:
              schema:
                type: object
                properties:
                  commitSummaries:
                    type: array
                    items:
                      $ref: '#/components/schemas/GitCommitSummary'
                  totalNumberOfPages:
                    type: integer
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /workflowresult/{workflowResultId}:
    get:
      summary: Retrieve a specific commit by ID
      operationId: getWorkflowResult
      x-excluded: true
      tags:
        - ComfyUI CI
      parameters:
        - in: path
          name: workflowResultId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Commit details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionJobResult'
        '404':
          description: Commit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /branch:
    get:
      summary: Retrieve all distinct branches for a given repo
      description: Returns all branches for a given repo.
      x-excluded: true
      tags:
        - ComfyUI CI
      parameters:
        - in: query
          name: repo_name
          required: true
          schema:
            type: string
            default: comfyanonymous/ComfyUI
          description: The repo to filter by.
      responses:
        '200':
          description: An array of branches
          content:
            application/json:
              schema:
                type: object
                properties:
                  branches:
                    type: array
                    items:
                      type: string
        '404':
          description: Repo not found
        '500':
          description: Internal server error
  /users/publishers/:
    get:
      summary: Retrieve all publishers for a given user
      operationId: listPublishersForUser
      tags:
        - Registry
      responses:
        '200':
          description: A list of publishers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
        '400':
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/permissions:
    get:
      summary: Retrieve permissions the user has for a given publisher
      operationId: getPermissionOnPublisher
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  canEdit:
                    type: boolean
        '400':
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /publishers/validate:
    get:
      summary: Validate if a publisher username is available
      description: Checks if the publisher username is already taken.
      operationId: validatePublisher
      tags:
        - Registry
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: The publisher username to validate.
          required: true
      responses:
        '200':
          description: Username validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAvailable:
                    type: boolean
                    description: True if the username is available, false otherwise.
        '400':
          description: Invalid input, such as missing username in the query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers:
    post:
      summary: Create a new publisher
      operationId: createPublisher
      security:
        - BearerAuth: [ ]
      tags:
        - Registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '201':
          description: Publisher created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Retrieve all publishers
      operationId: listPublishers
      tags:
        - Registry
      responses:
        '200':
          description: A list of publishers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
        '400':
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}:
    get:
      summary: Retrieve a publisher by ID
      operationId: getPublisher
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Publisher retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '404':
          description: Publisher not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a publisher
      operationId: updatePublisher
      security:
        - BearerAuth: [ ]
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '200':
          description: Publisher updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '404':
          description: Publisher not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a publisher
      operationId: deletePublisher
      security:
        - BearerAuth: [ ]
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Publisher deleted successfully
        '404':
          description: Publisher not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/ban:
    post:
      summary: Ban a publisher
      operationId: BanPublisher
      tags:
        - Registry
      x-excluded: true
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Publisher Banned Successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Publisher not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/nodes/v2:
    get:
      summary: Retrieve all nodes
      operationId: listNodesForPublisherV2
      security:
        - BearerAuth: [ ]
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: query
          name: include_banned
          description: Number of nodes to return per page
          required: false
          schema:
            type: boolean
        - in: query
          name: page
          description: Page number of the nodes list
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          description: Number of nodes to return per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of all nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of nodes available
                  nodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  page:
                    type: integer
                    description: Current page number
                  limit:
                    type: integer
                    description: Maximum number of nodes per page
                  totalPages:
                    type: integer
                    description: Total number of pages available
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/nodes:
    post:
      summary: Create a new custom node
      operationId: createNode
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Retrieve all nodes
      operationId: listNodesForPublisher
      security:
        - BearerAuth: [ ]
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: query
          name: include_banned
          description: Number of nodes to return per page
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of all nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/nodes/{nodeId}:
    put:
      summary: Update a specific node
      operationId: updateNode
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '400':
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a specific node
      operationId: deleteNode
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Node deleted successfully
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /publishers/{publisherId}/nodes/{nodeId}/permissions:
    get:
      summary: Retrieve permissions the user has for a given publisher
      operationId: getPermissionOnPublisherNodes
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  canEdit:
                    type: boolean
        '400':
          description: Bad request, invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/nodes/{nodeId}/versions:
    post:
      summary: Publish a new version of a node
      operationId: publishNodeVersion
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                personal_access_token:
                  type: string
                node_version:
                  $ref: '#/components/schemas/NodeVersion'
                node:
                  $ref: '#/components/schemas/Node'
              required:
                - node
                - node_version
                - personal_access_token
      responses:
        '201':
          description: New version published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  signedUrl:
                    type: string
                    description: The signed URL to upload the node version token.
                  node_version:
                    $ref: '#/components/schemas/NodeVersion'
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/nodes/{nodeId}/versions/{versionId}:
    delete:
      summary: Unpublish (delete) a specific version of a node
      operationId: deleteNodeVersion
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Version unpublished (deleted) successfully
        '403':
          description: Version does not belong to the publisher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update changelog and deprecation status of a node version
      operationId: updateNodeVersion
      description: Update only the changelog and deprecated status of a specific version of a node.
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeVersionUpdateRequest'
      responses:
        '200':
          description: Version updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeVersion'
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/nodes/{nodeId}/ban:
    post:
      summary: Ban a publisher's Node
      operationId: BanPublisherNode
      tags:
        - Registry
      x-excluded: true
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Node Banned Successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Publisher or Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/tokens:
    post:
      summary: Create a new personal access token
      operationId: createPersonalAccessToken
      security:
        - BearerAuth: [ ]
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalAccessToken'
      responses:
        '201':
          description: Token created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The newly created personal access token.
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    get:
      summary: Retrieve all personal access tokens for a publisher
      operationId: listPersonalAccessTokens
      security:
        - BearerAuth: [ ]
      tags:
        - Registry
      x-excluded: true
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of all personal access tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonalAccessToken'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No tokens found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /publishers/{publisherId}/tokens/{tokenId}:
    delete:
      summary: Delete a specific personal access token
      operationId: deletePersonalAccessToken
      security:
        - BearerAuth: [ ]
      tags:
        - Registry
      parameters:
        - in: path
          name: publisherId
          required: true
          schema:
            type: string
        - in: path
          name: tokenId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Token deleted successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /nodes/search:
    get:
      summary: Retrieves a list of nodes
      description: Returns a paginated list of nodes across all publishers.
      operationId: searchNodes
      tags:
        - Registry
      parameters:
        - in: query
          name: page
          description: Page number of the nodes list
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          description: Number of nodes to return per page
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: search
          description: Keyword to search the nodes
          required: false
          schema:
            type: string
        - in: query
          name: repository_url_search
          description: Keyword to search the nodes by repository URL
          required: false
          schema:
              type: string
        - in: query
          name: comfy_node_search
          description: Keyword to search the nodes by comfy node name
          required: false
          schema:
            type: string
        - in: query
          name: supported_OS
          description: Filter nodes by supported operating systems
          required: false
          schema:
            type: string
          examples:
            osIndependent:
              value: "OS Independent"
            windows:
              value: "Microsoft :: Windows"
            windows10:
              value: "Microsoft :: Windows :: Windows 10"
            linux:
              value: "POSIX :: Linux"
            ubuntu:
              value: "POSIX :: Linux :: Ubuntu"
            macos:
              value: "MacOS"
            macosx:
              value: "MacOS :: MacOS X"
        - in: query
          name: supported_accelerator
          description: Filter nodes by supported accelerator
          required: false
          schema:
            type: string
        - in: query
          name: include_banned
          description: Number of nodes to return per page
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A paginated list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of nodes available
                  nodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  page:
                    type: integer
                    description: Current page number
                  limit:
                    type: integer
                    description: Maximum number of nodes per page
                  totalPages:
                    type: integer
                    description: Total number of pages available
        '400':
          description: Invalid input, object invalid
        '404':
          description: Not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nodes/reindex:
    post:
      summary: Reindex all nodes for searching.
      operationId: reindexNodes
      tags:
        - Registry
      x-excluded: true
      parameters:
        - in: query
          name: max_batch
          description: Maximum number of nodes to send to algolia at a time
          required: false
          schema:
            type: integer
        - in: query
          name: min_age
          description: Minimum interval from the last time the nodes were indexed to algolia
          required: false
          schema:
            type: string
            x-go-type: time.Duration
      responses:
        '200':
          description: Reindex completed successfully.
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nodes:
    get:
      summary: Retrieves a list of nodes
      description: Returns a paginated list of nodes across all publishers.
      operationId: listAllNodes
      tags:
        - Registry
      parameters:
        - in: query
          name: page
          description: Page number of the nodes list
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          description: Number of nodes to return per page
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: supported_OS
          description: Filter nodes by supported operating systems
          required: false
          schema:
            type: string
          examples:
            osIndependent:
              value: "OS Independent"
            windows:
              value: "Microsoft :: Windows"
            windows10:
              value: "Microsoft :: Windows :: Windows 10"
            linux:
              value: "POSIX :: Linux"
            ubuntu:
              value: "POSIX :: Linux :: Ubuntu"
            macos:
              value: "MacOS"
            macosx:
              value: "MacOS :: MacOS X"
        - in: query
          name: supported_accelerator
          description: Filter nodes by supported accelerator
          required: false
          schema:
            type: string
        - in: query
          name: include_banned
          description: Number of nodes to return per page
          required: false
          schema:
            type: boolean
        - in: query
          name: timestamp
          description: Retrieve nodes created or updated after this timestamp (ISO 8601 format)
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: latest
          description: Whether to fetch fresh result from database or use cached one if false
          required: false
          schema:
            type: boolean
        - in: query
          name: sort
          description: Database column to use as ascending ordering. Add `;desc` as suffix on each column for descending sort
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: node_id
          description: node_id to use as filter
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: form_factor
          description: The platform requesting the nodes
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of nodes available
                  nodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  page:
                    type: integer
                    description: Current page number
                  limit:
                    type: integer
                    description: Maximum number of nodes per page
                  totalPages:
                    type: integer
                    description: Total number of pages available
        '400':
          description: Invalid input, object invalid
        '404':
          description: Not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nodes/{nodeId}:
    get:
      summary: Retrieve a specific node by ID
      description: Returns the details of a specific node.
      operationId: getNode
      tags:
        - Registry
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
        - in: query
          name: include_translations
          description: Whether to include the translation or not
          schema:
            type: boolean
      responses:
        '200':
          description: Node details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /nodes/{nodeId}/reviews:
    post:
      summary: Add review to a specific version of a node
      operationId: postNodeReview
      tags:
        - Registry
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
        - in: query
          name: star
          description: number of star given to the node version
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detailed information about a specific node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '400':
          description: Bad Request
        '404':
          description: Node version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /nodes/{nodeId}/install:
    get:
      summary: Returns a node version to be installed.
      description: Retrieves the node data for installation, either the latest or a specific version.
      operationId: installNode
      tags:
        - Registry
      parameters:
        - in: path
          name: nodeId
          required: true
          description: The unique identifier of the node.
          schema:
            type: string
        - in: query
          name: version
          required: false
          description: Specific version of the node to retrieve. If omitted, the latest version is returned.
          schema:
            type: string
            pattern: '^\d+\.\d+\.\d+$'
      responses:
        '200':
          description: Node data returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeVersion'
        '400':
          description: Invalid input, such as a bad version format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Node not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /nodes/{nodeId}/translations:
    post:
      summary: Create Node Translations
      operationId: CreateNodeTranslations
      tags:
        - Registry
      parameters:
        - in: path
          name: nodeId
          required: true
          description: The unique identifier of the node.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  additionalProperties:
                    type: object
                    additionalProperties: true
      responses:
        '201':
          description: Detailed information about a specific node
        '400':
          description: Bad Request
        '404':
          description: Node version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /nodes/{nodeId}/versions:
    get:
      summary: List all versions of a node
      operationId: listNodeVersions
      tags:
        - Registry
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
        - in: query
          name: statuses
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NodeVersionStatus'
        # parameter to include status_reason, default to false
        - in: query
          name: include_status_reason
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of all node versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NodeVersion'
        '403':
          description: Node banned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nodes/{nodeId}/versions/{versionId}:
    get:
      summary: Retrieve a specific version of a node
      operationId: getNodeVersion
      tags:
        - Registry
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
        - in: path
          name: versionId
          description: The version of the node. (Not a UUID).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed information about a specific node version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeVersion'
        '404':
          description: Node version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /versions:
    get:
      summary: List all node versions given some filters.
      operationId: listAllNodeVersions
      tags:
        - Registry
      parameters:
        - in: query
          name: nodeId
          required: false
          schema:
            type: string
        - in: query
          name: statuses
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NodeVersionStatus'
        # parameter to include status_reason, default to false
        - in: query
          name: include_status_reason
          required: false
          schema:
            type: boolean
            default: false
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number to retrieve.
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 10
          description: The number of items to include per page.
        - in: query
          name: status_reason
          required: false
          schema:
            type: string
          description: search for status_reason, case insensitive
      responses:
        '200':
          description: List of all node versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of node versions available
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/NodeVersion'
                  page:
                    type: integer
                    description: Current page number
                  pageSize:
                    type: integer
                    description: Maximum number of node versions per page. Maximum is 100.
                  totalPages:
                    type: integer
                    description: Total number of pages available
        '400':
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Node banned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/nodes:
    post:
      summary: Create a new custom node using admin priviledge
      operationId: adminCreateNode
      x-excluded: true
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Duplicate error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /admin/nodes/{nodeId}/versions/{versionNumber}:
    put:
      summary: Admin Update Node Version Status
      operationId: adminUpdateNodeVersion
      description: Only admins can approve a node version.
      x-excluded: true
      tags:
        - Registry
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
        - in: path
          name: versionNumber
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: "#/components/schemas/NodeVersionStatus"
                status_reason:
                  type: string
                  description: The reason for the status change.

      responses:
        '200':
          description: Version updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeVersion'
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /security-scan:
    get:
      summary: Security Scan
      operationId: securityScan
      description: Pull all pending node versions and conduct security scans.
      tags:
        - Registry
      x-excluded: true
      parameters:
        - in: query
          name: minAge
          required: false
          schema:
            type: string
            x-go-type: time.Duration
        - in: query
          name: minSecurityScanAge
          required: false
          schema:
            type: string
            x-go-type: time.Duration
        - in: query
          name: maxNodes
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Scan completed successfully
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nodes/{nodeId}/versions/{version}/comfy-nodes:
    parameters:
      - in: path
        name: nodeId
        required: true
        schema:
          type: string
      - in: path
        name: version
        required: true
        schema:
          type: string
    post:
      summary: create comfy-nodes for certain node
      operationId: CreateComfyNodes
      tags:
        - Registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                status:
                  type: string
                reason:
                  type: string
                cloud_build_info:
                  $ref: '#/components/schemas/ComfyNodeCloudBuildInfo'
                nodes:
                  additionalProperties:
                    $ref: '#/components/schemas/ComfyNode'
      responses:
        '204':
          description: Comy Nodes created successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Existing Comfy Nodes exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: list comfy-nodes for certain node
      operationId: ListComfyNodes
      tags:
        - Registry
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number to retrieve.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: The number of items to include per page.
      responses:
        '200':
          description: Comy Nodes obtained successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  comfy_nodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/ComfyNode'
                  totalNumberOfPages:
                    type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /nodes/{nodeId}/versions/{version}/comfy-nodes/{comfyNodeName}:
    get:
      summary: get specify comfy-node based on its id
      operationId: GetComfyNode
      tags:
        - Registry
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
        - in: path
          name: version
          required: true
          schema:
            type: string
        - in: path
          name: comfyNodeName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comy Nodes created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComfyNode'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /comfy-nodes/backfill:
    post:
      summary: trigger comfy nodes backfill
      operationId: ComfyNodesBackfill
      tags:
        - Registry
      x-excluded: true
      parameters:
        - in: query
          name: max_node
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '204':
          description: Backfill triggered
        '400':
          description: Bad request, invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/dummy:
    post:
      summary: Dummy proxy
      description: Dummy proxy endpoint that returns a simple string
      operationId: dummyProxy
      x-excluded: true
      tags:
        - API Nodes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '200':
          description: Reindex completed successfully.
  /proxy/minimax/video_generation:
    post:
      summary: Proxy request to Minimax for video generation
      description: Forwards video generation requests to Minimax's API and returns the task ID for asynchronous processing.
      operationId: minimaxVideoGeneration
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinimaxVideoGenerationRequest'

      responses:
        '200':
          description: Successful response from Minimax proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimaxVideoGenerationResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded (either from proxy or Minimax)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with Minimax)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (Minimax took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/minimax/query/video_generation:
    get:
      summary: Query status of a Minimax video generation task
      description: Proxies a request to Minimax to check the status of a video generation task
      operationId: getMinimaxVideoGeneration
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      parameters:
        - name: task_id
          in: query
          description: The task ID to be queried
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response with task status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimaxTaskResultResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded (either from proxy or Minimax)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with Minimax)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (Minimax took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/minimax/files/retrieve:
    post:
      summary: Retrieve download URL for a Minimax file
      description: Proxies a request to Minimax to get the download URL for a file
      operationId: retrieveMinimaxFile
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: file_id
          required: true
          schema:
            type: integer
          description: Unique identifier for the file, obtained from the generation response
      responses:
        '200':
          description: Successful response with file download URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimaxFileRetrieveResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded (either from proxy or Minimax)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with Minimax)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (Minimax took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/ideogram/generate:
    post:
      summary: Proxy request to Ideogram for image generation
      description: Forwards image generation requests to Ideogram's API and returns the results.
      operationId: ideogramGenerate
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdeogramGenerateRequest'
      responses:
        '200':
          description: Successful response from Ideogram proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeogramGenerateResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded (either from proxy or Ideogram)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with Ideogram)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (Ideogram took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/ideogram/ideogram-v3/generate:
    post:
      summary: Proxy request to Ideogram for image generation
      description: Forwards image generation requests to Ideogram's API and returns the results.
      operationId: ideogramV3Generate
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Parameters for Ideogram V3 image generation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdeogramV3Request'
      responses:
        '200':
          description: Successful response from Ideogram proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeogramGenerateResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/ideogram/ideogram-v3/edit:
    post:
      summary: Proxy request to Ideogram for image editing
      description: Forwards image editing requests to Ideogram's API and returns the results.
      operationId: ideogramV3Edit
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Parameters for Ideogram V3 image editing
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/IdeogramV3EditRequest'
      responses:
        '200':
          description: Successful response from Ideogram proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeogramGenerateResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '422':
          description: Prompt or Initial Image failed the safety checks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded (either from proxy or Ideogram)      
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/ideogram/ideogram-v3/remix:
      post:
          summary: Remix an image using a prompt
          operationId: ideogramV3Remix
          x-excluded: true
          tags:
            - API Nodes
            - Released
          requestBody:
              required: true
              content:
                  multipart/form-data:
                      schema:
                          $ref: '#/components/schemas/IdeogramV3RemixRequest'
          responses:
              "200":
                  description: Remix generated successfully
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/IdeogramV3IdeogramResponse'
              "400":
                  description: Bad Request
              "403":
                  description: Forbidden
              "422":
                  description: Unprocessable Entity
              "429":
                  description: Too Many Requests
          parameters: []
  /proxy/ideogram/ideogram-v3/reframe:
      post:
          summary: Reframe an image to a chosen resolution
          operationId: ideogramV3Reframe
          x-excluded: true
          tags: 
            - API Nodes
            - Released
          requestBody:
              required: true
              content:
                  multipart/form-data:
                      schema:
                          $ref: '#/components/schemas/IdeogramV3ReframeRequest'
          responses:
              "200":
                  description: Reframed image successfully returned
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/IdeogramV3IdeogramResponse'
              "400":
                  description: Bad Request
              "401":
                  description: Unauthorized
              "422":
                  description: Unprocessable Entity
              "429":
                  description: Too Many Requests
          parameters: []
  /proxy/ideogram/ideogram-v3/replace-background:
      post:
          summary: Replace background of an image using a prompt
          operationId: ideogramV3ReplaceBackground
          tags: 
            - API Nodes
            - Released
          x-excluded: true
          requestBody:
              required: true
              content:
                  multipart/form-data:
                      schema:
                          $ref: '#/components/schemas/IdeogramV3ReplaceBackgroundRequest'
          responses:
              "200":
                  description: Background replaced successfully
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/IdeogramV3IdeogramResponse'
              "400":
                  description: Bad Request
              "401":
                  description: Unauthorized
              "422":
                  description: Unprocessable Entity
              "429":
                  description: Too Many Requests
          parameters: []
          
  /proxy/kling/v1/account/costs:
    get:
      summary: KlingAI Query Resource Package Information
      operationId: klingQueryResourcePackages
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: start_time
          in: query
          required: true
          schema:
            type: integer
            description: Start time for the query, Unix timestamp in ms
        - name: end_time
          in: query
          required: true
          schema:
            type: integer
            description: End time for the query, Unix timestamp in ms
        - name: resource_pack_name
          in: query
          required: false
          schema:
            type: string
            description: Resource package name for precise querying of a specific package
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingResourcePackageResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/text2video:
    post:
      summary: KlingAI Create Video from Text
      operationId: klingCreateVideoFromText
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Create task for generating video from text
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KlingText2VideoRequest'
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingText2VideoResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
    get:
      summary: KlingAI Query Task List
      operationId: klingText2VideoQueryTaskList
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: pageNum
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 1000
        - name: pageSize
          in: query
          description: Data volume per page
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 500
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingText2VideoResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/text2video/{id}:
    get:
      summary: KlingAI Query Single Task
      operationId: klingText2VideoQuerySingleTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Task ID or external_task_id
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingText2VideoResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/image2video:
    post:
      summary: KlingAI Create Video from Image
      operationId: klingCreateVideoFromImage
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Create task for generating video from image
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KlingImage2VideoRequest'
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingImage2VideoResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
    get:
      summary: KlingAI Query Image2Video Task List
      operationId: klingImage2VideoQueryTaskList
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: pageNum
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 1000
        - name: pageSize
          in: query
          description: Data volume per page
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 500
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingImage2VideoResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/image2video/{id}:
    get:
      summary: KlingAI Query Single Image2Video Task
      operationId: klingImage2VideoQuerySingleTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Task ID or external_task_id
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingImage2VideoResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/video-extend:
    post:
      summary: KlingAI Extend Video Duration
      operationId: klingExtendVideo
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Create task for extending video duration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KlingVideoExtendRequest'
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVideoExtendResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
    get:
      summary: KlingAI Query Video-Extend Task List
      operationId: klingVideoExtendQueryTaskList
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: pageNum
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 1000
        - name: pageSize
          in: query
          description: Data volume per page
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 500
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVideoExtendResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/video-extend/{id}:
    get:
      summary: KlingAI Query Single Video-Extend Task
      operationId: klingVideoExtendQuerySingleTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Task ID
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVideoExtendResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/lip-sync:
    post:
      summary: KlingAI Create Lip-Sync Video
      operationId: klingCreateLipSyncVideo
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Create task for generating lip-sync video
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KlingLipSyncRequest'
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingLipSyncResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
    get:
      summary: KlingAI Query Lip-Sync Task List
      operationId: klingLipSyncQueryTaskList
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: pageNum
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 1000
        - name: pageSize
          in: query
          description: Data volume per page
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 500
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingLipSyncResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/lip-sync/{id}:
    get:
      summary: KlingAI Query Single Lip-Sync Task
      operationId: klingLipSyncQuerySingleTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Task ID or external_task_id
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingLipSyncResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/effects:
    post:
      summary: KlingAI Create Video Effects Task
      operationId: klingCreateVideoEffects
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Create task for generating video with effects
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KlingVideoEffectsRequest'
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVideoEffectsResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
    get:
      summary: KlingAI Query Video Effects Task List
      operationId: klingVideoEffectsQueryTaskList
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: pageNum
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 1000
        - name: pageSize
          in: query
          description: Data volume per page
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 500
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVideoEffectsResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/videos/effects/{id}:
    get:
      summary: KlingAI Query Single Video Effects Task
      operationId: klingVideoEffectsQuerySingleTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Task ID or external_task_id
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVideoEffectsResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/images/generations:
    post:
      summary: KlingAI Create Image Generation Task
      operationId: klingCreateImageGeneration
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Create task for generating images
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KlingImageGenerationsRequest'
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingImageGenerationsResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
    get:
      summary: KlingAI Query Image Generation Task List
      operationId: klingImageGenerationsQueryTaskList
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: pageNum
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 1000
        - name: pageSize
          in: query
          description: Data volume per page
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 500
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingImageGenerationsResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/images/generations/{id}:
    get:
      summary: KlingAI Query Single Image Generation Task
      operationId: klingImageGenerationsQuerySingleTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Task ID
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingImageGenerationsResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/images/kolors-virtual-try-on:
    post:
      summary: KlingAI Create Virtual Try-On Task
      operationId: klingCreateVirtualTryOn
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        description: Create task for virtual try-on of clothing on human images
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KlingVirtualTryOnRequest'
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVirtualTryOnResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
    get:
      summary: KlingAI Query Virtual Try-On Task List
      operationId: klingVirtualTryOnQueryTaskList
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: pageNum
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 1000
        - name: pageSize
          in: query
          description: Data volume per page
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 500
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVirtualTryOnResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/kling/v1/images/kolors-virtual-try-on/{id}:
    get:
      summary: KlingAI Query Single Virtual Try-On Task
      operationId: klingVirtualTryOnQuerySingleTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Task ID
      responses:
        '200':
          description: Successful response (Request successful)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingVirtualTryOnResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KlingErrorResponse'
  /proxy/bfl/flux-kontext-pro/generate:
    post:
      summary: Proxy request to BFL Flux Kontext Pro for image editing
      description: Forwards image editing requests to BFL's Flux Kontext Pro API and returns the results.
      operationId: bflFluxKontextProGenerate
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BFLFluxKontextProGenerateRequest'
      responses:
        '200':
          description: Successful response from BFL Flux Kontext Pro proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BFLFluxKontextProGenerateResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded (either from proxy or BFL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with BFL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (BFL took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/bfl/flux-kontext-max/generate:
    post:
      summary: Proxy request to BFL Flux Kontext Max for image editing
      description: Forwards image editing requests to BFL's Flux Kontext Max API and returns the results.
      operationId: bflFluxKontextMaxGenerate
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BFLFluxKontextMaxGenerateRequest'
      responses:
        '200':
          description: Successful response from BFL Flux Kontext Max proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BFLFluxKontextMaxGenerateResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded (either from proxy or BFL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with BFL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (BFL took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/bfl/flux-pro-1.1/generate:
    post:
      summary: Proxy request to BFL Flux Pro 1.1 for image generation
      description: Forwards image generation requests to BFL's Flux Pro 1.1 API and returns the results.
      operationId: bflFluxPro1_1Generate
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BFLFluxPro1_1GenerateRequest'
      responses:
        '200':
          description: Successful response from BFL Flux Pro proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BFLFluxPro1_1GenerateResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded (either from proxy or BFL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with BFL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (BFL took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/bfl/flux-pro-1.1-ultra/generate:
    post:
      summary: Proxy request to BFL Flux Pro 1.1 Ultra for image generation
      description: Forwards image generation requests to BFL's Flux Pro 1.1 Ultra API and returns the results.
      operationId: bflFluxProGenerate
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BFLFluxProGenerateRequest'
      responses:
        '200':
          description: Successful response from BFL Flux Pro proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BFLFluxProGenerateResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded (either from proxy or BFL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with BFL)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (BFL took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/bfl/flux-pro-1.0-expand/generate:
      post:
          tags:
              - API Nodes
              - Released
          summary: Expand an image by adding pixels on any side.
          x-excluded: true
          description: >-
              Submits an image expansion task that adds the specified number of pixels to any combination of sides (top, bottom, left, right) while maintaining context.
          operationId: BFLExpand_v1_flux_pro_1_0_expand_post
          requestBody:
              required: true
              content:
                  application/json:
                      schema:
                          $ref: '#/components/schemas/BFLFluxProExpandInputs'
          responses:
              "200":
                  description: Successful Response
                  content:
                      application/json:
                          schema:
                              anyOf:
                                  - $ref: '#/components/schemas/BFLAsyncResponse'
                                  - $ref: '#/components/schemas/BFLAsyncWebhookResponse'
                              title: Response Expand V1 Flux Pro 1 0 Expand Post
              "422":
                  description: Validation Error
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/BFLHTTPValidationError'
          parameters: []
  /proxy/bfl/flux-pro-1.0-fill/generate:
      post:
          tags:
              - API Nodes
              - Released
          summary: "Generate an image with FLUX.1 Fill [pro] using an input image and mask."
          x-excluded: true
          description: >-
              Submits an image generation task with the FLUX.1 Fill [pro] model using an input image and mask. Mask can be applied to alpha channel or submitted as a separate image.
          operationId: BFLFill_v1_flux_pro_1_0_fill_post
          requestBody:
              required: true
              content:
                  application/json:
                      schema:
                          $ref: '#/components/schemas/BFLFluxProFillInputs'
          responses:
              "200":
                  description: Successful Response
                  content:
                      application/json:
                          schema:
                              anyOf:
                                  - $ref: '#/components/schemas/BFLAsyncResponse'
                                  - $ref: '#/components/schemas/BFLAsyncWebhookResponse'
                              title: Response Fill V1 Flux Pro 1 0 Fill Post
              "422":
                  description: Validation Error
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/BFLHTTPValidationError'
          parameters: []
  /proxy/bfl/flux-pro-1.0-canny/generate:
      post:
          tags:
              - API Nodes
              - Released
          x-excluded: true
          summary: "Generate an image with FLUX.1 Canny [pro] using a control image."
          description: "Submits an image generation task with FLUX.1 Canny [pro]."
          operationId: BFLPro_canny_v1_flux_pro_1_0_canny_post
          requestBody:
              required: true
              content:
                  application/json:
                      schema:
                          $ref: '#/components/schemas/BFLCannyInputs'
          responses:
              "200":
                  description: Successful Response
                  content:
                      application/json:
                          schema:
                              anyOf:
                                  - $ref: '#/components/schemas/BFLAsyncResponse'
                                  - $ref: '#/components/schemas/BFLAsyncWebhookResponse'
                              title: Response Pro Canny V1 Flux Pro 1 0 Canny Post
              "422":
                  description: Validation Error
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/BFLHTTPValidationError'
          parameters: []
  /proxy/bfl/flux-pro-1.0-depth/generate:
      post:
          tags:
              - API Nodes
              - Released
          x-excluded: true
          summary: "Generate an image with FLUX.1 Depth [pro] using a control image."
          description: "Submits an image generation task with FLUX.1 Depth [pro]."
          operationId: BFLPro_depth_v1_flux_pro_1_0_depth_post
          requestBody:
              required: true
              content:
                  application/json:
                      schema:
                          $ref: '#/components/schemas/BFLDepthInputs'
          responses:
              "200":
                  description: Successful Response
                  content:
                      application/json:
                          schema:
                              anyOf:
                                  - $ref: '#/components/schemas/BFLAsyncResponse'
                                  - $ref: '#/components/schemas/BFLAsyncWebhookResponse'
                              title: Response Pro Depth V1 Flux Pro 1 0 Depth Post
              "422":
                  description: Validation Error
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/BFLHTTPValidationError'
          parameters: []
  /proxy/luma/generations:
    post:
      summary: Create a generation
      description: Initiate a new generation with the provided prompt
      operationId: lumaCreateGeneration
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        required: true
        description: The generation request object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LumaGenerationRequest'
            examples:
              default:
                value:
                  prompt: 'A serene lake surrounded by mountains at sunset'
                  aspect_ratio: '16:9'
                  loop: true
                  keyframes:
                    frame0:
                      type: image
                      url: 'https://example.com/image.jpg'
                    frame1:
                      type: generation
                      id: '123e4567-e89b-12d3-a456-426614174000'
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LumaError'
        '201':
          description: Generation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LumaGeneration'
      parameters: [ ]
  /proxy/luma/generations/{id}:
    get:
      summary: Get a generation
      description: Retrieve details of a specific generation by its ID
      operationId: lumaGetGeneration
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the generation
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LumaError'
        '200':
          description: Generation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LumaGeneration'

  /proxy/luma/generations/image:
    post:
      summary: Generate an image
      description: Generate an image with the provided prompt
      operationId: lumaGenerateImage
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        required: true
        description: The image generation request object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LumaImageGenerationRequest'
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LumaError'
        '201':
          description: Image generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LumaGeneration'
      parameters: [ ]
  /proxy/pixverse/video/text/generate:
    post:
      summary: Generate video from text prompt.
      operationId: PixverseGenerateTextVideo
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - $ref: '#/components/parameters/PixverseAiTraceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PixverseTextVideoRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PixverseVideoResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/pixverse/video/img/generate:
    post:
      summary: Generate video from image.
      operationId: PixverseGenerateImageVideo
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - $ref: '#/components/parameters/PixverseAiTraceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PixverseImageVideoRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PixverseVideoResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/pixverse/video/transition/generate:
    post:
      summary: Generate transition video between two images.
      operationId: PixverseGenerateTransitionVideo
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - $ref: '#/components/parameters/PixverseAiTraceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PixverseTransitionVideoRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PixverseVideoResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/pixverse/image/upload:
    post:
      summary: Upload an image to the server.
      operationId: PixverseUploadImage
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - $ref: '#/components/parameters/PixverseAiTraceId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PixverseImageUploadResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/pixverse/video/result/{id}:
    get:
      summary: Get the result of a video generation.
      operationId: PixverseGetVideoResult
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - $ref: '#/components/parameters/PixverseAiTraceId'
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Result fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PixverseVideoResultResponse'

  /webhook/metronome/zero-balance:
    post:
      summary: receive alert on remaining balance is 0
      operationId: metronomeZeroBalance
      x-excluded: true
      tags:
        - Webhook
        - Metronome
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ id, type, properties ]
              properties:
                id:
                  type: string
                  description: the id of the webhook
                type:
                  type: string
                  description: the type of the webhook
                properties:
                  type: object
                  properties:
                    customer_id:
                      type: string
                      description: the metronome customer id
                    remaining_balance:
                      type: number
                      description: the customer remaining balance
      responses:
        '200':
          description: Webhook processed succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeogramGenerateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /webhook/stripe/invoice-status:
    post:
      summary: Handle Stripe checkout.session.completed webhook event
      operationId: StripeInvoiceStatus
      x-excluded: true
      tags:
        - Billing
        - Stripe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StripeEvent'
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/recraft/image_generation:
    post:
      summary: Proxy request to Recraft for image generation
      description: Forwards image generation requests to Recraft's API and returns the generated images.
      operationId: recraftImageGeneration
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecraftImageGenerationRequest'
      responses:
        '200':
          description: Successful response from Recraft proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecraftImageGenerationResponse'
        '400':
          description: Bad Request (invalid input to proxy)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error (proxy or upstream issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad Gateway (error communicating with Recraft)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Gateway Timeout (Recraft took too long to respond)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/recraft/images/vectorize:
    post:
      summary: Vectorize an image
      operationId: recraftVectorize
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to process
              required:
                - file
      responses:
        '200':
          description: Background removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecraftImageGenerationResponse'
        '401':
          description: Unauthorized - Invalid or missing API token
        '400':
          description: Bad request - Invalid parameters or file
      security: [ ]
  /proxy/recraft/images/crispUpscale:
    post:
      summary: Upscale an image
      operationId: recraftCrispUpscale
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to process
              required:
                - file
      responses:
        '200':
          description: Background removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecraftImageGenerationResponse'
        '401':
          description: Unauthorized - Invalid or missing API token
        '400':
          description: Bad request - Invalid parameters or file
      security: [ ]
  /proxy/recraft/images/removeBackground:
    post:
      summary: Remove background from an image
      operationId: recraftRemoveBackground
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to process
              required:
                - file
      responses:
        '200':
          description: Background removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                        description: URL of the processed image
        '401':
          description: Unauthorized - Invalid or missing API token
        '400':
          description: Bad request - Invalid parameters or file
      security: [ ]
  /proxy/recraft/images/imageToImage:
    post:
      operationId: RecraftImageToImage
      x-excluded: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecraftImageToImageRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecraftGenerateImageResponse'
          description: OK
      summary: Generate image from image and prompt
      tags:
        - API Nodes
        - Released
      parameters: [ ]
  /proxy/recraft/images/inpaint:
    post:
      operationId: RecraftInpaintImage
      x-excluded: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecraftTransformImageWithMaskRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecraftGenerateImageResponse'
          description: OK
      summary: Inpaint Image
      tags:
        - API Nodes
        - Released
      parameters: [ ]
  /proxy/recraft/images/replaceBackground:
    post:
      operationId: RecraftReplaceBackground
      x-excluded: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecraftTransformImageWithMaskRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecraftGenerateImageResponse'
          description: OK
      summary: Replace Background
      tags:
        - API Nodes
        - Released
      parameters: [ ]
  /proxy/recraft/images/creativeUpscale:
    post:
      operationId: RecraftCreativeUpscale
      x-excluded: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecraftProcessImageRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecraftProcessImageResponse'
          description: OK
      summary: Creative Upscale
      tags:
        - API Nodes
        - Released
      parameters: [ ]
  /proxy/runway/image_to_video:
    post:
      summary: Runway Image to Video Generation
      x-excluded: true
      tags:
        - API Nodes
        - Released
      description: Converts an image to a video using Runway's API
      operationId: runwayImageToVideo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunwayImageToVideoRequest"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunwayImageToVideoResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/runway/tasks/{task_id}:
    get:
      summary: Get Runway Task Status
      description: Get the status and output of a Runway task
      operationId: runwayGetTaskStatus
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the task to check
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunwayTaskStatusResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/runway/text_to_image:
    post:
      summary: Runway Text to Image Generation
      x-excluded: true
      tags:
        - API Nodes
        - Released
      description: Generates an image from text using Runway's API
      operationId: runwayTextToImage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunwayTextToImageRequest"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunwayTextToImageResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '402':
          description: Payment Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /proxy/veo/generate:
    post:
      summary: Generate a video from a text prompt and optional image. Deprecated. Use /proxy/veo/{modelId}/generate instead.
      operationId: veoGenerate
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Veo2GenVidRequest'
      responses:
        '200':
          description: Video generation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Veo2GenVidResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /proxy/veo/poll:
    post:
      summary: Poll the status of a Veo prediction operation. Deprecated. Use /proxy/veo/{modelId}/generate instead.
      operationId: veoPoll
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Veo2GenVidPollRequest'
      responses:
        '200':
          description: Operation status and result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Veo2GenVidPollResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Operation not found
        '500':
          description: Internal error
  /proxy/veo/{modelId}/generate:
    post:
      summary: Generate a video from a text prompt and optional image
      operationId: veoGenerateNew
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
      - name: modelId
        in: path
        required: true
        schema:
          type: string
        description: The ID of the model to use for generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VeoGenVidRequest'
      responses:
        '200':
          description: Video generation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VeoGenVidResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /proxy/veo/{modelId}/poll:
    post:
      summary: Poll the status of a Veo prediction operation
      operationId: veoPollNew
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
      - name: modelId
        in: path
        required: true
        schema:
          type: string
        description: The ID of the model to use for generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VeoGenVidPollRequest'
      responses:
        '200':
          description: Operation status and result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VeoGenVidPollResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Operation not found
        '500':
          description: Internal error
  /proxy/openai/v1/responses:
    post:
      operationId: createOpenAIResponse
      tags:
        - API Nodes
        - Released
      x-excluded: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OpenAICreateResponse"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenAIResponse"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/OpenAIResponseStreamEvent"
  /proxy/openai/v1/responses/{id}:
    get:
      operationId: getOpenAIResponse
      tags:
        - API Nodes
        - Released
      x-excluded: true
      summary: |
        Retrieves a model response with the given ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: resp_677efb5139a88190b512bc3fef8e535d
          description: The ID of the response to retrieve.
        - in: query
          name: include
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Includable"
          description: |
            Additional fields to include in the response. See the `include`
            parameter for Response creation above for more information.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenAIResponse"
  /proxy/openai/images/generations:
    post:
      summary: Generate an image using OpenAI's models
      operationId: openAIGenerateImage
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OpenAIImageGenerationRequest"
      responses:
        "200":
          description: Image generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenAIImageGenerationResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
        "402":
          description: Payment Required
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /proxy/openai/images/edits:
    post:
      summary: Edit an image using OpenAI's DALL-E model
      operationId: openAIEditImage
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/OpenAIImageEditRequest"
      responses:
        "200":
          description: Image edited successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OpenAIImageGenerationResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
        "402":
          description: Payment Required
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /proxy/pika/generate/pikadditions:
      post:
          summary: Generate Pikadditions
          operationId: PikaGenerate_pikadditions_generate_pikadditions_post
          tags:
            - API Nodes
            - Released
          x-excluded: true
          requestBody:
              content:
                  multipart/form-data:
                      schema:
                          $ref: '#/components/schemas/PikaBody_generate_pikadditions_generate_pikadditions_post'
              required: true
          responses:
              '200':
                  description: Successful Response
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/PikaGenerateResponse'
              '422':
                  description: Validation Error
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/PikaHTTPValidationError'
          parameters: []
  /proxy/pika/generate/pikaswaps:
      post:
          summary: Generate Pikaswaps
          description: >-
              Exactly one of `modifyRegionMask` and `modifyRegionRoi` must be provided.
          tags:
            - API Nodes
            - Released
          x-excluded: true
          operationId: PikaGenerate_pikaswaps_generate_pikaswaps_post
          requestBody:
              content:
                  multipart/form-data:
                      schema:
                          $ref: '#/components/schemas/PikaBody_generate_pikaswaps_generate_pikaswaps_post'
              required: true
          responses:
              '200':
                  description: Successful Response
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/PikaGenerateResponse'
              '422':
                  description: Validation Error
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/PikaHTTPValidationError'
          parameters: []
  /proxy/pika/generate/pikaffects:
      post:
          summary: Generate Pikaffects
          operationId: PikaGenerate_pikaffects_generate_pikaffects_post
          tags:
            - API Nodes
            - Released
          x-excluded: true
          requestBody:
              content:
                  multipart/form-data:
                      schema:
                          $ref: '#/components/schemas/PikaBody_generate_pikaffects_generate_pikaffects_post'
              required: true
          responses:
              '200':
                  description: Successful Response
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/PikaGenerateResponse'
              '422':
                  description: Validation Error
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/PikaHTTPValidationError'
          description: >-
              Generate a video with a specific Pikaffect. Supported Pikaffects: Cake-ify, Crumble, Crush, Decapitate, Deflate, Dissolve, Explode, Eye-pop, Inflate, Levitate, Melt, Peel, Poke, Squish, Ta-da, Tear
          parameters: []
  /proxy/pika/generate/2.2/t2v:
    post:
      summary: Generate 2 2 T2V
      x-excluded: true
      tags:
        - API Nodes
        - Released
      operationId: PikaGenerate_2_2_t2v_generate_2_2_t2v_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PikaBody_generate_2_2_t2v_generate_2_2_t2v_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaGenerateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaHTTPValidationError'
      parameters: [ ]
  /proxy/pika/generate/2.2/pikaframes:
    post:
      summary: Generate 2 2 Keyframe
      x-excluded: true
      tags:
        - API Nodes
        - Released
      operationId: PikaGenerate_2_2_keyframe_generate_2_2_pikaframes_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PikaBody_generate_2_2_keyframe_generate_2_2_pikaframes_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaGenerateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaHTTPValidationError'
      parameters: [ ]
  /proxy/pika/generate/2.2/pikascenes:
    post:
      summary: Generate 2 2 C2V
      x-excluded: true
      tags:
        - API Nodes
        - Released
      operationId: PikaGenerate_2_2_c2v_generate_2_2_pikascenes_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PikaBody_generate_2_2_c2v_generate_2_2_pikascenes_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaGenerateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaHTTPValidationError'
      parameters: [ ]
  /proxy/pika/generate/2.2/i2v:
    post:
      summary: Generate 2 2 I2V
      x-excluded: true
      tags:
        - API Nodes
        - Released
      operationId: PikaGenerate_2_2_i2v_generate_2_2_i2v_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PikaBody_generate_2_2_i2v_generate_2_2_i2v_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaGenerateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaHTTPValidationError'
      parameters: [ ]
  /proxy/pika/videos/{video_id}:
    get:
      summary: Get Video
      operationId: PikaGet_video_videos__video_id__get
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: video_id
          in: path
          required: true
          schema:
            type: string
            title: Video Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaVideoResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PikaHTTPValidationError'
  /proxy/stability/v2beta/stable-image/generate/ultra:
    post:
      operationId: StabilityImageGenrationUltra
      x-excluded: true
      tags:
        - API Nodes
        - Released
      summary: Stable Image Ultra
      description: >-
        Our most advanced text to image generation service, Stable Image Ultra creates the highest quality images
        with unprecedented prompt understanding. Ultra excels in typography, complex compositions, dynamic lighting,
        vibrant hues, and overall cohesion and structure of an art piece. Made from the most advanced models,
        including Stable Diffusion 3.5, Ultra offers the best of the Stable Diffusion ecosystem.
        ### Try it out
        Grab your [API key](https://platform.stability.ai/account/keys) and head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=yXhs626oZdr1)
        ### How to use
        Please invoke this endpoint with a `POST` request.
        The headers of the request must include an API key in the `authorization` field. The body of the request must be
        `multipart/form-data`.  The accept header should be set to one of the following:
        - `image/*` to receive the image in the format specified by the `output_format` parameter.
        - `application/json` to receive the image in the format specified by the `output_format` parameter, but encoded to base64 in a JSON response.
        The only required parameter is the `prompt` field, which should contain the text prompt for the image generation.
        The body of the request should include:
        - `prompt` - text to generate the image from
        The body may optionally include:
        - `image` - the image to use as the starting point for the generation
        - `strength` - controls how much influence the `image` parameter has on the output image
        - `aspect_ratio` - the aspect ratio of the output image
        - `negative_prompt` - keywords of what you **do not** wish to see in the output image
        - `seed` - the randomness seed to use for the generation
        - `output_format` - the the format of the output image
        > **Note:** for the full list of optional parameters, please see the request schema below.
        ### Output
        The resolution of the generated image will be 1 megapixel. The default resolution is 1024x1024.
        ### Credits
        The Ultra service uses 8 credits per successful result. You will not be charged for failed results.
      x-codeSamples:
        - lang: python
          label: Python
          source: |-
            import requests
            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/generate/ultra",
                headers={
                    "authorization": f"Bearer sk-MYAPIKEY",
                    "accept": "image/*"
                },
                files={"none": ''},
                data={
                    "prompt": "Lighthouse on a cliff overlooking the ocean",
                    "output_format": "webp",
                },
            )
            if response.status_code == 200:
                with open("./lighthouse.webp", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        - lang: javascript
          label: JavaScript
          source: "import fs from \"node:fs\";\nimport axios from \"axios\";\nimport FormData from \"form-data\";\n\nconst payload = {\n  prompt: \"Lighthouse on a cliff overlooking the ocean\",\n  output_format: \"webp\"\n};\n\nconst response = await axios.postForm(\n  `https://api.stability.ai/v2beta/stable-image/generate/ultra`,\n  axios.toFormData(payload, new FormData()),\n  {\n    validateStatus: undefined,\n    responseType: \"arraybuffer\",\n    headers: { \n      Authorization: `Bearer sk-MYAPIKEY`, \n      Accept: \"image/*\" \n    },\n  },\n);\n\nif(response.status === 200) {\n  fs.writeFileSync(\"./lighthouse.webp\", Buffer.from(response.data));\n} else {\n  throw new Error(`${response.status}: ${response.data.toString()}`);\n}"
        - lang: terminal
          label: cURL
          source: >-
            curl -f -sS "https://api.stability.ai/v2beta/stable-image/generate/ultra" \
              -H "authorization: Bearer sk-MYAPIKEY" \
              -H "accept: image/*" \
              -F prompt="Lighthouse on a cliff overlooking the ocean" \
              -F output_format="webp" \
              -o "./lighthouse.webp"
      parameters:
        - schema:
            type: string
            description: >-
              Your [Stability API key](https://platform.stability.ai/account/keys), used to authenticate your requests. Although you may have multiple keys in your account, you should use the same key for all requests to this API.
            minLength: 1
          required: true
          name: authorization
          in: header
        - schema:
            type: string
            minLength: 1
            description: >-
              The content type of the request body. Do not manually specify this header; your HTTP client library will automatically include the appropriate boundary parameter.
            example: multipart/form-data
          required: true
          name: content-type
          in: header
        - schema:
            type: string
            default: image/*
            description: >-
              Specify `image/*` to receive the bytes of the image directly. Otherwise specify `application/json` to receive the image as base64 encoded JSON.
            enum:
              - image/*
              - application/json
          required: false
          name: accept
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityStabilityClientID'
          required: false
          name: stability-client-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityStabilityClientUserID'
          required: false
          name: stability-client-user-id
          in: header
        - schema:
            $ref: '#/components/schemas/StabilityStabilityClientVersion'
          required: false
          name: stability-client-version
          in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  minLength: 1
                  maxLength: 10000
                  description: >-
                    What you wish to see in the output image. A strong, descriptive prompt that clearly defines
                    elements, colors, and subjects will lead to better results.
                    To control the weight of a given word use the format `(word:weight)`,
                    where `word` is the word you'd like to control the weight of and `weight`
                    is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3) and (green:0.8)`
                    would convey a sky that was blue and green, but more green than blue.
                negative_prompt:
                  type: string
                  maxLength: 10000
                  description: >-
                    A blurb of text describing what you **do not** wish to see in the output image.
                    This is an advanced feature.
                aspect_ratio:
                  type: string
                  enum:
                    - '21:9'
                    - '16:9'
                    - '3:2'
                    - '5:4'
                    - '1:1'
                    - '4:5'
                    - '2:3'
                    - '9:16'
                    - '9:21'
                  default: '1:1'
                  description: Controls the aspect ratio of the generated image.
                seed:
                  type: number
                  minimum: 0
                  maximum: 4294967294
                  default: 0
                  description: >-
                    A specific value that is used to guide the 'randomness' of the generation. (Omit this parameter or pass `0` to use a random seed.)
                output_format:
                  type: string
                  enum:
                    - jpeg
                    - png
                    - webp
                  default: png
                  description: Dictates the `content-type` of the generated image.
                image:
                  type: string
                  description: >-
                    The image to use as the starting point for the generation.
                    > **Important:** The `strength` parameter is required when `image` is provided.
                    Supported Formats:
                    - jpeg
                    - png
                    - webp
                    Validation Rules:
                    - Width must be between 64 and 16,384 pixels
                    - Height must be between 64 and 16,384 pixels
                    - Total pixel count must be at least 4,096 pixels
                  format: binary
                  example: ./some/image.png
                style_preset:
                  type: string
                  enum:
                    - enhance
                    - anime
                    - photographic
                    - digital-art
                    - comic-book
                    - fantasy-art
                    - line-art
                    - analog-film
                    - neon-punk
                    - isometric
                    - low-poly
                    - origami
                    - modeling-compound
                    - cinematic
                    - 3d-model
                    - pixel-art
                    - tile-texture
                  description: Guides the image model towards a particular style.
                strength:
                  type: number
                  minimum: 0
                  maximum: 1
                  description: "Sometimes referred to as _denoising_, this parameter controls how much influence the \n`image` parameter has on the generated image.  A value of 0 would yield an image that \nis identical to the input.  A value of 1 would be as if you passed in no image at all.\n\n> **Important:** This parameter is required when `image` is provided."
              required:
                - prompt
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: |-
                The format of the generated image.
                  To receive the bytes of the image directly, specify `image/*` in the accept header. To receive the bytes base64 encoded inside of a JSON payload, specify `application/json`.
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                  - SUCCESS
                  - CONTENT_FILTERED
              description: >-
                Indicates the reason the generation finished.
                - `SUCCESS` = successful generation.
                - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                policy and has been blurred as a result.
                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `finish_reason`.
            seed:
              description: >-
                The seed used as random noise for this generation.
                > **NOTE:** This header is absent on JSON encoded responses because it is present in the body as `seed`.
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.
                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: 'The generated image, encoded to base64.'
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: >-
                      The reason the generation finished.
                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.
                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: 'The generated image, encoded to base64.'
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: >-
                      The reason the generation finished.
                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.
                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: 'The generated image, encoded to base64.'
                    example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum:
                      - SUCCESS
                      - CONTENT_FILTERED
                    description: >-
                      The reason the generation finished.
                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                      policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '400':
          description: 'Invalid parameter(s), see the `errors` field for details.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: >-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: >-
                      Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: >-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: >-
                      Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 4212a4b66fbe1cedca4bf2133d35dca5
                  name: payload_too_large
                  errors:
                    - 'body: payloads cannot be larger than 10MiB in size'
        '422':
          description: >-
            Your request was well-formed, but rejected. See the `errors` field for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: >-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: >-
                      Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                      - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                      - >-
                        Our system detected the likeness of a public figure in your image. To comply with our guidelines, this request cannot be processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: >-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: >-
                      Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: rate_limit_exceeded
                  name: rate_limit_exceeded
                  errors:
                    - >-
                      You have exceeded the rate limit of 150 requests within a 10 second period, and have been timed out for 60 seconds.
        '500':
          description: >-
            An internal error occurred. If the problem persists [contact support](https://kb.stability.ai/knowledge-base/kb-tickets/new).
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                    description: >-
                      A unique identifier associated with this error. Please include this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)
                      you file, as it will greatly assist us in diagnosing the root cause of the problem.
                    example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
                  name:
                    type: string
                    minLength: 1
                    description: >-
                      Short-hand name for an error, useful for discriminating between errors with the same status code.
                    example: bad_request
                  errors:
                    type: array
                    items:
                      type: string
                    minItems: 1
                    description: One or more error messages indicating what went wrong.
                    example:
                      - 'some-field: is required'
                required:
                  - id
                  - name
                  - errors
                example:
                  id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
                  name: internal_error
                  errors:
                    - >-
                      An unexpected server error has occurred, please try again later.
  /proxy/stability/v2beta/stable-image/generate/sd3:
    post:
      operationId: StabilityImageGenrationSD3
      x-excluded: true
      tags:
        - API Nodes
        - Released
      summary: Stable Diffusion 3.5
      description: "Generate using Stable Diffusion 3.5 models, Stability AI latest\
        \ base model:\n\n- **Stable Diffusion 3.5 Large**: At 8 billion parameters,\
        \ with superior quality and\n\n\n\n  prompt adherence, this base model is\
        \ the most powerful in the Stable Diffusion\n  family. This model is ideal\
        \ for professional use cases at 1 megapixel resolution.\n\n- **Stable Diffusion\
        \ 3.5 Large Turbo**: A distilled version of Stable Diffusion 3.5 Large.\n\n\
        \n\n  SD3.5 Large Turbo generates high-quality images with exceptional prompt\
        \ adherence\n  in just 4 steps, making it considerably faster than Stable\
        \ Diffusion 3.5 Large.\n\n- **Stable Diffusion 3.5 Medium**: With 2.5 billion\
        \ parameters, the model delivers an\n\n\n\n  optimal balance between prompt\
        \ accuracy and image quality, making it an efficient\n  choice for fast high-performance\
        \ image generation.\n\nRead more about the model capabilities [here](https://stability.ai/news/introducing-stable-diffusion-3-5).\n\
        \nAs of April 17, 2025, we have deprecated the Stable Diffusion 3.0 APIs and\
        \ will be automatically\nre-routing calls to Stable Diffusion 3.0 models to\
        \ Stable Diffusion 3.5 APIs at no extra cost.\nYou can read more in the [release\
        \ notes](/docs/release-notes#api-deprecation-notice).\n\n### Try it out\n\
        Grab your [API key](https://platform.stability.ai/account/keys) and head over\
        \ to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/SD3_API.ipynb)\n\
        \n### How to use\nPlease invoke this endpoint with a `POST` request.\n\nThe\
        \ headers of the request must include an API key in the `authorization` field.\
        \ The body of the request must be\n`multipart/form-data`.  The accept header\
        \ should be set to one of the following:\n- `image/*` to receive the image\
        \ in the format specified by the `output_format` parameter.\n- `application/json`\
        \ to receive the image encoded as base64 in a JSON response.\n\n#### **Generating\
        \ with a prompt**\nCommonly referred to as **text-to-image**, this mode generates\
        \ an image from text alone. While the only required\nparameter is the `prompt`,\
        \ it also supports an `aspect_ratio` parameter which can be used to control\
        \ the\naspect ratio of the generated image.\n\n#### **Generating with a prompt\
        \ *and* an image**\nCommonly referred to as **image-to-image**, this mode\
        \ also generates an image from text but uses an existing image as the\nstarting\
        \ point. The required parameters are:\n- `prompt` - text to generate the image\
        \ from\n- `image` - the image to use as the starting point for the generation\n\
        - `strength` - controls how much influence the `image` parameter has on the\
        \ output image\n- `mode` - must be set to `image-to-image`\n\n> **Note:**\
        \ maximum request size is 10MiB.\n\n#### **Optional Parameters:**\nBoth modes\
        \ support the following optional parameters:\n- `model` - the model to use\
        \ (SD3.5 Large, SD3.5 Large Turbo, SD3.5 Medium)\n- `output_format` - the\
        \ the format of the output image\n- `seed` - the randomness seed to use for\
        \ the generation\n- `negative_prompt` - keywords of what you **do not** wish\
        \ to see in the output image\n- `cfg_scale` - controls how strictly the diffusion\
        \ process adheres to the prompt text\n- `style_preset` - guides the image\
        \ model towards a particular style\n\n> **Note:** for more details about these\
        \ parameters please see the request schema below.\n\n### Output\nThe resolution\
        \ of the generated image will be 1MP. The default resolution is 1024x1024.\n\
        \n### Credits\n- **SD 3.5 Large**: Flat rate of 6.5 credits per successful\
        \ generation.\n- **SD 3.5 Large Turbo**: Flat rate of 4 credits per successful\
        \ generation.\n- **SD 3.5 Medium**: Flat rate of 3.5 credits per successful\
        \ generation.\n\nAs always, you will not be charged for failed generations."
      x-codeSamples:
      - lang: python
        label: Python
        source: "import requests\n\nresponse = requests.post(\n    f\"https://api.stability.ai/v2beta/stable-image/generate/sd3\"\
          ,\n    headers={\n        \"authorization\": f\"Bearer sk-MYAPIKEY\",\n\
          \        \"accept\": \"image/*\"\n    },\n    files={\"none\": ''},\n  \
          \  data={\n        \"prompt\": \"Lighthouse on a cliff overlooking the ocean\"\
          ,\n        \"output_format\": \"jpeg\",\n    },\n)\n\nif response.status_code\
          \ == 200:\n    with open(\"./lighthouse.jpeg\", 'wb') as file:\n       \
          \ file.write(response.content)\nelse:\n    raise Exception(str(response.json()))"
      - lang: javascript
        label: JavaScript
        source: "import fs from \"node:fs\";\nimport axios from \"axios\";\nimport\
          \ FormData from \"form-data\";\n\nconst payload = {\n  prompt: \"Lighthouse\
          \ on a cliff overlooking the ocean\",\n  output_format: \"jpeg\"\n};\n\n\
          const response = await axios.postForm(\n  `https://api.stability.ai/v2beta/stable-image/generate/sd3`,\n\
          \  axios.toFormData(payload, new FormData()),\n  {\n    validateStatus:\
          \ undefined,\n    responseType: \"arraybuffer\",\n    headers: { \n    \
          \  Authorization: `Bearer sk-MYAPIKEY`, \n      Accept: \"image/*\" \n \
          \   },\n  },\n);\n\nif(response.status === 200) {\n  fs.writeFileSync(\"\
          ./lighthouse.jpeg\", Buffer.from(response.data));\n} else {\n  throw new\
          \ Error(`${response.status}: ${response.data.toString()}`);\n}"
      - lang: terminal
        label: cURL
        source: "curl -f -sS \"https://api.stability.ai/v2beta/stable-image/generate/sd3\"\
          \ \\\n\n\n\n\n\n\n  -H \"authorization: Bearer sk-MYAPIKEY\" \\\n  -H \"\
          accept: image/*\" \\\n  -F prompt=\"Lighthouse on a cliff overlooking the\
          \ ocean\" \\\n  -F output_format=\"jpeg\" \\\n  -o \"./lighthouse.jpeg\""
      parameters:
      - schema:
          type: string
          description: Your [Stability API key](https://platform.stability.ai/account/keys),
            used to authenticate your requests. Although you may have multiple keys
            in your account, you should use the same key for all requests to this
            API.
          minLength: 1
        required: true
        name: authorization
        in: header
      - schema:
          type: string
          minLength: 1
          description: The content type of the request body. Do not manually specify
            this header; your HTTP client library will automatically include the appropriate
            boundary parameter.
          example: multipart/form-data
        required: true
        name: content-type
        in: header
      - schema:
          type: string
          default: image/*
          description: Specify `image/*` to receive the bytes of the image directly.
            Otherwise specify `application/json` to receive the image as base64 encoded
            JSON.
          enum:
          - image/*
          - application/json
        required: false
        name: accept
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientID'
        required: false
        name: stability-client-id
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientUserID'
        required: false
        name: stability-client-user-id
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientVersion'
        required: false
        name: stability-client-version
        in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StabilityImageGenerationSD3_Request'
      responses:
        '200':
          description: Generation was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: "The format of the generated image.\n\n To receive the\
                \ bytes of the image directly, specify `image/*` in the accept header.\
                \ To receive the bytes base64 encoded inside of a JSON payload, specify\
                \ `application/json`."
              examples:
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                - SUCCESS
                - CONTENT_FILTERED
              description: 'Indicates the reason the generation finished.


                - `SUCCESS` = successful generation.

                - `CONTENT_FILTERED` = successful generation, however the output violated
                our content moderation

                policy and has been blurred as a result.


                > **NOTE:** This header is absent on JSON encoded responses because
                it is present in the body as `finish_reason`.'
            seed:
              description: 'The seed used as random noise for this generation.


                > **NOTE:** This header is absent on JSON encoded responses because
                it is present in the body as `seed`.'
              example: '343940597'
              schema:
                type: string
          content:
            image/png:
              schema:
                type: string
                description: 'The bytes of the generated image.


                  The `finish-reason` and `seed` will be present as headers.'
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationSD3_Response_200'
            image/jpeg:
              schema:
                type: string
                description: 'The bytes of the generated image.


                  The `finish-reason` and `seed` will be present as headers.'
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationSD3_Response_200'
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationSD3_Response_400'
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationSD3_Response_413'
        '422':
          description: Your request was well-formed, but rejected. See the `errors`
            field for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationSD3_Response_422'
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                    - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                    - Our system detected the likeness of a public figure in your
                      image. To comply with our guidelines, this request cannot be
                      processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationSD3_Response_429'
        '500':
          description: An internal error occurred. If the problem persists [contact
            support](https://kb.stability.ai/knowledge-base/kb-tickets/new).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationSD3_Response_500'
  /proxy/stability/v2beta/stable-image/upscale/conservative:
    post:
      tags:
        - API Nodes
        - Released
      x-excluded: true
      summary: Conservative
      description: "Takes images between 64x64 and 1 megapixel and upscales them all\
        \ the way to 4K resolution. Put more generally, it can upscale images ~20-40x\
        \ times while preserving all aspects. Conservative Upscale minimizes alterations\
        \ to the image and should not be used to reimagine an image.\n\n### Try it\
        \ out\nGrab your [API key](https://platform.stability.ai/account/keys) and\
        \ head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=t1Q4w2uvvza0)\n\
        \n### How to use\n\nPlease invoke this endpoint with a `POST` request.\n\n\
        The headers of the request must include an API key in the `authorization`\
        \ field. The body of the request must be\n`multipart/form-data`, and the `accept`\
        \ header should be set to one of the following:\n\n\n\n  - `image/*` to receive\
        \ the image in the format specified by the `output_format` parameter.\n  -\
        \ `application/json` to receive the image encoded as base64 in a JSON response.\n\
        \nThe body of the request must include:\n- `image`\n- `prompt`\n\nOptionally,\
        \ the body of the request may also include:\n- `negative_prompt`\n- `seed`\n\
        - `output_format`\n- `creativity`\n\n> **Note:** for more details about these\
        \ parameters please see the request schema below.\n\n### Output\nThe resolution\
        \ of the generated image will be 4 megapixels.\n\n### Credits\nFlat rate of\
        \ 25 credits per successful generation.  You will not be charged for failed\
        \ generations."
      x-codeSamples:
      - lang: python
        label: Python
        source: "import requests\n\nresponse = requests.post(\n    f\"https://api.stability.ai/v2beta/stable-image/upscale/conservative\"\
          ,\n    headers={\n        \"authorization\": f\"Bearer sk-MYAPIKEY\",\n\
          \        \"accept\": \"image/*\"\n    },\n    files={\n        \"image\"\
          : open(\"./low-res-flower.jpg\", \"rb\"),\n    },\n    data={\n        \"\
          prompt\": \"a flower\",\n        \"output_format\": \"webp\",\n    },\n\
          )\n\nif response.status_code == 200:\n    with open(\"./flower.webp\", 'wb')\
          \ as file:\n        file.write(response.content)\nelse:\n    raise Exception(str(response.json()))"
      - lang: javascript
        label: JavaScript
        source: "import fs from \"node:fs\";\nimport axios from \"axios\";\nimport\
          \ FormData from \"form-data\";\n\nconst payload = {\n  image: fs.createReadStream(\"\
          ./low-res-flower.jpg\"),\n  prompt: \"a flower\",\n  output_format: \"webp\"\
          \n};\n\nconst response = await axios.postForm(\n  `https://api.stability.ai/v2beta/stable-image/upscale/conservative`,\n\
          \  axios.toFormData(payload, new FormData()),\n  {\n    validateStatus:\
          \ undefined,\n    responseType: \"arraybuffer\",\n    headers: { \n    \
          \  Authorization: `Bearer sk-MYAPIKEY`, \n      Accept: \"image/*\" \n \
          \   },\n  },\n);\n\nif(response.status === 200) {\n  fs.writeFileSync(\"\
          ./flower.webp\", Buffer.from(response.data));\n} else {\n  throw new Error(`${response.status}:\
          \ ${response.data.toString()}`);\n}"
      - lang: terminal
        label: cURL
        source: "curl -f -sS \"https://api.stability.ai/v2beta/stable-image/upscale/conservative\"\
          \ \\\n\n\n\n\n\n\n  -H \"authorization: Bearer sk-MYAPIKEY\" \\\n  -H \"\
          accept: image/*\" \\\n  -F image=@\"./low-res-flower.jpg\" \\\n  -F prompt=\"\
          a flower\" \\\n  -F output_format=\"webp\" \\\n  -o \"./flower.webp\""
      parameters:
      - schema:
          type: string
          description: Your [Stability API key](https://platform.stability.ai/account/keys),
            used to authenticate your requests. Although you may have multiple keys
            in your account, you should use the same key for all requests to this
            API.
          minLength: 1
        required: true
        name: authorization
        in: header
      - schema:
          type: string
          minLength: 1
          description: The content type of the request body. Do not manually specify
            this header; your HTTP client library will automatically include the appropriate
            boundary parameter.
          example: multipart/form-data
        required: true
        name: content-type
        in: header
      - schema:
          type: string
          default: image/*
          description: Specify `image/*` to receive the bytes of the image directly.
            Otherwise specify `application/json` to receive the image as base64 encoded
            JSON.
          enum:
          - image/*
          - application/json
        required: false
        name: accept
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientID'
        required: false
        name: stability-client-id
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientUserID'
        required: false
        name: stability-client-user-id
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientVersion'
        required: false
        name: stability-client-version
        in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Request'
      responses:
        '200':
          description: Upscale was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: "The format of the generated image.\n\n To receive the\
                \ bytes of the image directly, specify `image/*` in the accept header.\
                \ To receive the bytes base64 encoded inside of a JSON payload, specify\
                \ `application/json`."
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                - SUCCESS
                - CONTENT_FILTERED
              description: 'Indicates the reason the generation finished.


                - `SUCCESS` = successful generation.

                - `CONTENT_FILTERED` = successful generation, however the output violated
                our content moderation

                policy and has been blurred as a result.


                > **NOTE:** This header is absent on JSON encoded responses because
                it is present in the body as `finish_reason`.'
            seed:
              description: 'The seed used as random noise for this generation.


                > **NOTE:** This header is absent on JSON encoded responses because
                it is present in the body as `seed`.'
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: 'The bytes of the generated image.


                  The `finish-reason` and `seed` will be present as headers.'
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Response_200'
            image/png:
              schema:
                type: string
                description: 'The bytes of the generated image.


                  The `finish-reason` and `seed` will be present as headers.'
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Response_200'
            image/webp:
              schema:
                type: string
                description: 'The bytes of the generated image.


                  The `finish-reason` and `seed` will be present as headers.'
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Response_200'
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Response_400'
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Response_413'
        '422':
          description: Your request was well-formed, but rejected. See the `errors`
            field for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Response_422'
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                    - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                    - Our system detected the likeness of a public figure in your
                      image. To comply with our guidelines, this request cannot be
                      processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Response_429'
        '500':
          description: An internal error occurred. If the problem persists [contact
            support](https://kb.stability.ai/knowledge-base/kb-tickets/new).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleConservative_Response_500'
      operationId: StabilityImageGenrationUpscaleConservative
  /proxy/stability/v2beta/stable-image/upscale/creative:
    post:
      tags:
        - API Nodes
        - Released
      x-excluded: true
      summary: Creative Upscale (async)
      description: 'Takes images between 64x64 and 1 megapixel and upscales them all
        the way to **4K** resolution.  Put more

        generally, it can upscale images ~20-40x times while preserving, and often
        enhancing, quality.

        Creative Upscale **works best on highly degraded images and is not for photos
        of 1mp or above** as it performs

        heavy reimagining (controlled by creativity scale).


        ### Try it out

        Grab your [API key](https://platform.stability.ai/account/keys) and head over
        to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=QXxi9tfI425t)



        ### How to use

        Please invoke this endpoint with a `POST` request.


        The headers of the request must include an API key in the `authorization`
        field. The body of the request must be

        `multipart/form-data`.


        The body of the request should include:

        - `image`

        - `prompt`


        The body may optionally include:

        - `seed`

        - `negative_prompt`

        - `output_format`

        - `creativity`

        - `style_preset`


        > **Note:** for more details about these parameters please see the request
        schema below.


        ### Results

        After invoking this endpoint with the required parameters, use the `id` in
        the response to poll for results at the

        [results/{id} endpoint](#tag/Results/paths/~1v2beta~1results~1%7Bid%7D/get).  Rate-limiting
        or other errors may occur if you poll more than once every 10 seconds.


        ### Credits

        Flat rate of 25 credits per successful generation.  You will not be charged
        for failed generations.'
      x-codeSamples:
      - lang: python
        label: Python
        source: "import requests\n\nresponse = requests.post(\n    f\"https://api.stability.ai/v2beta/stable-image/upscale/creative\"\
          ,\n    headers={\n        \"authorization\": f\"Bearer sk-MYAPIKEY\",\n\
          \        \"accept\": \"image/*\"\n    },\n    files={\n        \"image\"\
          : open(\"./kitten-in-space.png\", \"rb\")\n    },\n    data={\n        \"\
          prompt\": \"cute fluffy white kitten floating in space, pastel colors\"\
          ,\n        \"output_format\": \"webp\",\n    },\n)\n\nprint(\"Generation\
          \ ID:\", response.json().get('id'))"
      - lang: javascript
        label: JavaScript
        source: "import fs from \"node:fs\";\nimport axios from \"axios\";\nimport\
          \ FormData from \"form-data\";\n\nconst payload = {\n  image: fs.createReadStream(\"\
          ./kitten-in-space.png\"),\n  prompt: \"cute fluffy white kitten floating\
          \ in space, pastel colors\",\n  output_format: \"webp\"\n};\n\nconst response\
          \ = await axios.postForm(\n  `https://api.stability.ai/v2beta/stable-image/upscale/creative`,\n\
          \  axios.toFormData(payload, new FormData()),\n  {\n    validateStatus:\
          \ undefined,\n    headers: { \n      Authorization: `Bearer sk-MYAPIKEY`\n\
          \    },\n  },\n);\n\nconsole.log(\"Generation ID:\", response.data.id);"
      - lang: terminal
        label: cURL
        source: "curl -f -sS \"https://api.stability.ai/v2beta/stable-image/upscale/creative\"\
          \ \\\n\n\n\n\n\n\n  -H \"authorization: Bearer sk-MYAPIKEY\" \\\n  -F image=@\"\
          ./kitten-in-rainforest.png\" \\\n  -F prompt=\"cute fluffy white kitten\
          \ sitting in a rainforest, pastel colors\" \\\n  -F output_format=webp \\\
          \n  -o \"./output.json\""
      parameters:
      - schema:
          type: string
          description: Your [Stability API key](https://platform.stability.ai/account/keys),
            used to authenticate your requests. Although you may have multiple keys
            in your account, you should use the same key for all requests to this
            API.
          minLength: 1
        required: true
        name: authorization
        in: header
      - schema:
          type: string
          minLength: 1
          description: The content type of the request body. Do not manually specify
            this header; your HTTP client library will automatically include the appropriate
            boundary parameter.
          example: multipart/form-data
        required: true
        name: content-type
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientID'
        required: false
        name: stability-client-id
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientUserID'
        required: false
        name: stability-client-user-id
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientVersion'
        required: false
        name: stability-client-version
        in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StabilityImageGenrationUpscaleCreative_Request'
      responses:
        '200':
          description: Upscale was started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleCreative_Response_200'
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleCreative_Response_400'
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleCreative_Response_413'
        '422':
          description: Your request was well-formed, but rejected. See the `errors`
            field for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleCreative_Response_422'
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                    - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                    - Our system detected the likeness of a public figure in your
                      image. To comply with our guidelines, this request cannot be
                      processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleCreative_Response_429'
        '500':
          description: An internal error occurred. If the problem persists [contact
            support](https://kb.stability.ai/knowledge-base/kb-tickets/new).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleCreative_Response_500'
      operationId: StabilityImageGenrationUpscaleCreative
  /proxy/stability/v2beta/stable-image/upscale/fast:
    post:
      tags:
        - API Nodes
        - Released
      x-excluded: true
      summary: Fast
      description: "Our Fast Upscaler service enhances image resolution by 4x using\
        \ predictive and generative AI. This lightweight and fast service (processing\
        \ in ~1 second) is ideal for enhancing the quality of compressed images, making\
        \ it suitable for social media posts and other applications.\n\n### Try it\
        \ out\nGrab your [API key](https://platform.stability.ai/account/keys) and\
        \ head over to [![Open Google Colab](https://platform.stability.ai/svg/google-colab.svg)](https://colab.research.google.com/github/stability-ai/stability-sdk/blob/main/nbs/Stable_Image_API_Public.ipynb#scrollTo=t1Q4w2uvvza0)\n\
        \n### How to use\n\nPlease invoke this endpoint with a `POST` request.\n\n\
        The headers of the request must include an API key in the `authorization`\
        \ field. The body of the request must be\n`multipart/form-data`, and the `accept`\
        \ header should be set to one of the following:\n\n\n\n  - `image/*` to receive\
        \ the image in the format specified by the `output_format` parameter.\n  -\
        \ `application/json` to receive the image encoded as base64 in a JSON response.\n\
        \nThe body of the request must include:\n- `image`\n\nOptionally, the body\
        \ of the request may also include:\n- `output_format`\n\n> **Note:** for more\
        \ details about these parameters please see the request schema below.\n\n\
        ### Output\nThe resolution of the generated image is 4 times that of the input\
        \ image with a maximum size of 16 megapixels.\n\n### Credits\nFlat rate of\
        \ 1 credit per successful generation. You will not be charged for failed generations."
      x-codeSamples:
      - lang: python
        label: Python
        source: "import requests\n\nresponse = requests.post(\n    f\"https://api.stability.ai/v2beta/stable-image/upscale/fast\"\
          ,\n    headers={\n        \"authorization\": f\"Bearer sk-MYAPIKEY\",\n\
          \        \"accept\": \"image/*\"\n    },\n    files={\n        \"image\"\
          : open(\"./low-res-flower.jpg\", \"rb\"),\n    },\n    data={\n        \"\
          output_format\": \"webp\",\n    },\n)\n\nif response.status_code == 200:\n\
          \    with open(\"./flower.webp\", 'wb') as file:\n        file.write(response.content)\n\
          else:\n    raise Exception(str(response.json()))"
      - lang: javascript
        label: JavaScript
        source: "import fs from \"node:fs\";\nimport axios from \"axios\";\nimport\
          \ FormData from \"form-data\";\n\nconst payload = {\n  image: fs.createReadStream(\"\
          ./low-res-flower.jpg\"),\n  output_format: \"webp\"\n};\n\nconst response\
          \ = await axios.postForm(\n  `https://api.stability.ai/v2beta/stable-image/upscale/fast`,\n\
          \  axios.toFormData(payload, new FormData()),\n  {\n    validateStatus:\
          \ undefined,\n    responseType: \"arraybuffer\",\n    headers: { \n    \
          \  Authorization: `Bearer sk-MYAPIKEY`, \n      Accept: \"image/*\" \n \
          \   },\n  },\n);\n\nif(response.status === 200) {\n  fs.writeFileSync(\"\
          ./flower.webp\", Buffer.from(response.data));\n} else {\n  throw new Error(`${response.status}:\
          \ ${response.data.toString()}`);\n}"
      - lang: terminal
        label: cURL
        source: "curl -f -sS \"https://api.stability.ai/v2beta/stable-image/upscale/fast\"\
          \ \\\n\n\n\n\n\n\n  -H \"authorization: Bearer sk-MYAPIKEY\" \\\n  -H \"\
          accept: image/*\" \\\n  -F image=@\"./low-res-flower.jpg\" \\\n  -F output_format=\"\
          webp\" \\\n  -o \"./flower.webp\""
      parameters:
      - schema:
          type: string
          description: Your [Stability API key](https://platform.stability.ai/account/keys),
            used to authenticate your requests. Although you may have multiple keys
            in your account, you should use the same key for all requests to this
            API.
          minLength: 1
        required: true
        name: authorization
        in: header
      - schema:
          type: string
          minLength: 1
          description: The content type of the request body. Do not manually specify
            this header; your HTTP client library will automatically include the appropriate
            boundary parameter.
          example: multipart/form-data
        required: true
        name: content-type
        in: header
      - schema:
          type: string
          default: image/*
          description: Specify `image/*` to receive the bytes of the image directly.
            Otherwise specify `application/json` to receive the image as base64 encoded
            JSON.
          enum:
          - image/*
          - application/json
        required: false
        name: accept
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientID'
        required: false
        name: stability-client-id
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientUserID'
        required: false
        name: stability-client-user-id
        in: header
      - schema:
          $ref: '#/components/schemas/StabilityStabilityClientVersion'
        required: false
        name: stability-client-version
        in: header
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Request'
      responses:
        '200':
          description: Upscale was successful.
          headers:
            x-request-id:
              description: A unique identifier for this request.
              schema:
                type: string
            content-type:
              description: "The format of the generated image.\n\n To receive the\
                \ bytes of the image directly, specify `image/*` in the accept header.\
                \ To receive the bytes base64 encoded inside of a JSON payload, specify\
                \ `application/json`."
              examples:
                jpeg:
                  description: raw bytes
                  value: image/jpeg
                jpegJSON:
                  description: base64 encoded
                  value: application/json; type=image/jpeg
                png:
                  description: raw bytes
                  value: image/png
                pngJSON:
                  description: base64 encoded
                  value: application/json; type=image/png
                webp:
                  description: raw bytes
                  value: image/webp
                webpJSON:
                  description: base64 encoded
                  value: application/json; type=image/webp
              schema:
                type: string
            finish-reason:
              schema:
                type: string
                enum:
                - SUCCESS
                - CONTENT_FILTERED
              description: 'Indicates the reason the generation finished.


                - `SUCCESS` = successful generation.

                - `CONTENT_FILTERED` = successful generation, however the output violated
                our content moderation

                policy and has been blurred as a result.


                > **NOTE:** This header is absent on JSON encoded responses because
                it is present in the body as `finish_reason`.'
            seed:
              description: 'The seed used as random noise for this generation.


                > **NOTE:** This header is absent on JSON encoded responses because
                it is present in the body as `seed`.'
              example: '343940597'
              schema:
                type: string
          content:
            image/jpeg:
              schema:
                type: string
                description: 'The bytes of the generated image.


                  The `finish-reason` and `seed` will be present as headers.'
                format: binary
              example: The bytes of the generated jpeg
            application/json; type=image/jpeg:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Response_200'
            image/png:
              schema:
                type: string
                description: 'The bytes of the generated image.


                  The `finish-reason` and `seed` will be present as headers.'
                format: binary
              example: The bytes of the generated png
            application/json; type=image/png:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Response_200'
            image/webp:
              schema:
                type: string
                description: 'The bytes of the generated image.


                  The `finish-reason` and `seed` will be present as headers.'
                format: binary
              example: The bytes of the generated webp
            application/json; type=image/webp:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Response_200'
        '400':
          description: Invalid parameter(s), see the `errors` field for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Response_400'
        '403':
          description: Your request was flagged by our content moderation system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityContentModerationResponse'
        '413':
          description: Your request was larger than 10MiB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Response_413'
        '422':
          description: Your request was well-formed, but rejected. See the `errors`
            field for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Response_422'
              examples:
                Invalid Language:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: invalid_language
                    errors:
                    - English is the only supported language for this service.
                Public Figure Detected:
                  value:
                    id: ff54b236a3acdde1522cb1ba641c43ed
                    name: public_figure
                    errors:
                    - Our system detected the likeness of a public figure in your
                      image. To comply with our guidelines, this request cannot be
                      processed. Please upload a different image.
        '429':
          description: You have made more than 150 requests in 10 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Response_429'
        '500':
          description: An internal error occurred. If the problem persists [contact
            support](https://kb.stability.ai/knowledge-base/kb-tickets/new).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityImageGenrationUpscaleFast_Response_500'
      operationId: StabilityImageGenerationUpscaleFast
  /proxy/stability/v2beta/results/{id}:
    get:
      summary: Get Result
      description: Get the result of a generation
      operationId: StabilityGetResult
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the generation result to retrieve.
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            default: image/*
          description: Set to image/* to receive image bytes.
      responses:
        '200':
          description: The generated image as JPEG bytes.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            application/json; type=image/jpeg:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum: [SUCCESS, CONTENT_FILTERED]
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                        policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason

            image/png:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated png

            application/json; type=image/png:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum: [SUCCESS, CONTENT_FILTERED]
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                        policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason

            image/webp:
              schema:
                type: string
                description: |-
                  The bytes of the generated image.

                  The `finish-reason` and `seed` will be present as headers.
                format: binary
              example: The bytes of the generated webp

            application/json; type=image/webp:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: The generated image, encoded to base64.
                    example: AAAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
                  seed:
                    type: number
                    minimum: 0
                    maximum: 4294967294
                    default: 0
                    description: The seed used as random noise for this generation.
                    example: 343940597
                  finish_reason:
                    type: string
                    enum: [SUCCESS, CONTENT_FILTERED]
                    description: |-
                      The reason the generation finished.

                      - `SUCCESS` = successful generation.
                      - `CONTENT_FILTERED` = successful generation, however the output violated our content moderation
                        policy and has been blurred as a result.
                    example: SUCCESS
                required:
                  - image
                  - finish_reason
        '202':
          description: The generation is still in progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityGetResultResponse_202'
        '400':
          description: Invalid result ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityError'
        '404':
          description: Result not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityError'
        '500':
          description: An internal error occurred. If the problem persists [contact
            support](https://kb.stability.ai/knowledge-base/kb-tickets/new).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StabilityError'
  /proxy/vertexai/gemini/{model}:
    post:
      summary: Generate content using a specified model.
      operationId: GeminiGenerateContent
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: model
          in: path
          schema:
            type: string
          required: true
          description: Full resource name of the model.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeminiGenerateContentRequest"
      responses:
        "200":
          description: Generated content response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeminiGenerateContentResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /proxy/vertexai/imagen/{model}:
    parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
          enum:
            - imagen-3.0-generate-002
            - imagen-3.0-generate-001
            - imagen-3.0-fast-generate-001
            - imagegeneration@006
            - imagegeneration@005
            - imagegeneration@002
        description: image generation model
    post:
      summary: Generate images from a text prompt
      operationId: ImagenGenerateImages
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagenGenerateImageRequest'
      responses:
        "200":
          description: Successful image generation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagenGenerateImageResponse'
        "4XX":
          description: Client error
        "5XX":
          description: Server error
  
  /proxy/tripo/v2/openapi/task/{task_id}:
    get:
      summary: Get Task Status
      operationId: tripoGetTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    $ref: '#/components/schemas/TripoResponseSuccessCode'
                  data:
                    $ref: '#/components/schemas/TripoTask'
                required:
                  - code
                  - data
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'

  /proxy/tripo/v2/openapi/upload:
    post:
      summary: Upload File for 3D Generation
      operationId: tripoUploadFile
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
            encoding:
              profileImage:
                contentType: image/png, image/jpeg
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                     $ref: '#/components/schemas/TripoResponseSuccessCode'
                  data:
                    type: object
                    properties:
                      image_token:
                        type: string
                    required:
                      - image_token
                required:
                  - code
                  - data
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'

  /proxy/tripo/v2/openapi/task:
    post:
      summary: Create 3D Generation Task
      operationId: tripoCreateTask
      x-excluded: true
      tags:
        - API Nodes
        - Released
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoTextToModel'
                    prompt:
                      type: string
                      maxLength: 1024
                    negative_prompt:
                      type: string
                      maxLength: 1024
                    model_version:
                      $ref: '#/components/schemas/TripoModelVersion'
                    face_limit:
                      type: integer
                    texture:
                      type: boolean
                      default: true
                    pbr:
                      type: boolean
                      default: true
                    text_seed:
                      type: integer
                    model_seed:
                      type: integer
                    texture_seed:
                      type: integer
                    texture_quality:
                      $ref: '#/components/schemas/TripoTextureQuality'
                      default: standard
                    style:
                      $ref: '#/components/schemas/TripoModelStyle'
                    auto_size:
                      type: boolean
                      default: false
                    quad:
                      type: boolean
                      default: false
                  required:
                    - type
                    - prompt
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoImageToModel'
                    file:
                      type: object
                      properties:
                        type:
                          type: string
                        file_token:
                          type: string
                      required:
                        - type
                        - file_token
                    model_version:
                      $ref: '#/components/schemas/TripoModelVersion'
                    face_limit:
                      type: integer
                    texture:
                      type: boolean
                      default: true
                    pbr:
                      type: boolean
                      default: true
                    model_seed:
                      type: integer
                    texture_seed:
                      type: integer
                    texture_quality:
                      $ref: '#/components/schemas/TripoTextureQuality'
                      default: standard
                    texture_alignment:
                      $ref: '#/components/schemas/TripoTextureAlignment'
                      default: original_image
                    style:
                      $ref: '#/components/schemas/TripoModelStyle'
                    auto_size:
                      type: boolean
                      default: false
                    orientation:
                      $ref: '#/components/schemas/TripoOrientation'
                      default: default
                    quad:
                      type: boolean
                      default: false
                  required:
                    - type
                    - file
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoMultiviewToModel'
                    files:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                          file_token:
                            type: string
                        required:
                          - type
                          - file_token
                    mode:
                      $ref: '#/components/schemas/TripoMultiviewMode'
                    model_version:
                      $ref: '#/components/schemas/TripoModelVersion'
                    orthographic_projection:
                      type: boolean
                      default: false
                    face_limit:
                      type: integer
                    texture:
                      type: boolean
                      default: true
                    pbr:
                      type: boolean
                      default: true
                    model_seed:
                      type: integer
                    texture_seed:
                      type: integer
                    texture_quality:
                      $ref: '#/components/schemas/TripoTextureQuality'
                      default: standard
                    texture_alignment:
                      $ref: '#/components/schemas/TripoTextureAlignment'
                      default: original_image
                    auto_size:
                      type: boolean
                      default: false
                    orientation:
                      $ref: '#/components/schemas/TripoOrientation'
                      default: default
                    quad:
                      type: boolean
                      default: false
                  required:
                    - type
                    - files
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoTypeTextureModel'
                    texture:
                      type: boolean
                      default: true
                    pbr:
                      type: boolean
                      default: true
                    model_seed:
                      type: integer
                    texture_seed:
                      type: integer
                    texture_quality:
                      $ref: '#/components/schemas/TripoTextureQuality'
                    texture_alignment:
                      $ref: '#/components/schemas/TripoTextureAlignment'
                      default: original_image
                    original_model_task_id:
                      type: string
                  required:
                    - type
                    - original_model_task_id
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoTypeRefineModel'
                    draft_model_task_id:
                      type: string
                  required:
                    - type
                    - draft_model_task_id
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoTypeAnimatePrerigcheck'
                    original_model_task_id:
                      type: string
                  required:
                    - type
                    - original_model_task_id
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoTypeAnimateRig'
                    original_model_task_id:
                      type: string
                    out_format:
                      $ref: '#/components/schemas/TripoStandardFormat'
                      default: glb
                    topology:
                      $ref: '#/components/schemas/TripoTopology'
                    spec:
                      $ref: '#/components/schemas/TripoSpec'
                      default: "tripo"
                  required:
                    - type
                    - original_model_task_id
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoTypeAnimateRetarget'
                    original_model_task_id:
                      type: string
                    out_format:
                      $ref: '#/components/schemas/TripoStandardFormat'
                      default: glb
                    animation:
                      $ref: '#/components/schemas/TripoAnimation'
                    bake_animation:
                      type: boolean
                      default: true
                  required:
                    - type
                    - original_model_task_id
                    - animation
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoTypeStylizeModel'
                    style:
                      $ref: '#/components/schemas/TripoStylizeOptions'
                    original_model_task_id:
                      type: string
                    block_size:
                      type: integer
                      default: 80
                  required:
                    - type
                    - style
                    - original_model_task_id
                - type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/TripoTypeConvertModel'
                    format:
                      $ref: '#/components/schemas/TripoConvertFormat'
                    original_model_task_id:
                      type: string
                    quad:
                      type: boolean
                      default: false
                    force_symmetry:
                      type: boolean
                      default: false
                    face_limit:
                      type: integer
                      default: 10000
                    flatten_bottom:
                      type: boolean
                      default: false
                    flatten_bottom_threshold:
                      type: number
                      default: 0.01
                    texture_size:
                      type: integer
                      default: 4096
                    texture_format:
                      $ref: '#/components/schemas/TripoTextureFormat'
                      default: JPEG
                    pivot_to_center_bottom:
                      type: boolean
                      default: false
                  required:
                    - type
                    - format
                    - original_model_task_id
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoSuccessTask'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'

  /proxy/tripo/v2/openapi/user/balance:
    get:
      summary: Query Account Balance
      operationId: tripoGetBalance
      x-excluded: true
      tags:
        - API Nodes
        - Released
      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    $ref: '#/components/schemas/TripoResponseSuccessCode'
                  data:
                    $ref: "#/components/schemas/TripoBalance"
                required:
                  - code
                  - data
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '403':
          description: Unauthorized access to requested resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '429':
          description: Account exception or Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'
        '504':
          description: Server timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripoErrorResponse'

  /proxy/rodin/api/v2/rodin:
    post:
      summary: Create 3D generate Task using Rodin API.
      operationId: rodinGenerate3DAsset
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Rodin3DGenerateRequest"
      responses:
        "200":
          description: 3D generate Task submitted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rodin3DGenerateResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /proxy/rodin/api/v2/status:
    post:
      summary: Check Rodin 3D Generate Status.
      operationId: rodinCheckStatus
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Rodin3DCheckStatusRequest"
      responses:
        "200":
          description: Get the status of the 3D Assets generation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rodin3DCheckStatusResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /proxy/rodin/api/v2/download:
    post:
      summary: Get rodin 3D Assets download list.
      operationId: rodinDownload
      x-excluded: true
      tags:
        - API Nodes
        - Released
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Rodin3DDownloadRequest"
      responses:
        "200":
          description: Get the download list for the Rodin 3D Assets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rodin3DDownloadResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error

  /proxy/moonvalley/prompts/{prompt_id}:
      get:
          summary: Get Prompt Details
          operationId: Moonvalley
          tags:
            - API Nodes
          x-excluded: true
          parameters:
              - name: prompt_id
                in: path
                required: true
                schema:
                  type: string
          responses:
              "200":
                  description: Prompt details
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/MoonvalleyPromptResponse'
  /proxy/moonvalley/prompts:
      post:
          summary: Create Text-to-Video or Image-to-Video Prompt
          operationId: MoonvalleyCreatePrompt
          tags:
            - API Nodes
          x-excluded: true
          requestBody:
              required: true
              content:
                  application/json:
                      schema:
                          $ref: '#/components/schemas/MoonvalleyCreatePromptRequest'
          responses:
              "201":
                  description: Prompt created
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/MoonvalleyCreatePromptResponse'
          parameters: []
  /proxy/moonvalley/prompts/video-to-video:
      post:
          summary: Create Video-to-Video Prompt
          operationId: MoonvalleyCreateVideoToVideoPrompt
          tags:
            - API Nodes
          x-excluded: true
          requestBody:
              required: true
              content:
                  application/json:
                      schema:
                          $ref: '#/components/schemas/MoonvalleyCreateVideoToVideoRequest'
          responses:
              "201":
                  description: Prompt created
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/MoonvalleyCreatePromptResponse'
          parameters: []
  /proxy/moonvalley/prompts/text-to-image:
      post:
          summary: Create Text-to-Image Prompt
          operationId: MoonvalleyCreateTextToImagePrompt
          tags:
            - API Nodes
          x-excluded: true
          requestBody:
              required: true
              content:
                  application/json:
                      schema:
                          $ref: '#/components/schemas/MoonvalleyCreatePromptRequest'
          responses:
              "201":
                  description: Prompt created
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/MoonvalleyCreatePromptResponse'
          parameters: []
  /proxy/moonvalley/uploads:
      post:
          summary: Upload File
          operationId: MoonvalleyUploadFile
          tags:
            - API Nodes
          x-excluded: true
          requestBody:
              required: true
              content:
                  multipart/form-data:
                      schema:
                          type: object
                          properties:
                              file:
                                  type: string
                                  format: binary
          responses:
              "200":
                  description: Upload successful
                  content:
                      application/json:
                          schema:
                              $ref: '#/components/schemas/MoonvalleyUploadResponse'
          parameters: []
components:
  schemas:
    PersonalAccessToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the GitCommit
        name:
          type: string
          description: Required. The name of the token. Can be a simple description.
        description:
          type: string
          description: Optional. A more detailed description of the token's intended use.
        createdAt:
          type: string
          format: date-time
          description: "[Output Only]The date and time the token was created."
        token:
          type: string
          description: "[Output Only]. The personal access token. Only returned during creation."
    GitCommit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the GitCommit
        commit_hash:
          type: string
          description: The hash of the commit
        commit_name:
          type: string
          description: The name of the commit
        branch_name:
          type: string
          description: The branch where the commit was made
        author:
          type: string
          description: The author of the commit
        timestamp:
          type: string
          format: date-time
          description: The timestamp when the commit was made
    GitCommitSummary:
      type: object
      properties:
        commit_hash:
          type: string
          description: The hash of the commit
        commit_name:
          type: string
          description: The name of the commit
        branch_name:
          type: string
          description: The branch where the commit was made
        author:
          type: string
          description: The author of the commit
        timestamp:
          type: string
          format: date-time
          description: The timestamp when the commit was made
        status_summary:
          type: object
          description: A map of operating system to status pairs
          additionalProperties:
            type: string
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique id for this user.
        email:
          type: string
          description: The email address for this user.
        name:
          type: string
          description: The name for this user.
        isApproved:
          type: boolean
          description: Indicates if the user is approved.
        isAdmin:
          type: boolean
          description: Indicates if the user has admin privileges.
    PublisherUser:
      type: object
      properties:
        id:
          type: string
          description: The unique id for this user.
        email:
          type: string
          description: The email address for this user.
        name:
          type: string
          description: The name for this user.
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
      required:
        - error
        - message
    RunwayTextToImageRequest:
      type: object
      properties:
        promptText:
          type: string
          maxLength: 1000
          description: Text prompt for the image generation
        model:
          type: string
          enum: [gen4_image]
          description: Model to use for generation
        ratio:
          $ref: '#/components/schemas/RunwayTextToImageAspectRatioEnum'
          description: The resolution (aspect ratio) of the output image
        referenceImages:
          type: array
          items:
            type: object
            properties:
              uri:
                type: string
                description: A HTTPS URL or data URI containing an encoded image
          description: Array of reference images to guide the generation
      required:
        - promptText
        - model
        - ratio
    ActionJobResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the job result
        workflow_name:
          type: string
          description: Name of the workflow
        operating_system:
          type: string
          description: Operating system used
        python_version:
          type: string
          description: PyTorch version used
        pytorch_version:
          type: string
          description: PyTorch version used
        action_run_id:
          type: string
          description: Identifier of the run this result belongs to
        action_job_id:
          type: string
          description: Identifier of the job this result belongs to
        cuda_version:
          type: string
          description: CUDA version used
        branch_name:
          type: string
          description: Name of the relevant git branch
        commit_hash:
          type: string
          description: The hash of the commit
        commit_id:
          type: string
          description: The ID of the commit
        commit_time:
          type: integer
          format: int64
          description: The Unix timestamp when the commit was made
        commit_message:
          type: string
          description: The message of the commit
        comfy_run_flags:
          type: string
          description: The comfy run flags. E.g. `--low-vram`
        git_repo:
          type: string
          description: The repository name
        pr_number:
          type: string
          description: The pull request number
        start_time:
          type: integer
          format: int64
          description: The start time of the job as a Unix timestamp.
        end_time:
          type: integer
          format: int64
          description: The end time of the job as a Unix timestamp.
        avg_vram:
          type: integer
          description: The average VRAM used by the job
        peak_vram:
          type: integer
          description: The peak VRAM used by the job
        job_trigger_user:
          type: string
          description: The user who triggered the job.
        author:
          type: string
          description: The author of the commit
        machine_stats:
          $ref: "#/components/schemas/MachineStats"
        status:
          $ref: "#/components/schemas/WorkflowRunStatus"
        storage_file:
          $ref: "#/components/schemas/StorageFile"
    StorageFile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the storage file
        file_path:
          type: string
          description: Path to the file in storage
        public_url:
          type: string
          description: Public URL
    Publisher:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
          description: The unique identifier for the publisher. It's akin to a username. Should be lowercase.
        description:
          type: string
        website:
          type: string
        support:
          type: string
        source_code_repo:
          type: string
        logo:
          type: string
          description: URL to the publisher's logo.
        createdAt:
          type: string
          format: date-time
          description: The date and time the publisher was created.
        members:
          type: array
          items:
            $ref: "#/components/schemas/PublisherMember"
          description: A list of members in the publisher.
        status:
          $ref: "#/components/schemas/PublisherStatus"
          description: The status of the publisher.
    PublisherMember:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the publisher member.
        user:
          $ref: "#/components/schemas/PublisherUser"
          description: The user associated with this publisher member.
        role:
          type: string
          description: The role of the user in the publisher.
    Node:
      type: object
      properties:
        id:
          type: string
          description: "The unique identifier of the node."
        name:
          type: string
          description: The display name of the node.
        category:
          type: string
          description: The category of the node.
        description:
          type: string
        author:
          type: string
        license:
          type: string
          description: The path to the LICENSE file in the node's repository.
        icon:
          type: string
          description: URL to the node's icon.
        repository:
          type: string
          description: URL to the node's repository.
        tags:
          type: array
          items:
            type: string
        supported_OS:
          type: array
          items:
            type: string
          description: List of operating systems that this node supports
        supported_accelerators:
          type: array
          items:
            type: string
          description: List of accelerators (e.g. CUDA, DirectML, ROCm) that this node supports
        min_version_comfyUI:
          type: string
          description: Minimum required version of ComfyUI
        min_version_comfyUI_frontend:
          type: string
          description: Minimum required version of ComfyUI frontend
        latest_version:
          $ref: "#/components/schemas/NodeVersion"
          description: The latest version of the node.
        rating:
          type: number
          description: The average rating of the node.
        downloads:
          type: integer
          description: The number of downloads of the node.
        publisher:
          $ref: "#/components/schemas/Publisher"
          description: The publisher of the node.
        status:
          $ref: "#/components/schemas/NodeStatus"
          description: The status of the node.
        status_detail:
          type: string
          description: The status detail of the node.
        translations:
          type: object
          additionalProperties:
            type: object
            additionalProperties: true
          description: Translations of node metadata in different languages.
        search_ranking:
          type: integer
          description: A numerical value representing the node's search ranking, used for sorting search results.
        preempted_comfy_node_names:
          type: array
          items:
              type: string
          description: A list of Comfy node names that are preempted by this node.
    NodeVersion:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
          description: The version identifier, following semantic versioning. Must be unique for the node.
        createdAt:
          type: string
          format: date-time
          description: The date and time the version was created.
        changelog:
          type: string
          description: Summary of changes made in this version
        dependencies:
          type: array
          items:
            type: string
          description: A list of pip dependencies required by the node.
        downloadUrl:
          type: string
          description: "[Output Only] URL to download this version of the node"
        deprecated:
          type: boolean
          description: Indicates if this version is deprecated.
        status:
          $ref: "#/components/schemas/NodeVersionStatus"
          description: The status of the node version.
        status_reason:
          type: string
          description: The reason for the status change.
        node_id:
          type: string
          description: The unique identifier of the node.
        comfy_node_extract_status:
          type: string
          description: The status of comfy node extraction process.
    ComfyNode:
      type: object
      properties:
        comfy_node_name:
          type: string
          description: Unique identifier for the node
        category:
          type: string
          description: UI category where the node is listed, used for grouping nodes.
        description:
          type: string
          description: Brief description of the node's functionality or purpose.
        input_types:
          type: string
          description: Defines input parameters
        deprecated:
          type: boolean
          description: Indicates if the node is deprecated. Deprecated nodes are hidden in the UI.
        experimental:
          type: boolean
          description: Indicates if the node is experimental, subject to changes or removal.
        output_is_list:
          type: array
          items:
            type: boolean
          description: Boolean values indicating if each output is a list.
        return_names:
          type: string
          description: Names of the outputs for clarity in workflows.
        return_types:
          type: string
          description: Specifies the types of outputs produced by the node.
        function:
          type: string
          description: Name of the entry-point function to execute the node.
    ComfyNodeCloudBuildInfo:
      type: object
      properties:
        project_id:
          type: string
        project_number:
          type: string
        location:
          type: string
        build_id:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
          description: A clear and concise description of the error.
        details:
          type: array
          items:
            type: string
          description: Optional detailed information about the error or hints for resolving it.
    # ======= Request body Definitions =======================
    NodeVersionUpdateRequest:
      type: object
      properties:
        changelog:
          type: string
          description: The changelog describing the version changes.
        deprecated:
          type: boolean
          description: Whether the version is deprecated.
    # Enum of Node Status
    NodeStatus:
      type: string
      enum:
        - NodeStatusActive
        - NodeStatusDeleted
        - NodeStatusBanned
    # Enum of Node Version Status
    NodeVersionStatus:
      type: string
      enum:
        - NodeVersionStatusActive
        - NodeVersionStatusDeleted
        - NodeVersionStatusBanned
        - NodeVersionStatusPending
        - NodeVersionStatusFlagged
    PublisherStatus:
      type: string
      enum:
        - PublisherStatusActive
        - PublisherStatusBanned
    WorkflowRunStatus:
      type: string
      enum:
        - WorkflowRunStatusStarted
        - WorkflowRunStatusFailed
        - WorkflowRunStatusCompleted
    MachineStats:
      type: object
      properties:
        machine_name:
          type: string
          description: Name of the machine.
        os_version:
          type: string
          description: The operating system version. eg. Ubuntu Linux 20.04
        gpu_type:
          type: string
          description: The GPU type. eg. NVIDIA Tesla K80
        cpu_capacity:
          type: string
          description: Total CPU on the machine.
        initial_cpu:
          type: string
          description: Initial CPU available before the job starts.
        memory_capacity:
          type: string
          description: Total memory on the machine.
        initial_ram:
          type: string
          description: Initial RAM available before the job starts.
        vram_time_series:
          type: object
          description: Time series of VRAM usage.
        disk_capacity:
          type: string
          description: Total disk capacity on the machine.
        initial_disk:
          type: string
          description: Initial disk available before the job starts.
        pip_freeze:
          type: string
          description: The pip freeze output
    Customer:
      type: object
      properties:
        id:
          type: string
          description: The firebase UID of the user
        email:
          type: string
          description: The email address for this user
        name:
          type: string
          description: The name for this user
        createdAt:
          type: string
          format: date-time
          description: The date and time the user was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time the user was last updated
        is_admin:
          type: boolean
          description: Whether the user is an admin
        stripe_id:
          type: string
          description: The Stripe customer ID
        metronome_id:
          type: string
          description: The Metronome customer ID
      required:
        - id
    AuditLog:
      type: object 
      properties:
        event_type:
          type: string 
          description: the type of the event
        event_id:
          type: string 
          description: the id of the event
        params:
          type: object
          description: data related to the event 
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: The date and time the event was created
    IdeogramV3Request:
      type: object
      properties:
        prompt:
          type: string
          description: The text prompt for image generation
        seed:
          type: integer
          description: Seed value for reproducible generation
        resolution:
          type: string
          description: Image resolution in format WxH
          example: "1280x800"
        aspect_ratio:
          type: string
          description: Aspect ratio in format WxH
          example: "1x3"
        rendering_speed:
          $ref: '#/components/schemas/RenderingSpeed'
        magic_prompt:
          type: string
          enum: ["ON", "OFF"]
          description: Whether to enable magic prompt enhancement
        negative_prompt:
          type: string
          description: Text prompt specifying what to avoid in the generation
        num_images:
          type: integer
          description: Number of images to generate
          minimum: 1
        color_palette:
          type: object
          properties:
            name:
              type: string
              description: Name of the color palette
              example: "PASTEL"
          required:
            - name
        style_codes:
          type: array
          items:
            type: string
            pattern: "^[0-9A-Fa-f]{8}$"
          description: Array of style codes in hexadecimal format
        style_type:
          type: string
          enum: ["GENERAL"]
          description: The type of style to apply
        style_reference_images:
          type: array
          items:
            type: string
          description: Array of reference image URLs or identifiers
      required:
        - prompt
        - rendering_speed

    IdeogramV3EditRequest:
      type: object
      required:
        - prompt
        - rendering_speed
      properties:
        image:
          type: string
          format: binary
          description: The image being edited (max size 10MB); only JPEG, WebP and PNG formats are supported at this time.
        mask:
          type: string
          format: binary
          description: A black and white image of the same size as the image being edited (max size 10MB). Black regions in the mask should match up with the regions of the image that you would like to edit; only JPEG, WebP and PNG formats are supported at this time.
        prompt:
          type: string
          description: The prompt used to describe the edited result.
        magic_prompt:
          type: string
          description: Determine if MagicPrompt should be used in generating the request or not.
        num_images:
          type: integer
          description: The number of images to generate.
        seed:
          type: integer
          description: Random seed. Set for reproducible generation.
        rendering_speed:
          $ref: '#/components/schemas/RenderingSpeed'
        color_palette:
          type: object
          description: A color palette for generation, must EITHER be specified via one of the presets (name) or explicitly via hexadecimal representations of the color with optional weights (members). Not supported by V_1, V_1_TURBO, V_2A and V_2A_TURBO models.
          $ref: '#/components/schemas/IdeogramColorPalette'
        style_codes:
          type: array
          items:
            type: string
            pattern: '^[0-9A-Fa-f]{8}$'
          description: A list of 8 character hexadecimal codes representing the style of the image. Cannot be used in conjunction with style_reference_images or style_type.
        style_reference_images:
          type: array
          items:
            type: string
            format: binary
          description: A set of images to use as style references (maximum total size 10MB across all style references). The images should be in JPEG, PNG or WebP format.
    IdeogramColorPalette:
      type: object
      description: A color palette specification that can either use a preset name or explicit color definitions with weights
      oneOf:
        - properties:
            name:
              type: string
              description: Name of the preset color palette
          required:
            - name
        - properties:
            members:
              type: array
              items:
                type: object
                properties:
                  color:
                    type: string
                    pattern: '^#[0-9A-Fa-f]{6}$'
                    description: Hexadecimal color code
                  weight:
                    type: number
                    minimum: 0
                    maximum: 1
                    description: Optional weight for the color (0-1)
              description: Array of color definitions with optional weights
          required:
            - members
    IdeogramGenerateRequest:
      type: object
      description: Parameters for the Ideogram generation proxy request. Based on Ideogram's API.
      properties:
        image_request:
          type: object
          description: The image generation request parameters.
          properties:
            prompt:
              type: string
              description: Required. The prompt to use to generate the image.
            aspect_ratio:
              type: string
              description: "Optional. The aspect ratio (e.g., 'ASPECT_16_9', 'ASPECT_1_1'). Cannot be used with resolution. Defaults to 'ASPECT_1_1' if unspecified."
            model:
              type: string
              description: "The model used (e.g., 'V_2', 'V_2A_TURBO')"
            magic_prompt_option:
              type: string
              description: "Optional. MagicPrompt usage ('AUTO', 'ON', 'OFF')."
            seed:
              type: integer
              format: int64
              description: "Optional. A number between 0 and 2147483647."
              minimum: 0
              maximum: 2147483647
            style_type:
              type: string
              description: "Optional. Style type ('AUTO', 'GENERAL', 'REALISTIC', 'DESIGN', 'RENDER_3D', 'ANIME'). Only for models V_2 and above."
            negative_prompt:
              type: string
              description: "Optional. Description of what to exclude. Only for V_1, V_1_TURBO, V_2, V_2_TURBO."
            num_images:
              type: integer
              description: "Optional. Number of images to generate (1-8). Defaults to 1."
              minimum: 1
              maximum: 8
              default: 1
            resolution:
              type: string
              description: "Optional. Resolution (e.g., 'RESOLUTION_1024_1024'). Only for model V_2. Cannot be used with aspect_ratio."
            color_palette:
              type: object
              description: "Optional. Color palette object. Only for V_2, V_2_TURBO."
              additionalProperties: true
          required:
            - prompt
            - model
      required:
        - image_request
    IdeogramGenerateResponse:
      type: object
      description: Response from the Ideogram image generation API.
      properties:
        created:
          type: string
          format: date-time
          description: Timestamp when the generation was created.
        data:
          type: array
          description: Array of generated image information.
          items:
            type: object
            properties:
              prompt:
                type: string
                description: The prompt used to generate this image.
              resolution:
                type: string
                description: The resolution of the generated image (e.g., '1024x1024').
              is_image_safe:
                type: boolean
                description: Indicates whether the image is considered safe.
              seed:
                type: integer
                description: The seed value used for this generation.
              url:
                type: string
                description: URL to the generated image.
              style_type:
                type: string
                description: The style type used for generation (e.g., 'REALISTIC', 'ANIME').
    IdeogramV3RemixRequest:
            type: object
            required:
                - prompt
            properties:
                image:
                    type: string
                    format: binary
                prompt:
                    type: string
                image_weight:
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 50
                seed:
                    type: integer
                    minimum: 0
                    maximum: 2147483647
                resolution:
                    type: string
                aspect_ratio:
                    type: string
                rendering_speed:
                    type: string
                    enum: [TURBO, DEFAULT, QUALITY]
                magic_prompt:
                    type: string
                    enum: [AUTO, ON, OFF]
                negative_prompt:
                    type: string
                num_images:
                    type: integer
                    minimum: 1
                    maximum: 8
                color_palette:
                    type: object
                style_codes:
                    type: array
                    items:
                        type: string
                style_type:
                    type: string
                    enum: [AUTO, GENERAL, REALISTIC, DESIGN]
                style_reference_images:
                    type: array
                    items:
                        type: string
                        format: binary
    IdeogramV3IdeogramResponse:
        type: object
        properties:
            created:
                type: string
                format: date-time
            data:
                type: array
                items:
                    type: object
                    properties:
                        prompt:
                            type: string
                        resolution:
                            type: string
                        is_image_safe:
                            type: boolean
                        seed:
                            type: integer
                        url:
                            type: string
                        style_type:
                            type: string
    IdeogramV3ReframeRequest:
        type: object
        required:
            - resolution
        properties:
            image:
                type: string
                format: binary
            resolution:
                type: string
            num_images:
                type: integer
                minimum: 1
                maximum: 8
            seed:
                type: integer
                minimum: 0
                maximum: 2147483647
            rendering_speed:
                type: string
                enum: [TURBO, DEFAULT, QUALITY]
            color_palette:
                type: object
            style_codes:
                type: array
                items:
                    type: string
            style_reference_images:
                type: array
                items:
                    type: string
                    format: binary
    IdeogramV3ReplaceBackgroundRequest:
        type: object
        required:
            - prompt
        properties:
            image:
                type: string
                format: binary
            prompt:
                type: string
            magic_prompt:
                type: string
                enum: [AUTO, ON, OFF]
            num_images:
                type: integer
                minimum: 1
                maximum: 8
            seed:
                type: integer
                minimum: 0
                maximum: 2147483647
            rendering_speed:
                type: string
                enum: [TURBO, DEFAULT, QUALITY]
            color_palette:
                type: object
            style_codes:
                type: array
                items:
                    type: string
            style_reference_images:
                type: array
                items:
                    type: string
                    format: binary
    KlingTaskStatus:
      type: string
      enum: [ submitted, processing, succeed, failed ]
      description: Task Status
    # Kling Video Generation Request Properties
    KlingTextToVideoModelName:
      type: string
      enum: [ kling-v1, kling-v1-6 ]
      default: kling-v1
      description: Model Name
    KlingVideoGenModelName:
      type: string
      enum: [ kling-v1, kling-v1-5, kling-v1-6, kling-v2-master ]
      default: kling-v2-master
      description: Model Name
    KlingVideoGenMode:
      type: string
      enum: [ std, pro ]
      default: std
      description: "Video generation mode. std: Standard Mode, which is cost-effective. pro: Professional Mode, generates videos with longer duration but higher quality output."
    KlingVideoGenAspectRatio:
      type: string
      enum: [ "16:9", "9:16", "1:1" ]
      default: "16:9"
      description: Video aspect ratio
    KlingVideoGenDuration:
      type: string
      enum: [ "5", "10" ]
      default: "5"
      description: Video length in seconds
    KlingVideoGenCfgScale:
      type: number
      format: float
      default: 0.5
      description: Flexibility in video generation. The higher the value, the lower the model's degree of flexibility, and the stronger the relevance to the user's prompt.
      minimum: 0
      maximum: 1
    KlingCameraControl:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/KlingCameraControlType'
        config:
          $ref: '#/components/schemas/KlingCameraConfig'
    KlingCameraControlType:
      type: string
      enum: [ simple, down_back, forward_up, right_turn_forward, left_turn_forward ]
      description: "Predefined camera movements type. simple: Customizable camera movement. down_back: Camera descends and moves backward. forward_up: Camera moves forward and tilts up. right_turn_forward: Rotate right and move forward. left_turn_forward: Rotate left and move forward."
    KlingCameraConfig:
      type: object
      properties:
        horizontal:
          type: number
          minimum: -10
          maximum: 10
          description: Controls camera's movement along horizontal axis (x-axis). Negative indicates left, positive indicates right.
        vertical:
          type: number
          minimum: -10
          maximum: 10
          description: Controls camera's movement along vertical axis (y-axis). Negative indicates downward, positive indicates upward.
        pan:
          type: number
          minimum: -10
          maximum: 10
          description: Controls camera's rotation in vertical plane (x-axis). Negative indicates downward rotation, positive indicates upward rotation.
        tilt:
          type: number
          minimum: -10
          maximum: 10
          description: Controls camera's rotation in horizontal plane (y-axis). Negative indicates left rotation, positive indicates right rotation.
        roll:
          type: number
          minimum: -10
          maximum: 10
          description: Controls camera's rolling amount (z-axis). Negative indicates counterclockwise, positive indicates clockwise.
        zoom:
          type: number
          minimum: -10
          maximum: 10
          description: Controls change in camera's focal length. Negative indicates narrower field of view, positive indicates wider field of view.
    # Kling Video Generation Response Properties
    KlingVideoResult:
      type: object
      properties:
        id:
          type: string
          description: Generated video ID
        url:
          type: string
          format: uri
          description: URL for generated video
        duration:
          type: string
          description: Total video duration
    # Kling Lip Sync Request Properties
    KlingAudioUploadType:
      type: string
      enum: [ file, url ]
      description: "Method of Transmitting Audio Files for Lip-Sync. Required when mode is audio2video."
    KlingLipSyncMode:
      type: string
      enum: [ text2video, audio2video ]
      description: "Video Generation Mode. text2video: Text-to-video generation mode; audio2video: Audio-to-video generation mode"
    KlingLipSyncVoiceLanguage:
      type: string
      enum: [ zh, en ]
      default: en
      description: "The voice language corresponds to the Voice ID."
    # Kling Video Effects Request Properties
    KlingDualCharacterEffectsScene:
      type: string
      enum: [ hug, kiss, heart_gesture ]
      description: Scene Name. Dual-character Effects (hug, kiss, heart_gesture).
    KlingSingleImageEffectsScene:
      type: string
      enum: [ bloombloom, dizzydizzy, fuzzyfuzzy, squish, expansion ]
      description: Scene Name. Single Image Effects (bloombloom, dizzydizzy, fuzzyfuzzy, squish, expansion).
    KlingCharacterEffectModelName:
      type: string
      enum: [ kling-v1, kling-v1-5, kling-v1-6 ]
      default: kling-v1
      description: Model Name. Can be kling-v1, kling-v1-5, or kling-v1-6.
    KlingSingleImageEffectModelName:
      type: string
      enum: [ kling-v1-6 ]
      description: Model Name. Only kling-v1-6 is supported for single image effects.
    KlingSingleImageEffectDuration:
      type: string
      enum: [ "5" ]
      description: Video Length in seconds. Only 5-second videos are supported.
    KlingDualCharacterImages:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: string
        description: Reference Image Group. Must contain exactly 2 images. First image will be positioned on left side, second on right side of the composite. Each image follows the same requirements as single image effects.
    # Kling Image Generation Request Properties
    KlingImageGenAspectRatio:
      type: string
      enum: [ "16:9", "9:16", "1:1", "4:3", "3:4", "3:2", "2:3", "21:9" ]
      default: "16:9"
      description: Aspect ratio of the generated images
    KlingImageGenImageReferenceType:
      type: string
      enum: [ subject, face ]
      description: Image reference type
    KlingImageGenModelName:
      type: string
      enum: [ kling-v1, kling-v1-5, kling-v2 ]
      default: kling-v1
      description: Model Name
    # Kling Image Generation Response Properties
    KlingImageResult:
      type: object
      properties:
        index:
          type: integer
          description: Image Number (0-9)
        url:
          type: string
          format: uri
          description: URL for generated image
    # Kling Virtual Try On Request Properties
    KlingVirtualTryOnModelName:
      type: string
      enum: [ kolors-virtual-try-on-v1, kolors-virtual-try-on-v1-5 ]
      default: kolors-virtual-try-on-v1
      description: Model Name
    # Kling Requests and Responses
    KlingText2VideoRequest:
      type: object
      properties:
        model_name:
          $ref: '#/components/schemas/KlingTextToVideoModelName'
        prompt:
          type: string
          maxLength: 2500
          description: Positive text prompt
        negative_prompt:
          type: string
          maxLength: 2500
          description: Negative text prompt
        cfg_scale:
          $ref: '#/components/schemas/KlingVideoGenCfgScale'
        mode:
          $ref: '#/components/schemas/KlingVideoGenMode'
        camera_control:
          $ref: '#/components/schemas/KlingCameraControl'
        aspect_ratio:
          $ref: '#/components/schemas/KlingVideoGenAspectRatio'
        duration:
          $ref: '#/components/schemas/KlingVideoGenDuration'
        callback_url:
          type: string
          format: uri
          description: The callback notification address
        external_task_id:
          type: string
          description: Customized Task ID
    KlingText2VideoResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
        request_id:
          type: string
          description: Request ID
        data:
          type: object
          properties:
            task_id:
              type: string
              description: Task ID
            task_status:
              $ref: '#/components/schemas/KlingTaskStatus'
            task_info:
              type: object
              properties:
                external_task_id:
                  type: string
            created_at:
              type: integer
              description: Task creation time
            updated_at:
              type: integer
              description: Task update time
            task_result:
              type: object
              properties:
                videos:
                  type: array
                  items:
                    $ref: '#/components/schemas/KlingVideoResult'
    KlingImage2VideoRequest:
      type: object
      properties:
        model_name:
          $ref: '#/components/schemas/KlingVideoGenModelName'
        image:
          type: string
          description: Reference Image - URL or Base64 encoded string, cannot exceed 10MB, resolution not less than 300*300px, aspect ratio between 1:2.5 ~ 2.5:1. Base64 should not include data:image prefix.
        image_tail:
          type: string
          description: Reference Image - End frame control. URL or Base64 encoded string, cannot exceed 10MB, resolution not less than 300*300px. Base64 should not include data:image prefix.
        prompt:
          type: string
          maxLength: 2500
          description: Positive text prompt
        negative_prompt:
          type: string
          maxLength: 2500
          description: Negative text prompt
        cfg_scale:
          $ref: '#/components/schemas/KlingVideoGenCfgScale'
        mode:
          $ref: '#/components/schemas/KlingVideoGenMode'
        static_mask:
          type: string
          description: Static Brush Application Area (Mask image created by users using the motion brush). The aspect ratio must match the input image.
        dynamic_masks:
          type: array
          items:
            type: object
            properties:
              mask:
                type: string
                format: uri
                description: Dynamic Brush Application Area (Mask image created by users using the motion brush). The aspect ratio must match the input image.
              trajectories:
                type: array
                items:
                  type: object
                  properties:
                    x:
                      type: integer
                      description: The horizontal coordinate of trajectory point. Based on bottom-left corner of image as origin (0,0).
                    y:
                      type: integer
                      description: The vertical coordinate of trajectory point. Based on bottom-left corner of image as origin (0,0).
          description: Dynamic Brush Configuration List (up to 6 groups). For 5-second videos, trajectory length must not exceed 77 coordinates.
        camera_control:
          $ref: '#/components/schemas/KlingCameraControl'
        aspect_ratio:
          $ref: '#/components/schemas/KlingVideoGenAspectRatio'
        duration:
          $ref: '#/components/schemas/KlingVideoGenDuration'
        callback_url:
          type: string
          format: uri
          description: The callback notification address. Server will notify when the task status changes.
        external_task_id:
          type: string
          description: Customized Task ID. Must be unique within a single user account.
    KlingImage2VideoResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
        request_id:
          type: string
          description: Request ID
        data:
          type: object
          properties:
            task_id:
              type: string
              description: Task ID
            task_status:
              $ref: '#/components/schemas/KlingTaskStatus'
            task_info:
              type: object
              properties:
                external_task_id:
                  type: string
            created_at:
              type: integer
              description: Task creation time
            updated_at:
              type: integer
              description: Task update time
            task_result:
              type: object
              properties:
                videos:
                  type: array
                  items:
                    $ref: '#/components/schemas/KlingVideoResult'
    KlingVideoExtendRequest:
      type: object
      properties:
        video_id:
          type: string
          description: The ID of the video to be extended. Supports videos generated by text-to-video, image-to-video, and previous video extension operations. Cannot exceed 3 minutes total duration after extension.
        prompt:
          type: string
          maxLength: 2500
          description: Positive text prompt for guiding the video extension
        negative_prompt:
          type: string
          maxLength: 2500
          description: Negative text prompt for elements to avoid in the extended video
        cfg_scale:
          $ref: '#/components/schemas/KlingVideoGenCfgScale'
        callback_url:
          type: string
          format: uri
          description: The callback notification address. Server will notify when the task status changes.
    KlingVideoExtendResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
        request_id:
          type: string
          description: Request ID
        data:
          type: object
          properties:
            task_id:
              type: string
              description: Task ID
            task_status:
              $ref: '#/components/schemas/KlingTaskStatus'
            task_info:
              type: object
              properties:
                external_task_id:
                  type: string
            created_at:
              type: integer
              description: Task creation time
            updated_at:
              type: integer
              description: Task update time
            task_result:
              type: object
              properties:
                videos:
                  type: array
                  items:
                    $ref: '#/components/schemas/KlingVideoResult'
    KlingLipSyncInputObject:
      type: object
      required: [ mode ]
      properties:
        video_id:
          type: string
          description: "The ID of the video generated by Kling AI. Only supports 5-second and 10-second videos generated within the last 30 days."
        video_url:
          type: string
          description: "Get link for uploaded video. Video files support .mp4/.mov, file size does not exceed 100MB, video length between 2-10s."
        mode:
          $ref: '#/components/schemas/KlingLipSyncMode'
        text:
          type: string
          description: "Text Content for Lip-Sync Video Generation. Required when mode is text2video. Maximum length is 120 characters."
        voice_id:
          type: string
          description: "Voice ID. Required when mode is text2video. The system offers a variety of voice options to choose from."
        voice_language:
          $ref: '#/components/schemas/KlingLipSyncVoiceLanguage'
        voice_speed:
          type: number
          minimum: 0.8
          maximum: 2.0
          default: 1.0
          description: "Speech Rate. Valid range: 0.8~2.0, accurate to one decimal place."
        audio_type:
          $ref: '#/components/schemas/KlingAudioUploadType'
        audio_file:
          type: string
          description: "Local Path of Audio File. Supported formats: .mp3/.wav/.m4a/.aac, maximum file size of 5MB. Base64 code."
        audio_url:
          type: string
          description: "Audio File Download URL. Supported formats: .mp3/.wav/.m4a/.aac, maximum file size of 5MB."
    KlingLipSyncRequest:
      type: object
      required: [ input ]
      properties:
        input:
          $ref: '#/components/schemas/KlingLipSyncInputObject'
        callback_url:
          type: string
          format: uri
          description: "The callback notification address. Server will notify when the task status changes."
    KlingLipSyncResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
        request_id:
          type: string
          description: Request ID
        data:
          type: object
          properties:
            task_id:
              type: string
              description: Task ID
            task_status:
              $ref: '#/components/schemas/KlingTaskStatus'
            task_info:
              type: object
              properties:
                external_task_id:
                  type: string
            created_at:
              type: integer
              description: Task creation time
            updated_at:
              type: integer
              description: Task update time
            task_result:
              type: object
              properties:
                videos:
                  type: array
                  items:
                    $ref: '#/components/schemas/KlingVideoResult'
    KlingVideoEffectsRequest:
      type: object
      required: [ effect_scene, input ]
      properties:
        effect_scene:
          oneOf:
            - $ref: '#/components/schemas/KlingDualCharacterEffectsScene'
            - $ref: '#/components/schemas/KlingSingleImageEffectsScene'
        input:
          $ref: '#/components/schemas/KlingVideoEffectsInput'
        callback_url:
          type: string
          format: uri
          description: The callback notification address for the result of this task.
        external_task_id:
          type: string
          description: Customized Task ID. Must be unique within a single user account.
    KlingVideoEffectsInput:
      oneOf:
        - $ref: '#/components/schemas/KlingSingleImageEffectInput'
        - $ref: '#/components/schemas/KlingDualCharacterEffectInput'
    KlingSingleImageEffectInput:
      type: object
      required: [ model_name, image, duration ]
      properties:
        model_name:
          $ref: '#/components/schemas/KlingSingleImageEffectModelName'
        image:
          type: string
          description: Reference Image. URL or Base64 encoded string (without data:image prefix). File size cannot exceed 10MB, resolution not less than 300*300px, aspect ratio between 1:2.5 ~ 2.5:1.
        duration:
          $ref: '#/components/schemas/KlingSingleImageEffectDuration'
    KlingDualCharacterEffectInput:
      type: object
      required: [ images, duration ]
      properties:
        model_name:
          $ref: '#/components/schemas/KlingCharacterEffectModelName'
        mode:
          $ref: '#/components/schemas/KlingVideoGenMode'
        images:
          $ref: '#/components/schemas/KlingDualCharacterImages'
        duration:
          $ref: '#/components/schemas/KlingVideoGenDuration'
    KlingVideoEffectsResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
        request_id:
          type: string
          description: Request ID
        data:
          type: object
          properties:
            task_id:
              type: string
              description: Task ID
            task_status:
              $ref: '#/components/schemas/KlingTaskStatus'
            task_info:
              type: object
              properties:
                external_task_id:
                  type: string
            created_at:
              type: integer
              description: Task creation time
            updated_at:
              type: integer
              description: Task update time
            task_result:
              type: object
              properties:
                videos:
                  type: array
                  items:
                    $ref: '#/components/schemas/KlingVideoResult'
    KlingImageGenerationsRequest:
      type: object
      properties:
        model_name:
          $ref: '#/components/schemas/KlingImageGenModelName'
        prompt:
          type: string
          maxLength: 500
          description: Positive text prompt
        negative_prompt:
          type: string
          maxLength: 200
          description: Negative text prompt
        image:
          type: string
          description: Reference Image - Base64 encoded string or image URL
        image_reference:
          $ref: '#/components/schemas/KlingImageGenImageReferenceType'
        image_fidelity:
          type: number
          minimum: 0
          maximum: 1
          default: 0.5
          description: Reference intensity for user-uploaded images
        human_fidelity:
          type: number
          minimum: 0
          maximum: 1
          default: 0.45
          description: Subject reference similarity
        n:
          type: integer
          minimum: 1
          maximum: 9
          default: 1
          description: Number of generated images
        aspect_ratio:
          $ref: '#/components/schemas/KlingImageGenAspectRatio'
        callback_url:
          type: string
          format: uri
          description: The callback notification address
      required:
        - prompt
    KlingImageGenerationsResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
        request_id:
          type: string
          description: Request ID
        data:
          type: object
          properties:
            task_id:
              type: string
              description: Task ID
            task_status:
              $ref: '#/components/schemas/KlingTaskStatus'
            task_status_msg:
              type: string
              description: Task status information
            created_at:
              type: integer
              description: Task creation time
            updated_at:
              type: integer
              description: Task update time
            task_result:
              type: object
              properties:
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/KlingImageResult'
    KlingVirtualTryOnRequest:
      type: object
      properties:
        model_name:
          $ref: '#/components/schemas/KlingVirtualTryOnModelName'
        human_image:
          type: string
          description: Reference human image - Base64 encoded string or image URL
        cloth_image:
          type: string
          description: Reference clothing image - Base64 encoded string or image URL
        callback_url:
          type: string
          format: uri
          description: The callback notification address
      required:
        - human_image
    KlingVirtualTryOnResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        message:
          type: string
          description: Error message
        request_id:
          type: string
          description: Request ID
        data:
          type: object
          properties:
            task_id:
              type: string
              description: Task ID
            task_status:
              $ref: '#/components/schemas/KlingTaskStatus'
            task_status_msg:
              type: string
              description: Task status information
            created_at:
              type: integer
              description: Task creation time
            updated_at:
              type: integer
              description: Task update time
            task_result:
              type: object
              properties:
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/KlingImageResult'
    KlingResourcePackageResponse:
      type: object
      properties:
        code:
          type: integer
          description: Error code; 0 indicates success
        message:
          type: string
          description: Error information
        request_id:
          type: string
          description: Request ID, generated by the system, used to track requests and troubleshoot problems
        data:
          type: object
          properties:
            code:
              type: integer
              description: Error code; 0 indicates success
            msg:
              type: string
              description: Error information
            resource_pack_subscribe_infos:
              type: array
              description: Resource package list
              items:
                type: object
                properties:
                  resource_pack_name:
                    type: string
                    description: Resource package name
                  resource_pack_id:
                    type: string
                    description: Resource package ID
                  resource_pack_type:
                    type: string
                    description: Resource package type (decreasing_total=decreasing total, constant_period=constant periodicity)
                    enum: [ decreasing_total, constant_period ]
                  total_quantity:
                    type: number
                    format: float
                    description: Total quantity
                  remaining_quantity:
                    type: number
                    format: float
                    description: Remaining quantity (updated with a 12-hour delay)
                  purchase_time:
                    type: integer
                    format: int64
                    description: Purchase time, Unix timestamp in ms
                  effective_time:
                    type: integer
                    format: int64
                    description: Effective time, Unix timestamp in ms
                  invalid_time:
                    type: integer
                    format: int64
                    description: Expiration time, Unix timestamp in ms
                  status:
                    type: string
                    description: Resource Package Status
                    enum: [ toBeOnline, online, expired, runOut ]
    StripeEvent:
      type: object
      required: [ id, object, type, data ]
      properties:
        id:
          type: string
        object:
          type: string
          enum: [ event ]
        api_version:
          type: string
        created:
          type: integer
        data:
          type: object
          properties:
            object:
              $ref: '#/components/schemas/StripePaymentIntent'
        livemode:
          type: boolean
        pending_webhooks:
          type: integer
        request:
          $ref: '#/components/schemas/StripeRequestInfo'
        type:
          type: string
          enum: [ payment_intent.succeeded ]

    StripeRequestInfo:
      type: object
      properties:
        id:
          type: string
          nullable: true
        idempotency_key:
          type: string
          nullable: true

    StripePaymentIntent:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum: [ payment_intent ]
        amount:
          type: integer
          x-go-type: int64
        amount_capturable:
          type: integer
          x-go-type: int64
        amount_details:
          $ref: '#/components/schemas/StripeAmountDetails'
        amount_received:
          type: integer
          x-go-type: int64
        application:
          type: string
          nullable: true
        application_fee_amount:
          type: integer
          nullable: true
        automatic_payment_methods:
          nullable: true
        canceled_at:
          type: integer
          nullable: true
        cancellation_reason:
          type: string
          nullable: true
        capture_method:
          type: string
        charges:
          $ref: '#/components/schemas/StripeChargeList'
        client_secret:
          type: string
        confirmation_method:
          type: string
        created:
          type: integer
        currency:
          type: string
        customer:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        invoice:
          type: string
          nullable: true
        last_payment_error:
          nullable: true
        latest_charge:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
        next_action:
          nullable: true
        on_behalf_of:
          nullable: true
        payment_method:
          type: string
        payment_method_configuration_details:
          nullable: true
        payment_method_options:
          $ref: '#/components/schemas/StripePaymentMethodOptions'
        payment_method_types:
          type: array
          items:
            type: string
        processing:
          nullable: true
        receipt_email:
          type: string
          nullable: true
        review:
          nullable: true
        setup_future_usage:
          nullable: true
        shipping:
          $ref: '#/components/schemas/StripeShipping'
        source:
          nullable: true
        statement_descriptor:
          nullable: true
        statement_descriptor_suffix:
          nullable: true
        status:
          type: string
        transfer_data:
          nullable: true
        transfer_group:
          nullable: true

    StripeAmountDetails:
      type: object
      properties:
        tip:
          type: object

    StripeChargeList:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/StripeCharge'
        has_more:
          type: boolean
        total_count:
          type: integer
        url:
          type: string

    StripeCharge:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum: [ charge ]
        amount:
          type: integer
        amount_captured:
          type: integer
        amount_refunded:
          type: integer
        application:
          type: string
          nullable: true
        application_fee:
          type: string
          nullable: true
        application_fee_amount:
          type: integer
          nullable: true
        balance_transaction:
          type: string
          nullable: true
        billing_details:
          $ref: '#/components/schemas/StripeBillingDetails'
        calculated_statement_descriptor:
          type: string
        captured:
          type: boolean
        created:
          type: integer
        currency:
          type: string
        customer:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        destination:
          nullable: true
        dispute:
          nullable: true
        disputed:
          type: boolean
        failure_balance_transaction:
          nullable: true
        failure_code:
          nullable: true
        failure_message:
          nullable: true
        fraud_details:
          type: object
        invoice:
          nullable: true
        livemode:
          type: boolean
        metadata:
          type: object
        on_behalf_of:
          nullable: true
        order:
          nullable: true
        outcome:
          $ref: '#/components/schemas/StripeOutcome'
        paid:
          type: boolean
        payment_intent:
          type: string
        payment_method:
          type: string
        payment_method_details:
          $ref: '#/components/schemas/StripePaymentMethodDetails'
        radar_options:
          type: object
        receipt_email:
          type: string
          nullable: true
        receipt_number:
          type: string
          nullable: true
        receipt_url:
          type: string
        refunded:
          type: boolean
        refunds:
          $ref: '#/components/schemas/StripeRefundList'
        review:
          nullable: true
        shipping:
          $ref: '#/components/schemas/StripeShipping'
        source:
          nullable: true
        source_transfer:
          nullable: true
        statement_descriptor:
          nullable: true
        statement_descriptor_suffix:
          nullable: true
        status:
          type: string
        transfer_data:
          nullable: true
        transfer_group:
          nullable: true

    StripeBillingDetails:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/StripeAddress'
        email:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        tax_id:
          nullable: true

    StripeAddress:
      type: object
      properties:
        city:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        line1:
          type: string
          nullable: true
        line2:
          type: string
          nullable: true
        postal_code:
          type: string
          nullable: true
        state:
          type: string
          nullable: true

    StripeOutcome:
      type: object
      properties:
        advice_code:
          nullable: true
        network_advice_code:
          nullable: true
        network_decline_code:
          nullable: true
        network_status:
          type: string
        reason:
          nullable: true
        risk_level:
          type: string
        risk_score:
          type: integer
        seller_message:
          type: string
        type:
          type: string

    StripePaymentMethodDetails:
      type: object
      properties:
        card:
          $ref: '#/components/schemas/StripeCardDetails'
        type:
          type: string

    StripeCardDetails:
      type: object
      properties:
        amount_authorized:
          type: integer
        authorization_code:
          nullable: true
        brand:
          type: string
        checks:
          type: object
          properties:
            address_line1_check:
              nullable: true
            address_postal_code_check:
              nullable: true
            cvc_check:
              type: string
        country:
          type: string
        exp_month:
          type: integer
        exp_year:
          type: integer
        extended_authorization:
          type: object
          properties:
            status:
              type: string
        fingerprint:
          type: string
        funding:
          type: string
        incremental_authorization:
          type: object
          properties:
            status:
              type: string
        installments:
          nullable: true
        last4:
          type: string
        mandate:
          nullable: true
        multicapture:
          type: object
          properties:
            status:
              type: string
        network:
          type: string
        network_token:
          type: object
          properties:
            used:
              type: boolean
        network_transaction_id:
          type: string
        overcapture:
          type: object
          properties:
            maximum_amount_capturable:
              type: integer
            status:
              type: string
        regulated_status:
          type: string
        three_d_secure:
          nullable: true
        wallet:
          nullable: true

    StripeRefundList:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            type: object
        has_more:
          type: boolean
        total_count:
          type: integer
        url:
          type: string

    StripePaymentMethodOptions:
      type: object
      properties:
        card:
          type: object
          properties:
            installments:
              nullable: true
            mandate_options:
              nullable: true
            network:
              nullable: true
            request_three_d_secure:
              type: string

    StripeShipping:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/StripeAddress'
        carrier:
          type: string
          nullable: true
        name:
          type: string
        phone:
          type: string
          nullable: true
        tracking_number:
          type: string
          nullable: true
    MinimaxVideoGenerationRequest:
      type: object
      description: Parameters for the Minimax video generation proxy request.
      properties:
        model:
          type: string
          description: "Required. ID of model. Options: T2V-01-Director, I2V-01-Director, S2V-01, I2V-01, I2V-01-live, T2V-01"
          enum:
            - T2V-01-Director
            - I2V-01-Director
            - S2V-01
            - I2V-01
            - I2V-01-live
            - T2V-01
        prompt:
          type: string
          description: "Description of the video. Should be less than 2000 characters. Supports camera movement instructions in [brackets]."
          maxLength: 2000
        prompt_optimizer:
          type: boolean
          description: "If true (default), the model will automatically optimize the prompt. Set to false for more precise control."
          default: true
        first_frame_image:
          type: string
          description: "URL or base64 encoding of the first frame image. Required when model is I2V-01, I2V-01-Director, or I2V-01-live."
        subject_reference:
          type: array
          description: "Only available when model is S2V-01. The model will generate a video based on the subject uploaded through this parameter."
          items:
            type: object
            properties:
              image:
                type: string
                description: "URL or base64 encoding of the subject reference image."
              mask:
                type: string
                description: "URL or base64 encoding of the mask for the subject reference image."
        callback_url:
          type: string
          description: "Optional. URL to receive real-time status updates about the video generation task."
      required:
        - model

    MinimaxBaseResponse:
      type: object
      description: Common response structure used by Minimax APIs
      properties:
        status_code:
          type: integer
          description: "Status code. 0 indicates success, other values indicate errors."
        status_msg:
          type: string
          description: "Specific error details or success message."
      required:
        - status_code
        - status_msg
    
    MinimaxVideoGenerationResponse:
      type: object
      description: Response from the Minimax video generation API.
      properties:
        task_id:
          type: string
          description: "The task ID for the asynchronous video generation task."
        base_resp:
          $ref: "#/components/schemas/MinimaxBaseResponse"
      required:
        - task_id
        - base_resp
    MinimaxFileRetrieveResponse:
      type: object
      description: Response from retrieving a Minimax file download URL.
      properties:
        file:
          type: object
          properties:
            file_id:
              type: integer
              description: Unique identifier for the file
            bytes:
              type: integer
              description: File size in bytes
            created_at:
              type: integer
              description: Unix timestamp when the file was created, in seconds
            filename:
              type: string
              description: The name of the file
            purpose:
              type: string
              description: The purpose of using the file
            download_url:
              type: string
              description: The URL to download the video
        base_resp:
          $ref: "#/components/schemas/MinimaxBaseResponse"
      required:
        - file
        - base_resp
    MinimaxTaskResultResponse:
      type: object
      description: Response from querying a Minimax video generation task status.
      properties:
        task_id:
          type: string
          description: "The task ID being queried."
        status:
          type: string
          description: "Task status: 'Queueing' (in queue), 'Preparing' (task is preparing), 'Processing' (generating), 'Success' (task completed successfully), or 'Fail' (task failed)."
          enum:
            - Queueing
            - Preparing
            - Processing
            - Success
            - Fail
        file_id:
          type: string
          description: "After the task status changes to Success, this field returns the file ID corresponding to the generated video."
        base_resp:
          $ref: "#/components/schemas/MinimaxBaseResponse"
      required:
        - task_id
        - status
        - base_resp
    BFLFluxKontextProGenerateRequest:
      type: object
      required:
        - prompt
        - input_image
      properties:
        prompt:
          type: string
          description: The text prompt describing what to edit on the image
        input_image:
          type: string
          description: Base64 encoded image to be edited
        steps:
          type: integer
          description: Number of inference steps
          minimum: 1
          maximum: 50
          default: 50
        guidance:
          type: number
          description: The guidance scale for generation
          minimum: 1.0
          maximum: 20.0
          default: 3.0
    BFLFluxKontextProGenerateResponse:
      type: object
      required:
        - id
        - polling_url
      properties:
        id:
          type: string
          description: Job ID for tracking
        polling_url:
          type: string
          description: URL to poll for results
    BFLFluxKontextMaxGenerateRequest:
      type: object
      required:
        - prompt
        - input_image
      properties:
        prompt:
          type: string
          description: The text prompt describing what to edit on the image
        input_image:
          type: string
          description: Base64 encoded image to be edited
        steps:
          type: integer
          description: Number of inference steps
          minimum: 1
          maximum: 50
          default: 50
        guidance:
          type: number
          description: The guidance scale for generation
          minimum: 1.0
          maximum: 20.0
          default: 3.0
    BFLFluxKontextMaxGenerateResponse:
      type: object
      required:
        - id
        - polling_url
      properties:
        id:
          type: string
          description: Job ID for tracking
        polling_url:
          type: string
          description: URL to poll for results
    BFLFluxPro1_1GenerateRequest:
      type: object
      required:
        - prompt
        - width
        - height
      properties:
        prompt:
          type: string
          description: The main text prompt for image generation
        image_prompt:
          type: string
          description: Optional image prompt
        width:
          type: integer
          description: Width of the generated image
        height:
          type: integer
          description: Height of the generated image
        prompt_upsampling:
          type: boolean
          description: Whether to use prompt upsampling
        seed:
          type: integer
          description: Random seed for reproducibility
        safety_tolerance:
          type: integer
          description: Safety tolerance level
        output_format:
          type: string
          enum: [jpeg, png]
          description: Output image format
        webhook_url:
          type: string
          description: Optional webhook URL for async processing
        webhook_secret:
          type: string
          description: Optional webhook secret for async processing

    BFLFluxPro1_1GenerateResponse:
      type: object
      required:
        - id
        - polling_url
      properties:
        id:
          type: string
          description: Job ID for tracking
        polling_url:
          type: string
          description: URL to poll for results
    BFLFluxProGenerateRequest:
      type: object
      description: Request body for the BFL Flux Pro 1.1 Ultra image generation API.
      properties:
        prompt:
          type: string
          description: The text prompt for image generation.
        negative_prompt:
          type: string
          description: The negative prompt for image generation.
        width:
          type: integer
          description: The width of the image to generate.
          minimum: 64
          maximum: 2048
        height:
          type: integer
          description: The height of the image to generate.
          minimum: 64
          maximum: 2048
        num_inference_steps:
          type: integer
          description: The number of inference steps.
          minimum: 1
          maximum: 100
        guidance_scale:
          type: number
          description: The guidance scale for generation.
          minimum: 1.0
          maximum: 20.0
        seed:
          type: integer
          description: The seed value for reproducibility.
        num_images:
          type: integer
          description: The number of images to generate.
          minimum: 1
          maximum: 4
      required:
        - prompt
        - width
        - height

    BFLFluxProGenerateResponse:
      type: object
      description: Response from the BFL Flux Pro 1.1 Ultra image generation API.
      properties:
        id:
          type: string
          description: The unique identifier for the generation task.
        polling_url:
          type: string
          description: URL to poll for the generation result.
      required:
        - id
        - polling_url
    BFLFluxProStatusResponse:
      type: object
      description: Response from the BFL Flux Pro 1.1 Ultra status check API.
      properties:
        id:
          type: string
          description: The unique identifier for the generation task.
        status:
          $ref: '#/components/schemas/BFLStatus'
          description: The status of the task.
        result:
          type: object
          description: The result of the task (null if not completed).
          nullable: true
        progress:
          type: number
          format: float
          description: The progress of the task (0.0 to 1.0).
          minimum: 0.0
          maximum: 1.0
        details:
          type: object
          description: Additional details about the task (null if not available).
          nullable: true
      required:
        - id
        - status
        - progress
    BFLStatus:
      type: string
      description: Possible statuses for a BFL Flux Pro generation task.
      enum:
        - Task not found
        - Pending
        - Request Moderated
        - Content Moderated
        - Ready
        - Error
      example: Ready
    BFLFluxProFillInputs:
        properties:
            image:
                type: string
                title: Image
                description: >-
                    A Base64-encoded string representing the image you wish to modify. Can contain alpha mask if desired.
            mask:
                anyOf:
                    - type: string
                title: Mask
                description: >-
                    A Base64-encoded string representing a mask for the areas you want to modify in the image. The mask should be the same dimensions as the image and in black and white. Black areas (0%) indicate no modification, while white areas (100%) specify areas for inpainting. Optional if you provide an alpha mask in the original image. Validation: The endpoint verifies that the dimensions of the mask match the original image.
            prompt:
                anyOf:
                    - type: string
                title: Prompt
                description: >-
                    The description of the changes you want to make. This text guides the inpainting process, allowing you to specify features, styles, or modifications for the masked area.
                default: ""
                example: ein fantastisches bild
            steps:
                anyOf:
                    - type: integer
                      maximum: 50
                      minimum: 15
                title: Steps
                description: Number of steps for the image generation process
                default: 50
                example: 50
            prompt_upsampling:
                anyOf:
                    - type: boolean
                title: Prompt Upsampling
                description: >-
                    Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation
                default: false
            seed:
                anyOf:
                    - type: integer
                title: Seed
                description: Optional seed for reproducibility
            guidance:
                anyOf:
                    - type: number
                      maximum: 100
                      minimum: 1.5
                title: Guidance
                description: Guidance strength for the image generation process
                default: 60
            output_format:
                anyOf:
                    - $ref: "#/components/schemas/BFLOutputFormat"
                description: Output format for the generated image. Can be 'jpeg' or 'png'.
                default: jpeg
            safety_tolerance:
                type: integer
                maximum: 6
                minimum: 0
                title: Safety Tolerance
                description: >-
                    Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict.
                default: 2
                example: 2
            webhook_url:
                anyOf:
                    - type: string
                      maxLength: 2083
                      minLength: 1
                      format: uri
                title: Webhook Url
                description: URL to receive webhook notifications
            webhook_secret:
                anyOf:
                    - type: string
                title: Webhook Secret
                description: Optional secret for webhook signature verification
        type: object
        required:
            - image
        title: FluxProFillInputs
    BFLAsyncResponse:
        properties:
            id:
                type: string
                title: Id
            polling_url:
                type: string
                title: Polling Url
        type: object
        required:
            - id
            - polling_url
        title: AsyncResponse
    BFLAsyncWebhookResponse:
        properties:
            id:
                type: string
                title: Id
            status:
                type: string
                title: Status
            webhook_url:
                type: string
                title: Webhook Url
        type: object
        required:
            - id
            - status
            - webhook_url
        title: AsyncWebhookResponse
    BFLHTTPValidationError:
        properties:
            detail:
                items:
                    $ref: "#/components/schemas/BFLValidationError"
                type: array
                title: Detail
        type: object
        title: HTTPValidationError
    BFLFluxProExpandInputs:
        properties:
            image:
                type: string
                title: Image
                description: A Base64-encoded string representing the image you wish to expand.
            top:
                anyOf:
                    - type: integer
                      maximum: 2048
                      minimum: 0
                title: Top
                description: Number of pixels to expand at the top of the image
                default: 0
            bottom:
                anyOf:
                    - type: integer
                      maximum: 2048
                      minimum: 0
                title: Bottom
                description: Number of pixels to expand at the bottom of the image
                default: 0
            left:
                anyOf:
                    - type: integer
                      maximum: 2048
                      minimum: 0
                title: Left
                description: Number of pixels to expand on the left side of the image
                default: 0
            right:
                anyOf:
                    - type: integer
                      maximum: 2048
                      minimum: 0
                title: Right
                description: Number of pixels to expand on the right side of the image
                default: 0
            prompt:
                anyOf:
                    - type: string
                title: Prompt
                description: >-
                    The description of the changes you want to make. This text guides the expansion process, allowing you to specify features, styles, or modifications for the expanded areas.
                default: ""
                example: ein fantastisches bild
            steps:
                anyOf:
                    - type: integer
                      maximum: 50
                      minimum: 15
                title: Steps
                description: Number of steps for the image generation process
                default: 50
                example: 50
            prompt_upsampling:
                anyOf:
                    - type: boolean
                title: Prompt Upsampling
                description: >-
                    Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation
                default: false
            seed:
                anyOf:
                    - type: integer
                title: Seed
                description: Optional seed for reproducibility
            guidance:
                anyOf:
                    - type: number
                      maximum: 100
                      minimum: 1.5
                title: Guidance
                description: Guidance strength for the image generation process
                default: 60
            output_format:
                anyOf:
                    - $ref: "#/components/schemas/BFLOutputFormat"
                description: Output format for the generated image. Can be 'jpeg' or 'png'.
                default: jpeg
            safety_tolerance:
                type: integer
                maximum: 6
                minimum: 0
                title: Safety Tolerance
                description: >-
                    Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict.
                default: 2
                example: 2
            webhook_url:
                anyOf:
                    - type: string
                      maxLength: 2083
                      minLength: 1
                      format: uri
                title: Webhook Url
                description: URL to receive webhook notifications
            webhook_secret:
                anyOf:
                    - type: string
                title: Webhook Secret
                description: Optional secret for webhook signature verification
        type: object
        required:
            - image
        title: FluxProExpandInputs
    BFLCannyInputs:
        properties:
            prompt:
                type: string
                title: Prompt
                description: Text prompt for image generation
                example: ein fantastisches bild
            control_image:
                anyOf:
                    - type: string
                title: Control Image
                description: >-
                    Base64 encoded image to use as control input if no preprocessed image is provided
            preprocessed_image:
                anyOf:
                    - type: string
                title: Preprocessed Image
                description: >-
                    Optional pre-processed image that will bypass the control preprocessing step
            canny_low_threshold:
                anyOf:
                    - type: integer
                      maximum: 500
                      minimum: 0
                title: Canny Low Threshold
                description: Low threshold for Canny edge detection
                default: 50
            canny_high_threshold:
                anyOf:
                    - type: integer
                      maximum: 500
                      minimum: 0
                title: Canny High Threshold
                description: High threshold for Canny edge detection
                default: 200
            prompt_upsampling:
                anyOf:
                    - type: boolean
                title: Prompt Upsampling
                description: Whether to perform upsampling on the prompt
                default: false
            seed:
                anyOf:
                    - type: integer
                title: Seed
                description: Optional seed for reproducibility
                example: 42
            steps:
                anyOf:
                    - type: integer
                      maximum: 50
                      minimum: 15
                title: Steps
                description: Number of steps for the image generation process
                default: 50
            output_format:
                anyOf:
                    - $ref: "#/components/schemas/BFLOutputFormat"
                description: Output format for the generated image. Can be 'jpeg' or 'png'.
                default: jpeg
            guidance:
                anyOf:
                    - type: number
                      maximum: 100
                      minimum: 1
                title: Guidance
                description: Guidance strength for the image generation process
                default: 30
            safety_tolerance:
                type: integer
                maximum: 6
                minimum: 0
                title: Safety Tolerance
                description: >-
                    Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict.
                default: 2
            webhook_url:
                anyOf:
                    - type: string
                      maxLength: 2083
                      minLength: 1
                      format: uri
                title: Webhook Url
                description: URL to receive webhook notifications
            webhook_secret:
                anyOf:
                    - type: string
                title: Webhook Secret
                description: Optional secret for webhook signature verification
        type: object
        required:
            - prompt
        title: CannyInputs
    BFLDepthInputs:
        properties:
            prompt:
                type: string
                title: Prompt
                description: Text prompt for image generation
                example: ein fantastisches bild
            control_image:
                anyOf:
                    - type: string
                title: Control Image
                description: Base64 encoded image to use as control input
            preprocessed_image:
                anyOf:
                    - type: string
                title: Preprocessed Image
                description: >-
                    Optional pre-processed image that will bypass the control preprocessing step
            prompt_upsampling:
                anyOf:
                    - type: boolean
                title: Prompt Upsampling
                description: Whether to perform upsampling on the prompt
                default: false
            seed:
                anyOf:
                    - type: integer
                title: Seed
                description: Optional seed for reproducibility
                example: 42
            steps:
                anyOf:
                    - type: integer
                      maximum: 50
                      minimum: 15
                title: Steps
                description: Number of steps for the image generation process
                default: 50
            output_format:
                anyOf:
                    - $ref: "#/components/schemas/BFLOutputFormat"
                description: Output format for the generated image. Can be 'jpeg' or 'png'.
                default: jpeg
            guidance:
                anyOf:
                    - type: number
                      maximum: 100
                      minimum: 1
                title: Guidance
                description: Guidance strength for the image generation process
                default: 15
            safety_tolerance:
                type: integer
                maximum: 6
                minimum: 0
                title: Safety Tolerance
                description: >-
                    Tolerance level for input and output moderation. Between 0 and 6, 0 being most strict, 6 being least strict.
                default: 2
            webhook_url:
                anyOf:
                    - type: string
                      maxLength: 2083
                      minLength: 1
                      format: uri
                title: Webhook Url
                description: URL to receive webhook notifications
            webhook_secret:
                anyOf:
                    - type: string
                title: Webhook Secret
                description: Optional secret for webhook signature verification
        type: object
        required:
            - prompt
        title: DepthInputs
    BFLOutputFormat:
        type: string
        enum:
            - jpeg
            - png
        title: OutputFormat
    BFLValidationError:
        properties:
            loc:
                items:
                    anyOf:
                        - type: string
                        - type: integer
                type: array
                title: Location
            msg:
                type: string
                title: Message
            type:
                type: string
                title: Error Type
        type: object
        required:
            - loc
            - msg
            - type
        title: ValidationError

    RecraftImageGenerationRequest:
      type: object
      description: Parameters for the Recraft image generation proxy request.
      properties:
        prompt:
          type: string
          description: The text prompt describing the image to generate
        model:
          type: string
          description: The model to use for generation (e.g., "recraftv3")
        style:
          type: string
          description: The style to apply to the generated image (e.g., "digital_illustration")
        style_id:
          type: string
          description: The style ID to apply to the generated image (e.g., "123e4567-e89b-12d3-a456-426614174000"). If style_id is provided, style should not be provided.
        size:
          type: string
          description: The size of the generated image (e.g., "1024x1024")
        controls:
          type: object
          description: The controls for the generated image
          properties:
            artistic_level:
              type: integer
              nullable: true
              description: Defines artistic tone of your image. At a simple level, the person looks straight at the camera in a static and clean style. Dynamic and eccentric levels introduce movement and creativity.
              minimum: 0
              maximum: 5
            colors:
              type: array
              description: An array of preferable colors
              items:
                $ref: '#/components/schemas/RGBColor'
            background_color:
              $ref: '#/components/schemas/RGBColor'
              description: Use given color as a desired background color
            no_text:
              type: boolean
              description: Do not embed text layouts

        n:
          type: integer
          description: The number of images to generate
          minimum: 1
          maximum: 4
      required:
        - prompt
        - model
        - size
        - n

    RecraftImageGenerationResponse:
      type: object
      description: Response from the Recraft image generation API.
      properties:
        created:
          type: integer
          description: Unix timestamp when the generation was created
        credits:
          type: integer
          description: Number of credits used for the generation
        data:
          type: array
          description: Array of generated image information
          items:
            type: object
            properties:
              image_id:
                type: string
                description: Unique identifier for the generated image
              url:
                type: string
                description: URL to access the generated image
      required:
        - created
        - credits
        - data
    RecraftImageFeatures:
      properties:
        nsfw_score:
          type: number
      type: object
    RecraftTextLayoutItem:
      properties:
        bbox:
          items:
            items:
              type: number
              x-go-type: float32
            type: array
          type: array
        text:
          type: string
      required:
        - text
        - bbox
      type: object
    RecraftImageColor:
      properties:
        rgb:
          items:
            type: integer
          type: array
        std:
          items:
            type: number
          type: array
        weight:
          type: number
      type: object
    RecraftImageStyle:
      enum:
        - digital_illustration
        - icon
        - realistic_image
        - vector_illustration
      type: string
    RecraftImageSubStyle:
      enum:
        - 2d_art_poster
        - 3d
        - 80s
        - glow
        - grain
        - hand_drawn
        - infantile_sketch
        - kawaii
        - pixel_art
        - psychedelic
        - seamless
        - voxel
        - watercolor
        - broken_line
        - colored_outline
        - colored_shapes
        - colored_shapes_gradient
        - doodle_fill
        - doodle_offset_fill
        - offset_fill
        - outline
        - outline_gradient
        - uneven_fill
        - 70s
        - cartoon
        - doodle_line_art
        - engraving
        - flat_2
        - kawaii
        - line_art
        - linocut
        - seamless
        - b_and_w
        - enterprise
        - hard_flash
        - hdr
        - motion_blur
        - natural_light
        - studio_portrait
        - line_circuit
        - 2d_art_poster_2
        - engraving_color
        - flat_air_art
        - hand_drawn_outline
        - handmade_3d
        - stickers_drawings
        - plastic
        - pictogram
      type: string
    RecraftTransformModel:
      enum:
        - refm1
        - recraft20b
        - recraftv2
        - recraftv3
        - flux1_1pro
        - flux1dev
        - imagen3
        - hidream_i1_dev
      type: string
    RecraftImageFormat:
      enum:
        - webp
        - png
      type: string
    RecraftResponseFormat:
      enum:
        - url
        - b64_json
      type: string
    RecraftImage:
      properties:
        b64_json:
          type: string
        features:
          $ref: '#/components/schemas/RecraftImageFeatures'
        image_id:
          format: uuid
          type: string
        revised_prompt:
          type: string
        url:
          type: string
      required:
        - image_id
      type: object
    RecraftUserControls:
      properties:
        artistic_level:
          type: integer
        background_color:
          $ref: '#/components/schemas/RecraftImageColor'
        colors:
          items:
            $ref: '#/components/schemas/RecraftImageColor'
          type: array
        no_text:
          type: boolean
      type: object
    RecraftTextLayout:
      items:
        $ref: '#/components/schemas/RecraftTextLayoutItem'
      type: array
    RecraftProcessImageRequest:
      properties:
        image:
          format: binary
          type: string
        image_format:
          $ref: '#/components/schemas/RecraftImageFormat'
        response_format:
          $ref: '#/components/schemas/RecraftResponseFormat'
      required:
        - image
      type: object
    RecraftProcessImageResponse:
      properties:
        created:
          type: integer
        credits:
          type: integer
        image:
          $ref: '#/components/schemas/RecraftImage'
      required:
        - created
        - image
        - credits
      type: object
    RecraftImageToImageRequest:
      properties:
        block_nsfw:
          type: boolean
        calculate_features:
          type: boolean
        controls:
          $ref: '#/components/schemas/RecraftUserControls'
        image:
          format: binary
          type: string
        image_format:
          $ref: '#/components/schemas/RecraftImageFormat'
        model:
          $ref: '#/components/schemas/RecraftTransformModel'
        "n":
          type: integer
        negative_prompt:
          type: string
        prompt:
          type: string
        response_format:
          $ref: '#/components/schemas/RecraftResponseFormat'
        strength:
          type: number
        style:
          $ref: '#/components/schemas/RecraftImageStyle'
        style_id:
          format: uuid
          type: string
        substyle:
          $ref: '#/components/schemas/RecraftImageSubStyle'
        text_layout:
          $ref: '#/components/schemas/RecraftTextLayout'
      required:
        - prompt
        - image
        - strength
      type: object
    RecraftGenerateImageResponse:
      properties:
        created:
          type: integer
        credits:
          type: integer
        data:
          items:
            $ref: '#/components/schemas/RecraftImage'
          type: array
      required:
        - created
        - data
        - credits
      type: object
    RecraftTransformImageWithMaskRequest:
      properties:
        block_nsfw:
          type: boolean
        calculate_features:
          type: boolean
        image:
          format: binary
          type: string
        image_format:
          $ref: '#/components/schemas/RecraftImageFormat'
        mask:
          format: binary
          type: string
        model:
          $ref: '#/components/schemas/RecraftTransformModel'
        "n":
          type: integer
        negative_prompt:
          type: string
        prompt:
          type: string
        response_format:
          $ref: '#/components/schemas/RecraftResponseFormat'
        style:
          $ref: '#/components/schemas/RecraftImageStyle'
        style_id:
          format: uuid
          type: string
        substyle:
          $ref: '#/components/schemas/RecraftImageSubStyle'
        text_layout:
          $ref: '#/components/schemas/RecraftTextLayout'
      required:
        - image
        - mask
        - prompt
      type: object
    KlingErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: |
            - 1000: Authentication failed
            - 1001: Authorization is empty
            - 1002: Authorization is invalid
            - 1003: Authorization is not yet valid
            - 1004: Authorization has expired
            - 1100: Account exception
            - 1101: Account in arrears (postpaid scenario)
            - 1102: Resource pack depleted or expired (prepaid scenario)
            - 1103: Unauthorized access to requested resource
            - 1200: Invalid request parameters
            - 1201: Invalid parameters
            - 1202: Invalid request method
            - 1203: Requested resource does not exist
            - 1300: Trigger platform strategy
            - 1301: Trigger content security policy
            - 1302: API request too frequent
            - 1303: Concurrency/QPS exceeds limit
            - 1304: Trigger IP whitelist policy
            - 5000: Internal server error
            - 5001: Service temporarily unavailable
            - 5002: Server internal timeout
        message:
          type: string
          description: Human-readable error message
        request_id:
          type: string
          description: Request ID for tracking and troubleshooting
      required:
        - code
        - message
        - request_id


    TripoTask:
      type: object
      properties:
        task_id:
          type: string
        type:
          type: string
        status:
          type: string
          enum:
            - queued
            - running
            - success
            - failed
            - cancelled
            - unknown
            - banned
            - expired
        input:
          type: object
        output:
          type: object
          properties:
            model:
              type: string
            base_model:
              type: string
            pbr_model:
              type: string
            rendered_image:
              type: string
            riggable:
              type: boolean
            topology:
              type: string
              enum:
                - "bip"
                - "quad"
        progress:
          type: integer
          minimum: 0
          maximum: 100
        create_time:
          type: integer
      required:
        - task_id
        - type
        - status
        - input
        - output
        - progress
        - create_time
    TripoSuccessTask:
      type: object
      properties:
        code:
          type: integer
          enum:
            - 0
        data:
          type: object
          properties:
            task_id:
              description: used for getTask
              type: string
          required:
            - task_id
      required:
        - code
        - data
    TripoBalance:
      type: object
      properties:
        balance:
          type: number
        frozen:
          type: number
      required: ["balance", "frozen"]
    TripoErrorResponse:
      type: object
      properties:
        code:
          type: integer
          enum:
            - 1001
            - 2000
            - 2001
            - 2002
            - 2003
            - 2004
            - 2006
            - 2007
            - 2008
            - 2010
        message:
          type: string
        suggestion:
          type: string
      required:
        - code
        - message
        - suggestion
    TripoResponseSuccessCode:
      type: integer
      description: "Standard success code for Tripo API responses. Typically 0 for success."
      example: 0
    TripoTextToModel:
      type: string
      description: "The type of the Tripo task, specifically for text-to-model operations."
      enum:
        - text_to_model
      example: text_to_model
    TripoModelVersion:
      type: string
      description: "Version of the Tripo model."
      enum:
        - "v2.5-20250123"
        - "v2.0-20240919"
        - "v1.4-20240625"
      example: "v2.5-20250123"
    TripoModelStyle:
      type: string
      description: "Style for the Tripo model generation."
      enum:
        - "person:person2cartoon"
        - "animal:venom"
        - "object:clay"
        - "object:steampunk"
        - "object:christmas"
        - "object:barbie"
        - "gold"
        - "ancient_bronze"
      example: "object:clay"
    TripoImageToModel:
      type: string
      description: "Task type for Tripo image-to-model generation."
      enum:
        - "image_to_model"
      example: "image_to_model"
    TripoMultiviewToModel:
      type: string
      description: "Task type for Tripo multiview-to-model generation."
      enum:
        - "multiview_to_model"
      example: "multiview_to_model"
    TripoMultiviewMode:
      type: string
      description: "Mode for multiview generation, specifying view orientation."
      enum:
        - LEFT
        - RIGHT
      example: LEFT
    TripoTextureQuality:
      type: string
      enum:
        - standard
        - detailed
    TripoTextureAlignment:
      type: string
      enum:
        - original_image
        - geometry
    TripoOrientation:
      type: string
      enum:
        - align_image
        - default
      default: default
    TripoTypeTextureModel:
      type: string
      enum:
        - texture_model
    TripoTypeRefineModel:
      type: string
      enum:
        - refine_model
    TripoTypeAnimatePrerigcheck:
      type: string
      enum:
        - animate_prerigcheck
    TripoTypeAnimateRig:
      type: string
      enum:
        - animate_rig
    TripoStandardFormat:
      type: string
      enum:
        - glb
        - fbx
    TripoTopology:
      type: string
      enum:
        - "bip"
        - "quad"
    TripoSpec:
      type: string
      enum:
        - "mixamo"
        - "tripo"
    TripoTypeAnimateRetarget:
      type: string
      enum:
        - animate_retarget
    TripoAnimation:
      type: string
      enum:
        - preset:idle
        - preset:walk
        - preset:climb
        - preset:jump
        - preset:run
        - preset:slash
        - preset:shoot
        - preset:hurt
        - preset:fall
        - preset:turn
    TripoTypeStylizeModel:
      type: string
      enum:
        - stylize_model
    TripoStylizeOptions:
      type: string
      enum:
        - lego
        - voxel
        - voronoi
        - minecraft
    TripoTypeConvertModel:
      type: string
      enum:
        - convert_model
    TripoConvertFormat:
      type: string
      enum:
        - GLTF
        - USDZ
        - FBX
        - OBJ
        - STL
        - 3MF
    TripoTextureFormat:
      type: string
      enum:
        - BMP
        - DPX
        - HDR
        - JPEG
        - OPEN_EXR
        - PNG
        - TARGA
        - TIFF
        - WEBP

    LumaAspectRatio:
      type: string
      enum:
        - '1:1'
        - '16:9'
        - '9:16'
        - '4:3'
        - '3:4'
        - '21:9'
        - '9:21'
      description: The aspect ratio of the generation
      example: '16:9'
      default: '16:9'
    LumaKeyframes:
      type: object
      description: The keyframes of the generation
      properties:
        frame0:
          $ref: '#/components/schemas/LumaKeyframe'
        frame1:
          $ref: '#/components/schemas/LumaKeyframe'
      example:
        frame0:
          type: image
          url: 'https://example.com/image.jpg'
        frame1:
          type: generation
          id: '123e4567-e89b-12d3-a456-426614174000'
    LumaVideoModel:
      type: string
      enum:
        - ray-2
        - ray-flash-2
        - ray-1-6
      default: ray-2
      example: ray-2
      description: The video model used for the generation
    LumaVideoModelOutputResolution:
      anyOf:
        - type: string
          enum:
            - 540p
            - 720p
            - 1080p
            - 4k
        - type: string
    LumaVideoModelOutputDuration:
      anyOf:
        - type: string
          enum:
            - 5s
            - 9s
        - type: string
    LumaImageModel:
      type: string
      enum:
        - photon-1
        - photon-flash-1
      default: photon-1
      description: The image model used for the generation
    LumaImageRef:
      type: object
      description: The image reference object
      properties:
        url:
          type: string
          format: uri
          description: The URL of the image reference
        weight:
          type: number
          description: The weight of the image reference
    LumaImageIdentity:
      type: object
      description: The image identity object
      properties:
        images:
          type: array
          items:
            type: string
            format: uri
          description: The URLs of the image identity
    LumaModifyImageRef:
      type: object
      description: The modify image reference object
      properties:
        url:
          type: string
          format: uri
          description: The URL of the image reference
        weight:
          type: number
          description: The weight of the modify image reference
    LumaGenerationReference:
      type: object
      description: The generation reference object
      properties:
        type:
          type: string
          enum:
            - generation
          default: generation
        id:
          type: string
          format: uuid
          description: The ID of the generation
      required:
        - type
        - id
      example:
        type: generation
        id: '123e4567-e89b-12d3-a456-426614174003'
    LumaImageReference:
      type: object
      description: The image object
      properties:
        type:
          type: string
          enum:
            - image
          default: image
        url:
          type: string
          format: uri
          description: The URL of the image
      required:
        - type
        - url
      example:
        type: image
        url: 'https://example.com/image.jpg'
    LumaKeyframe:
      oneOf:
        - $ref: '#/components/schemas/LumaGenerationReference'
        - $ref: '#/components/schemas/LumaImageReference'
      discriminator:
        propertyName: type
        mapping:
          generation: '#/components/schemas/LumaGenerationReference'
          image: '#/components/schemas/LumaImageReference'
      description: A keyframe can be either a Generation reference, an Image, or a Video
    LumaGenerationType:
      type: string
      enum:
        - video
        - image
    LumaState:
      type: string
      description: The state of the generation
      enum:
        - queued
        - dreaming
        - completed
        - failed
      example: completed
    LumaAssets:
      type: object
      description: The assets of the generation
      properties:
        video:
          type: string
          format: uri
          description: The URL of the video
        image:
          type: string
          format: uri
          description: The URL of the image
        progress_video:
          type: string
          format: uri
          description: The URL of the progress video
    LumaGenerationRequest:
      type: object
      description: The generation request object
      properties:
        generation_type:
          type: string
          enum:
            - video
          default: video
        prompt:
          type: string
          description: The prompt of the generation
        aspect_ratio:
          $ref: '#/components/schemas/LumaAspectRatio'
        loop:
          type: boolean
          description: Whether to loop the video
        keyframes:
          $ref: '#/components/schemas/LumaKeyframes'
        callback_url:
          type: string
          format: uri
          description: The callback URL of the generation, a POST request with Generation object will be sent to the callback URL when the generation is dreaming, completed, or failed
        model:
          $ref: '#/components/schemas/LumaVideoModel'
        resolution:
          $ref: '#/components/schemas/LumaVideoModelOutputResolution'
        duration:
          $ref: '#/components/schemas/LumaVideoModelOutputDuration'
      required:
        - duration
        - resolution
        - prompt
        - aspect_ratio
        - model
    LumaImageGenerationRequest:
      type: object
      description: The image generation request object
      properties:
        generation_type:
          type: string
          enum:
            - image
          default: image
        model:
          $ref: '#/components/schemas/LumaImageModel'
        prompt:
          type: string
          description: The prompt of the generation
        aspect_ratio:
          $ref: '#/components/schemas/LumaAspectRatio'
        callback_url:
          type: string
          format: uri
          description: The callback URL for the generation
        image_ref:
          type: array
          items:
            $ref: '#/components/schemas/LumaImageRef'
        style_ref:
          type: array
          items:
            $ref: '#/components/schemas/LumaImageRef'
        character_ref:
          type: object
          properties:
            identity0:
              $ref: '#/components/schemas/LumaImageIdentity'
        modify_image_ref:
          $ref: '#/components/schemas/LumaModifyImageRef'
    LumaUpscaleVideoGenerationRequest:
      type: object
      description: The upscale generation request object
      properties:
        generation_type:
          type: string
          enum:
            - upscale_video
          default: upscale_video
        resolution:
          $ref: '#/components/schemas/LumaVideoModelOutputResolution'
        callback_url:
          type: string
          format: uri
          description: The callback URL for the upscale
    LumaAudioGenerationRequest:
      type: object
      description: The audio generation request object
      properties:
        generation_type:
          type: string
          enum:
            - add_audio
          default: add_audio
        prompt:
          type: string
          description: The prompt of the audio
        negative_prompt:
          type: string
          description: The negative prompt of the audio
        callback_url:
          type: string
          format: uri
          description: The callback URL for the audio
    LumaError:
      type: object
      description: The error object
      properties:
        detail:
          type: string
          description: The error message
      example:
        detail: 'Invalid API key is provided'
    LumaGeneration:
      type: object
      description: The generation response object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the generation
        generation_type:
          $ref: '#/components/schemas/LumaGenerationType'
        state:
          $ref: '#/components/schemas/LumaState'
        failure_reason:
          type: string
          description: The reason for the state of the generation
        created_at:
          type: string
          format: date-time
          description: The date and time when the generation was created
        assets:
          $ref: '#/components/schemas/LumaAssets'
        model:
          type: string
          description: The model used for the generation
        request:
          oneOf:
            - $ref: '#/components/schemas/LumaGenerationRequest'
            - $ref: '#/components/schemas/LumaImageGenerationRequest'
            - $ref: '#/components/schemas/LumaUpscaleVideoGenerationRequest'
            - $ref: '#/components/schemas/LumaAudioGenerationRequest'
          description: The request of the generation
      example:
        id: '123e4567-e89b-12d3-a456-426614174000'
        state: 'completed'
        failure_reason: null
        created_at: '2023-06-01T12:00:00Z'
        assets:
          video: 'https://example.com/video.mp4'
        model: 'ray-2'
        request:
          prompt: 'A serene lake surrounded by mountains at sunset'
          aspect_ratio: '16:9'
          loop: true
          keyframes:
            frame0:
              type: image
              url: 'https://example.com/image.jpg'
            frame1:
              type: generation
              id: '123e4567-e89b-12d3-a456-426614174000'
    
    PixverseTextVideoRequest:
      type: object
      required:
          - aspect_ratio
          - duration
          - model
          - prompt
          - quality
      properties:
          aspect_ratio:
              type: string
              enum: ['16:9', '4:3', '1:1', '3:4', '9:16']
          duration:
              type: integer
              enum: [5, 8]
          model:
              type: string
              enum: [v3.5]
          motion_mode:
              type: string
              enum: [normal, fast]
          negative_prompt:
              type: string
          prompt:
              type: string
          quality:
              type: string
              enum: [360p, 540p, 720p, 1080p]
          seed:
              type: integer
          style:
              type: string
              enum: [anime, 3d_animation, clay, comic, cyberpunk]
          template_id:
              type: integer
          water_mark:
              type: boolean
    PixverseVideoResponse:
        type: object
        properties:
            ErrCode:
                type: integer
            ErrMsg:
                type: string
            Resp:
                type: object
                properties:
                    video_id:
                        type: integer
    PixverseImageUploadResponse:
        type: object
        properties:
            ErrCode:
                type: integer
            ErrMsg:
                type: string
            Resp:
                type: object
                properties:
                    img_id:
                        type: integer
    PixverseImageVideoRequest:
        type: object
        required:
            - img_id
            - model
            - duration
            - quality
            - prompt
        properties:
            img_id:
                type: integer
            model:
                type: string
                enum: [v3.5]
            prompt:
                type: string
            duration:
                type: integer
                enum: [5, 8]
            quality:
                type: string
                enum: [360p, 540p, 720p, 1080p]
            motion_mode:
                type: string
                enum: [normal, fast]
            seed:
                type: integer
            style:
                type: string
                enum: [anime, 3d_animation, clay, comic, cyberpunk]
            template_id:
                type: integer
            water_mark:
                type: boolean
    PixverseTransitionVideoRequest:
        type: object
        required:
            - first_frame_img
            - last_frame_img
            - model
            - duration
            - quality
            - prompt
            - motion_mode
            - seed
        properties:
            first_frame_img:
                type: integer
            last_frame_img:
                type: integer
            model:
                type: string
                enum: [v3.5]
            duration:
                type: integer
                enum: [5, 8]
            quality:
                type: string
                enum: [360p, 540p, 720p, 1080p]
            motion_mode:
                type: string
                enum: [normal, fast]
            seed:
                type: integer
            prompt:
                type: string
            style:
                type: string
                enum: [anime, 3d_animation, clay, comic, cyberpunk]
            template_id:
                type: integer
            water_mark:
                type: boolean
    PixverseVideoResultResponse:
      type: object
      properties:
        ErrCode:
          type: integer
        ErrMsg:
          type: string
        Resp:
          type: object
          properties:
            create_time:
              type: string
            id:
              type: integer
            modify_time:
              type: string
            negative_prompt:
              type: string
            outputHeight:
              type: integer
            outputWidth:
              type: integer
            prompt:
              type: string
            resolution_ratio:
              type: integer
            seed:
              type: integer
            size:
              type: integer
            status:
              type: integer
              enum: [ 1, 5, 6, 7, 8 ]
              description: |
                Video generation status codes:
                * 1 - Generation successful
                * 5 - Generating
                * 6 - Deleted
                * 7 - Contents moderation failed
                * 8 - Generation failed
            style:
              type: string
            url:
              type: string
    Veo2GenVidRequest:
      type: object
      properties:
        instances:
          type: array
          items:
            type: object
            properties:
              prompt:
                type: string
                description: Text description of the video
              image:
                type: object
                description: Optional image to guide video generation
                properties:
                  bytesBase64Encoded:
                    type: string
                    format: byte
                  gcsUri:
                    type: string
                  mimeType:
                    type: string
                oneOf:
                  - required: [ bytesBase64Encoded ]
                  - required: [ gcsUri ]
            required:
              - prompt
        parameters:
          type: object
          properties:
            aspectRatio:
              type: string
              example: "16:9"
            negativePrompt:
              type: string
            personGeneration:
              type: string
              enum: [ "ALLOW", "BLOCK" ]
            sampleCount:
              type: integer
            seed:
              type: integer
              format: uint32
            storageUri:
              type: string
              description: Optional Cloud Storage URI to upload the video
            durationSeconds:
              type: integer
            enhancePrompt:
              type: boolean
    Veo2GenVidResponse:
      type: object
      properties:
        name:
          type: string
          description: Operation resource name
          example: projects/PROJECT_ID/locations/us-central1/publishers/google/models/MODEL_ID/operations/a1b07c8e-7b5a-4aba-bb34-3e1ccb8afcc8
      required:
        - name
    Veo2GenVidPollRequest:
      type: object
      properties:
        operationName:
          type: string
          description: Full operation name (from predict response)
          example: projects/PROJECT_ID/locations/us-central1/publishers/google/models/MODEL_ID/operations/OPERATION_ID
      required:
        - operationName
    Veo2GenVidPollResponse:
      type: object
      properties:
        name:
          type: string
        done:
          type: boolean
        response:
          type: object
          properties:
            "@type":
              type: string
              example: type.googleapis.com/cloud.ai.large_models.vision.GenerateVideoResponse
            raiMediaFilteredCount:
              type: integer
              description: Count of media filtered by responsible AI policies
            raiMediaFilteredReasons:
              type: array
              items:
                type: string
              description: Reasons why media was filtered by responsible AI policies
            videos:
              type: array
              items:
                type: object
                properties:
                  gcsUri:
                    type: string
                    description: Cloud Storage URI of the video
                  bytesBase64Encoded:
                    type: string
                    description: Base64-encoded video content
                  mimeType:
                    type: string
                    description: Video MIME type
          description: The actual prediction response if done is true
        error:
          type: object
          description: Error details if operation failed
          properties:
            code:
              type: integer
              description: Error code
            message:
              type: string
              description: Error message

    VeoGenVidRequest:
      type: object
      properties:
        instances:
          type: array
          items:
            type: object
            properties:
              prompt:
                type: string
                description: Text description of the video
              image:
                type: object
                description: Optional image to guide video generation
                properties:
                  bytesBase64Encoded:
                    type: string
                    format: byte
                  gcsUri:
                    type: string
                  mimeType:
                    type: string
                oneOf:
                  - required: [ bytesBase64Encoded ]
                  - required: [ gcsUri ]
            required:
              - prompt
        parameters:
          type: object
          properties:
            aspectRatio:
              type: string
              example: "16:9"
            negativePrompt:
              type: string
            personGeneration:
              type: string
              enum: [ "ALLOW", "BLOCK" ]
            sampleCount:
              type: integer
            seed:
              type: integer
              format: uint32
            storageUri:
              type: string
              description: Optional Cloud Storage URI to upload the video
            durationSeconds:
              type: integer
            enhancePrompt:
              type: boolean
    VeoGenVidResponse:
      type: object
      properties:
        name:
          type: string
          description: Operation resource name
          example: projects/PROJECT_ID/locations/us-central1/publishers/google/models/MODEL_ID/operations/a1b07c8e-7b5a-4aba-bb34-3e1ccb8afcc8
      required:
        - name
    VeoGenVidPollRequest:
      type: object
      properties:
        operationName:
          type: string
          description: Full operation name (from predict response)
          example: projects/PROJECT_ID/locations/us-central1/publishers/google/models/MODEL_ID/operations/OPERATION_ID
      required:
        - operationName
    VeoGenVidPollResponse:
      type: object
      properties:
        name:
          type: string
        done:
          type: boolean
        response:
          type: object
          properties:
            "@type":
              type: string
              example: type.googleapis.com/cloud.ai.large_models.vision.GenerateVideoResponse
            raiMediaFilteredCount:
              type: integer
              description: Count of media filtered by responsible AI policies
            raiMediaFilteredReasons:
              type: array
              items:
                type: string
              description: Reasons why media was filtered by responsible AI policies
            videos:
              type: array
              items:
                type: object
                properties:
                  gcsUri:
                    type: string
                    description: Cloud Storage URI of the video
                  bytesBase64Encoded:
                    type: string
                    description: Base64-encoded video content
                  mimeType:
                    type: string
                    description: Video MIME type
          description: The actual prediction response if done is true
        error:
          type: object
          description: Error details if operation failed
          properties:
            code:
              type: integer
              description: Error code
            message:
              type: string
              description: Error message
    
    RunwayImageToVideoRequest:
      type: object
      properties:
        promptImage:
          $ref: '#/components/schemas/RunwayPromptImageObject'
        seed:
          type: integer
          format: int64
          minimum: 0
          maximum: 4294967295
          description: Random seed for generation
        model:
          $ref: '#/components/schemas/RunwayModelEnum'
          description: Model to use for generation
        promptText:
          type: string
          maxLength: 1000
          description: Text prompt for the generation
        duration:
          $ref: '#/components/schemas/RunwayDurationEnum'
          description: The number of seconds of duration for the output video.
        ratio:
          $ref: '#/components/schemas/RunwayAspectRatioEnum'
          description: The resolution (aspect ratio) of the output video. Allowable values depend on the selected model. 1280:768 and 768:1280 are only supported for gen3a_turbo.
      required:
        - promptImage
        - seed
        - model
        - duration
        - ratio
    RunwayImageToVideoResponse:
      type: object
      properties:
        id:
          type: string
          description: Task ID
    RunwayTextToImageResponse:
      type: object
      properties:
        id:
          type: string
          description: Task ID
    RunwayTaskStatusResponse:
      type: object
      properties:
        id:
          type: string
          description: Task ID
        status:
          $ref: '#/components/schemas/RunwayTaskStatusEnum'
          description: Task status
        createdAt:
          type: string
          format: date-time
          description: Task creation timestamp
        output:
          type: array
          items:
            type: string
          description: Array of output video URLs
        progress:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Float value between 0 and 1 representing the progress of the task. Only available if status is RUNNING.
      required:
        - id
        - status
        - createdAt
    RunwayTaskStatusEnum:
      type: string
      description: Possible statuses for a Runway task.
      enum:
        - SUCCEEDED
        - RUNNING
        - FAILED
        - PENDING
        - CANCELLED
        - THROTTLED
    RunwayModelEnum:
      type: string
      description: Available Runway models for generation.
      enum:
        - gen4_turbo
        - gen3a_turbo
    RunwayPromptImageDetailedObject:
      type: object
      description: Represents an image with its position in the video sequence.
      properties:
        uri:
          type: string
          description: A HTTPS URL or data URI containing an encoded image.
        position:
          type: string
          description: The position of the image in the output video. 'last' is currently supported for gen3a_turbo only.
          enum: [ first, last ]
      required:
        - uri
        - position
    RunwayDurationEnum:
      type: integer
      enum:
        - 5
        - 10
    RunwayAspectRatioEnum:
      type: string
      enum:
        - '1280:720'
        - '720:1280'
        - '1104:832'
        - '832:1104'
        - '960:960'
        - '1584:672'
        - '1280:768' # gen3a_turbo only
        - '768:1280' # gen3a_turbo only
    RunwayTextToImageAspectRatioEnum:
      type: string
      enum:
        - '1920:1080'
        - '1080:1920'
        - '1024:1024'
        - '1360:768'
        - '1080:1080'
        - '1168:880'
        - '1440:1080'
        - '1080:1440'
        - '1808:768'
        - '2112:912'
    RunwayPromptImageObject:
      oneOf:
        - type: string
          description: A single HTTPS URL or data URI for the first frame image.
        - type: array
          description: An array of image objects with positions. No two images can have the same position.
          items:
            $ref: '#/components/schemas/RunwayPromptImageDetailedObject'
      description: Image(s) to use for the video generation. Can be a single URI or an array of image objects with positions.
    OpenAIImageGenerationResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              b64_json:
                type: string
                description: Base64 encoded image data
              url:
                type: string
                description: URL of the image
              revised_prompt:
                type: string
                description: Revised prompt
        usage:
          type: object
          properties:
            input_tokens:
              type: integer
            input_tokens_details:
              type: object
              properties:
                text_tokens:
                  type: integer
                image_tokens:
                  type: integer
            output_tokens:
              type: integer
            total_tokens:
              type: integer
    OpenAIImageGenerationRequest:
      type: object
      required:
        - prompt
      properties:
        model:
          type: string
          description: The model to use for image generation
          example: "dall-e-3"
        prompt:
          type: string
          description: A text description of the desired image
          example: "Draw a rocket in front of a blackhole in deep space"
        n:
          type: integer
          description: The number of images to generate (1-10). Only 1 supported for dall-e-3.
          example: 1
        quality:
          type: string
          description: The quality of the generated image
          enum: [ low, medium, high, standard, hd ]
          example: "high"
        size:
          type: string
          description: Size of the image (e.g., 1024x1024, 1536x1024, auto)
          example: "1024x1536"
        output_format:
          type: string
          description: Format of the output image
          enum: [ png, webp, jpeg ]
          example: "png"
        output_compression:
          type: integer
          description: Compression level for JPEG or WebP (0-100)
          example: 100
        moderation:
          type: string
          description: Content moderation setting
          enum: [ low, auto ]
          example: "auto"
        background:
          type: string
          description: Background transparency
          enum: [ transparent, opaque ]
          example: "opaque"
        response_format:
          type: string
          description: Response format of image data
          enum: [ url, b64_json ]
          example: "b64_json"
        style:
          type: string
          description: Style of the image (only for dall-e-3)
          enum: [ vivid, natural ]
          example: "vivid"
        user:
          type: string
          description: A unique identifier for end-user monitoring
          example: "user-1234"
    OpenAIImageEditRequest:
      type: object
      required:
        - model
        - prompt
      properties:
        model:
          type: string
          description: The model to use for image editing
          example: "gpt-image-1"
        prompt:
          type: string
          description: A text description of the desired edit
          example: "Give the rocketship rainbow coloring"
        n:
          type: integer
          description: The number of images to generate
          example: 1
        quality:
          type: string
          description: The quality of the edited image
          example: "low"
        size:
          type: string
          description: Size of the output image
          example: "1024x1024"
        output_format:
          type: string
          description: Format of the output image
          enum: [ png, webp, jpeg ]
          example: "png"
        output_compression:
          type: integer
          description: Compression level for JPEG or WebP (0-100)
          example: 100
        moderation:
          type: string
          description: Content moderation setting
          enum: [ low, auto ]
          example: "auto"
        background:
          type: string
          description: Background transparency
          example: "opaque"
        user:
          type: string
          description: A unique identifier for end-user monitoring
          example: "user-1234"
    CustomerStorageResourceResponse:
      type: object
      properties:
        download_url:
          type: string
          description: The signed URL to use for downloading the file from the specified path
        upload_url:
          type: string
          description: The signed URL to use for uploading the file to the specified path
        expires_at:
          type: string
          format: date-time
          description: When the signed URL will expire
        existing_file:
          type: boolean
          description: Whether an existing file with the same hash was found
    Pikaffect:
      type: string
      enum:
        - Cake-ify
        - Crumble
        - Crush
        - Decapitate
        - Deflate
        - Dissolve
        - Explode
        - Eye-pop
        - Inflate
        - Levitate
        - Melt
        - Peel
        - Poke
        - Squish
        - Ta-da
        - Tear
    PikaBody_generate_pikaffects_generate_pikaffects_post:
        properties:
            image:
                type: string
                format: binary
                title: Image
            pikaffect:
                $ref: '#/components/schemas/Pikaffect'
                title: Pikaffect
            promptText:
                anyOf:
                    - type: string
                title: Prompttext
            negativePrompt:
                anyOf:
                    - type: string
                title: Negativeprompt
            seed:
                anyOf:
                    - type: integer
                title: Seed
        type: object
        # required: TODO: this should be required, but need to make optional to pass validation
        #     - image
        title: Body_generate_pikaffects_generate_pikaffects_post
    PikaGenerateResponse:
        properties:
            video_id:
                type: string
                title: Video Id
        type: object
        required:
            - video_id
        title: GenerateResponse
    PikaHTTPValidationError:
        properties:
            detail:
                items:
                    $ref: '#/components/schemas/PikaValidationError'
                type: array
                title: Detail
        type: object
        title: HTTPValidationError
    PikaBody_generate_pikadditions_generate_pikadditions_post:
        properties:
            video:
                type: string
                format: binary
                title: Video
            image:
                type: string
                format: binary
                title: Image
            promptText:
                anyOf:
                    - type: string
                title: Prompttext
            negativePrompt:
                anyOf:
                    - type: string
                title: Negativeprompt
            seed:
                anyOf:
                    - type: integer
                title: Seed
        type: object
        # required:
            # TODO: this should be required, but need to make optional to pass validation
            # - video
            # - image
        title: Body_generate_pikadditions_generate_pikadditions_post
    PikaBody_generate_pikaswaps_generate_pikaswaps_post:
        properties:
            video:
                type: string
                format: binary
                title: Video
            image:
                anyOf:
                    - type: string
                      format: binary
                title: Image
            promptText:
                anyOf:
                    - type: string
                title: Prompttext
            modifyRegionMask:
                anyOf:
                    - type: string
                      format: binary
                title: Modifyregionmask
                description: >-
                    A mask image that specifies the region to modify, where the mask is white and the background is black
            modifyRegionRoi:
                anyOf:
                    - type: string
                title: Modifyregionroi
                description: Plaintext description of the object / region to modify
            negativePrompt:
                anyOf:
                    - type: string
                title: Negativeprompt
            seed:
                anyOf:
                    - type: integer
                title: Seed
        type: object
        # required: # TODO: this should be required, but need to make optional to pass validation
        #     - video
        title: Body_generate_pikaswaps_generate_pikaswaps_post
    PikaBody_generate_2_2_t2v_generate_2_2_t2v_post:
      properties:
        promptText:
          type: string
          title: Prompttext
        negativePrompt:
          type: string
          nullable: true
          title: Negativeprompt
        seed:
          type: integer
          nullable: true
          title: Seed
        resolution:
          $ref: '#/components/schemas/PikaResolutionEnum'
          title: Resolution
        duration:
          $ref: '#/components/schemas/PikaDurationEnum'
          title: Duration
        aspectRatio:
          type: number
          maximum: 2.5
          minimum: 0.4
          default: 1.7777777777777777
          format: float
          title: Aspectratio
          description: Aspect ratio (width / height)
      type: object
      required:
        - promptText
      title: Body_generate_2_2_t2v_generate_2_2_t2v_post
    PikaBody_generate_2_2_i2v_generate_2_2_i2v_post:
      properties:
        image:
          type: string
          format: binary
          nullable: true # TODO: fix, this is not actually nullable, but needed to pass validation as it is not included in request body
          title: Image
        promptText:
          type: string
          nullable: true
          title: Prompttext
        negativePrompt:
          type: string
          nullable: true
          title: Negativeprompt
        seed:
          type: integer
          nullable: true
          title: Seed
        resolution:
          title: Resolution
          $ref: '#/components/schemas/PikaResolutionEnum'
        duration:
          $ref: '#/components/schemas/PikaDurationEnum'
          title: Duration
      type: object
      # required: TODO: this should be required, but need to make optional to pass validation
      #   - image
      title: Body_generate_2_2_i2v_generate_2_2_i2v_post
    PikaBody_generate_2_2_c2v_generate_2_2_pikascenes_post:
        properties:
            images:
                items:
                    type: string
                    format: binary
                type: array
                title: Images
            ingredientsMode:
                type: string
                enum:
                    - creative
                    - precise
                title: Ingredientsmode
            promptText:
                anyOf:
                    - type: string
                title: Prompttext
            negativePrompt:
                anyOf:
                    - type: string
                title: Negativeprompt
            seed:
                anyOf:
                    - type: integer
                title: Seed
            resolution:
                type: string
                title: Resolution
                default: 1080p
            duration:
                type: integer
                title: Duration
                default: 5
            aspectRatio:
                anyOf:
                    - type: number
                      maximum: 2.5
                      minimum: 0.4
                title: Aspectratio
                description: Aspect ratio (width / height)
        type: object
        required:
            # - images # TODO: this should be required, but need to make optional to pass validation
            - ingredientsMode
        title: Body_generate_2_2_c2v_generate_2_2_pikascenes_post
    PikaBody_generate_2_2_keyframe_generate_2_2_pikaframes_post:
      properties:
        keyFrames:
          items:
            type: string
            format: binary
          type: array
          title: Keyframes
          description: Array of keyframe images
        promptText:
          type: string
          title: Prompttext
        negativePrompt:
          anyOf:
            - type: string
          title: Negativeprompt
        seed:
          anyOf:
            - type: integer
          title: Seed
        resolution:
          $ref: '#/components/schemas/PikaResolutionEnum'
          title: Resolution
        duration:
          type: integer
          minimum: 5
          maximum: 10
          title: Duration
      type: object
      required:
        # - keyFrames # TODO: this should be required, but need to make optional to pass validation
        - promptText
      title: Body_generate_2_2_keyframe_generate_2_2_pikaframes_post
    PikaVideoResponse:
      properties:
        id:
          type: string
          title: Id
        status:
          title: Status
          description: The status of the video
          $ref: '#/components/schemas/PikaStatusEnum'
        url:
          type: string
          nullable: true
          title: Url
          default: null
        progress:
          type: integer
          nullable: true
          title: Progress
          default: null
      type: object
      required:
        - id
        - status
      title: VideoResponse
    PikaStatusEnum:
      type: string
      enum:
        - queued
        - started
        - finished
    PikaValidationError:
        properties:
            loc:
                items:
                    anyOf:
                        - type: string
                        - type: integer
                type: array
                title: Location
            msg:
                type: string
                title: Message
            type:
                type: string
                title: Error Type
        type: object
        required:
            - loc
            - msg
            - type
        title: ValidationError
    PikaResolutionEnum:
      type: string
      enum:
        - 1080p
        - 720p
      default: 1080p
    PikaDurationEnum:
      type: integer
      enum:
        - 5
        - 10
      default: 5
      
    RGBColor:
      type: object
      description: RGB color values
      properties:
        rgb:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 255
          minItems: 3
          maxItems: 3
      required:
        - rgb
      example:
        rgb: [255, 0, 0]
    StabilityError:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: >
            A unique identifier associated with this error. Please include this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)
            you file, as it will greatly assist us in diagnosing the root cause of the problem.
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
            - some-field: is required
      required:
        - id
        - name
        - errors
      example:
        id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
        name: internal_error
        errors:
          - An unexpected server error has occurred, please try again later.
    StabilityStabilityClientID:
      type: string
      maxLength: 256
      description: >-
        The name of your application, used to help us communicate app-specific debugging or moderation issues to you.
      example: my-awesome-app
    StabilityStabilityClientUserID:
      type: string
      maxLength: 256
      description: >-
        A unique identifier for your end user. Used to help us communicate user-specific debugging or moderation issues to you. Feel free to obfuscate this value to protect user privacy.
      example: 'DiscordUser#9999'
    StabilityStabilityClientVersion:
      type: string
      maxLength: 256
      description: >-
        The version of your application, used to help us communicate version-specific debugging or moderation issues to you.
      example: 1.2.1
    StabilityContentModerationResponse:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: >-
            A unique identifier associated with this error. Please include this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)
            you file, as it will greatly assist us in diagnosing the root cause of the problem.
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: >-
            Our content moderation system has flagged some part of your request and subsequently denied it.  You were not charged for this request.  While this may at times be frustrating, it is necessary to maintain the integrity of our platform and ensure a safe experience for all users.
            If you would like to provide feedback, please use the [Support Form](https://kb.stability.ai/knowledge-base/kb-tickets/new).
          enum:
            - content_moderation
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
            - 'some-field: is required'
      required:
        - id
        - name
        - errors
      description: Your request was flagged by our content moderation system.
      example:
        id: ed14db44362126aab3cbd25cca51ffe3
        name: content_moderation
        errors:
          - >-
            Your request was flagged by our content moderation system, as a result your request was denied and you were not charged.
    ImagenGenerateImageRequest:
      type: object
      properties:
        instances:
          type: array
          items:
            $ref: '#/components/schemas/ImagenImageGenerationInstance'
        parameters:
          $ref: '#/components/schemas/ImagenImageGenerationParameters'
      required:
        - instances
        - parameters
    ImagenGenerateImageResponse:
      type: object
      properties:
        predictions:
          type: array
          items:
            $ref: '#/components/schemas/ImagenImagePrediction'
    ImagenImageGenerationInstance:
      type: object
      properties:
        prompt:
          type: string
          description: Text prompt for image generation
      required:
        - prompt
    ImagenImageGenerationParameters:
      type: object
      properties:
        sampleCount:
          type: integer
          minimum: 1
          maximum: 4
        seed:
          type: integer
          format: uint32
        addWatermark:
          type: boolean
        aspectRatio:
          type: string
          enum: ["1:1", "9:16", "16:9", "3:4", "4:3"]
        enhancePrompt:
          type: boolean
        includeRaiReason:
          type: boolean
        includeSafetyAttributes:
          type: boolean
        outputOptions:
          $ref: '#/components/schemas/ImagenOutputOptions'
        personGeneration:
          type: string
          enum: ["dont_allow", "allow_adult", "allow_all"]
        safetySetting:
          type: string
          enum: ["block_most", "block_some", "block_few", "block_fewest"]
        storageUri:
          type: string
          format: uri
    ImagenImagePrediction:
      type: object
      properties:
        mimeType:
          type: string
          description: MIME type of the generated image
        prompt:
          type: string
          description: Enhanced or rewritten prompt used to generate this image
        bytesBase64Encoded:
          type: string
          format: byte
          description: Base64-encoded image content
    ImagenOutputOptions:
      type: object
      properties:
        mimeType:
          type: string
          enum: ["image/png", "image/jpeg"]
        compressionQuality:
          type: integer
          minimum: 0
          maximum: 100

    RenderingSpeed:
      type: string
      description: The rendering speed setting that controls the trade-off between generation speed and quality
      enum:
        - BALANCED
        - TURBO
        - QUALITY
      default: BALANCED
    StabilityCreativity:
      type: number
      minimum: 0.2
      maximum: 0.5
      default: 0.35
      description: Controls the likelihood of creating additional details not heavily
        conditioned by the init image.
    StabilityGenerationID:
      type: string
      minLength: 64
      maxLength: 64
      description: The `id` of a generation, typically used for async generations,
        that can be used to check the status of the generation or retrieve the result.
      example: a6dc6c6e20acda010fe14d71f180658f2896ed9b4ec25aa99a6ff06c796987c4
    StabilityImageGenerationSD3_Request:
      type: object
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: 'What you wish to see in the output image. A strong, descriptive
            prompt that clearly defines

            elements, colors, and subjects will lead to better results.'
        mode:
          type: string
          enum:
          - text-to-image
          - image-to-image
          default: text-to-image
          description: 'Controls whether this is a text-to-image or image-to-image
            generation, which affects which parameters are required:

            - **text-to-image** requires only the `prompt` parameter

            - **image-to-image** requires the `prompt`, `image`, and `strength` parameters'
          title: GenerationMode
        image:
          type: string
          description: "The image to use as the starting point for the generation.\n\
            \nSupported formats:\n\n\n\n  - jpeg\n  - png\n  - webp\n\nSupported dimensions:\n\
            \n\n\n  - Every side must be at least 64 pixels\n\n> **Important:** This\
            \ parameter is only valid for **image-to-image** requests."
          format: binary
        strength:
          type: number
          minimum: 0
          maximum: 1
          description: 'Sometimes referred to as _denoising_, this parameter controls
            how much influence the

            `image` parameter has on the generated image.  A value of 0 would yield
            an image that

            is identical to the input.  A value of 1 would be as if you passed in
            no image at all.


            > **Important:** This parameter is only valid for **image-to-image** requests.'
        aspect_ratio:
          type: string
          enum:
          - '21:9'
          - '16:9'
          - '3:2'
          - '5:4'
          - '1:1'
          - '4:5'
          - '2:3'
          - '9:16'
          - '9:21'
          default: '1:1'
          description: 'Controls the aspect ratio of the generated image. Defaults
            to 1:1.


            > **Important:** This parameter is only valid for **text-to-image** requests.'
        model:
          type: string
          enum:
          - sd3.5-large
          - sd3.5-large-turbo
          - sd3.5-medium
          default: sd3.5-large
          description: "The model to use for generation.\n\n- `sd3.5-large` requires\
            \ 6.5 credits per generation\n- `sd3.5-large-turbo` requires 4 credits\
            \ per generation\n- `sd3.5-medium` requires 3.5 credits per generation\n\
            - As of the April 17, 2025, `sd3-large`, `sd3-large-turbo` and `sd3-medium`\n\
            \n\n\n  are re-routed to their `sd3.5-[model version]` equivalent, at\
            \ the same price."
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: A specific value that is used to guide the 'randomness' of
            the generation. (Omit this parameter or pass `0` to use a random seed.)
        output_format:
          type: string
          enum:
          - png
          - jpeg
          default: png
          description: Dictates the `content-type` of the generated image.
        style_preset:
          type: string
          enum:
          - enhance
          - anime
          - photographic
          - digital-art
          - comic-book
          - fantasy-art
          - line-art
          - analog-film
          - neon-punk
          - isometric
          - low-poly
          - origami
          - modeling-compound
          - cinematic
          - 3d-model
          - pixel-art
          - tile-texture
          description: Guides the image model towards a particular style.
        negative_prompt:
          type: string
          maxLength: 10000
          description: 'Keywords of what you **do not** wish to see in the output
            image.

            This is an advanced feature.'
        cfg_scale:
          type: number
          minimum: 1
          maximum: 10
          description: How strictly the diffusion process adheres to the prompt text
            (higher values keep your image closer to your prompt). The _Large_ and
            _Medium_ models use a default of `4`. The _Turbo_ model uses a default
            of `1`.
      required:
      - prompt
    StabilityImageGenrationSD3_Response_200:
      type: object
      properties:
        image:
          type: string
          description: The generated image, encoded to base64.
          example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: The seed used as random noise for this generation.
          example: 343940597
        finish_reason:
          type: string
          enum:
          - SUCCESS
          - CONTENT_FILTERED
          description: 'The reason the generation finished.


            - `SUCCESS` = successful generation.

            - `CONTENT_FILTERED` = successful generation, however the output violated
            our content moderation

            policy and has been blurred as a result.'
          example: SUCCESS
      required:
      - image
      - finish_reason
    StabilityImageGenrationSD3_Response_400:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
    StabilityImageGenrationSD3_Response_413:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: 4212a4b66fbe1cedca4bf2133d35dca5
        name: payload_too_large
        errors:
        - 'body: payloads cannot be larger than 10MiB in size'
    StabilityImageGenrationSD3_Response_422:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
    StabilityImageGenrationSD3_Response_429:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: rate_limit_exceeded
        name: rate_limit_exceeded
        errors:
        - You have exceeded the rate limit of 150 requests within a 10 second period,
          and have been timed out for 60 seconds.
    StabilityImageGenrationSD3_Response_500:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
        name: internal_error
        errors:
        - An unexpected server error has occurred, please try again later.
    StabilityImageGenrationUpscaleConservative_Request:
      type: object
      properties:
        image:
          type: string
          description: 'The image you wish to upscale.


            Supported Formats:

            - jpeg

            - png

            - webp


            Validation Rules:

            - Every side must be at least 64 pixels

            - Total pixel count must be between 4,096 and 9,437,184 pixels

            - The aspect ratio must be between 1:2.5 and 2.5:1'
          format: binary
          example: ./some/image.png
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: 'What you wish to see in the output image. A strong, descriptive
            prompt that clearly defines

            elements, colors, and subjects will lead to better results.


            To control the weight of a given word use the format `(word:weight)`,

            where `word` is the word you''d like to control the weight of and `weight`

            is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3)
            and (green:0.8)`

            would convey a sky that was blue and green, but more green than blue.'
        negative_prompt:
          type: string
          maxLength: 10000
          description: 'A blurb of text describing what you **do not** wish to see
            in the output image.

            This is an advanced feature.'
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: A specific value that is used to guide the 'randomness' of
            the generation. (Omit this parameter or pass `0` to use a random seed.)
        output_format:
          type: string
          enum:
          - jpeg
          - png
          - webp
          default: png
          description: Dictates the `content-type` of the generated image.
        creativity:
          $ref: '#/components/schemas/StabilityCreativity'
      required:
      - image
      - prompt
    StabilityImageGenrationUpscaleConservative_Response_200:
      type: object
      properties:
        image:
          type: string
          description: The generated image, encoded to base64.
          example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: The seed used as random noise for this generation.
          example: 343940597
        finish_reason:
          type: string
          enum:
          - SUCCESS
          - CONTENT_FILTERED
          description: 'The reason the generation finished.


            - `SUCCESS` = successful generation.

            - `CONTENT_FILTERED` = successful generation, however the output violated
            our content moderation

            policy and has been blurred as a result.'
          example: SUCCESS
      required:
      - image
      - finish_reason
    StabilityImageGenrationUpscaleConservative_Response_400:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
    StabilityImageGenrationUpscaleConservative_Response_413:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: 4212a4b66fbe1cedca4bf2133d35dca5
        name: payload_too_large
        errors:
        - 'body: payloads cannot be larger than 10MiB in size'
    StabilityImageGenrationUpscaleConservative_Response_422:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
    StabilityImageGenrationUpscaleConservative_Response_429:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: rate_limit_exceeded
        name: rate_limit_exceeded
        errors:
        - You have exceeded the rate limit of 150 requests within a 10 second period,
          and have been timed out for 60 seconds.
    StabilityImageGenrationUpscaleConservative_Response_500:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
        name: internal_error
        errors:
        - An unexpected server error has occurred, please try again later.
    StabilityImageGenrationUpscaleCreative_Request:
      type: object
      properties:
        image:
          type: string
          description: 'The image you wish to upscale.


            Supported Formats:

            - jpeg

            - png

            - webp


            Validation Rules:

            - Every side must be at least 64 pixels

            - Total pixel count must be between 4,096 and 1,048,576 pixels'
          format: binary
          example: ./some/image.png
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
          description: 'What you wish to see in the output image. A strong, descriptive
            prompt that clearly defines

            elements, colors, and subjects will lead to better results.


            To control the weight of a given word use the format `(word:weight)`,

            where `word` is the word you''d like to control the weight of and `weight`

            is a value between 0 and 1. For example: `The sky was a crisp (blue:0.3)
            and (green:0.8)`

            would convey a sky that was blue and green, but more green than blue.'
        negative_prompt:
          type: string
          maxLength: 10000
          description: 'A blurb of text describing what you **do not** wish to see
            in the output image.

            This is an advanced feature.'
        output_format:
          type: string
          enum:
          - jpeg
          - png
          - webp
          default: png
          description: Dictates the `content-type` of the generated image.
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: A specific value that is used to guide the 'randomness' of
            the generation. (Omit this parameter or pass `0` to use a random seed.)
        creativity:
          type: number
          minimum: 0.1
          maximum: 0.5
          default: 0.3
          description: 'Indicates how creative the model should be when upscaling
            an image.

            Higher values will result in more details being added to the image during
            upscaling.'
        style_preset:
          type: string
          enum:
          - enhance
          - anime
          - photographic
          - digital-art
          - comic-book
          - fantasy-art
          - line-art
          - analog-film
          - neon-punk
          - isometric
          - low-poly
          - origami
          - modeling-compound
          - cinematic
          - 3d-model
          - pixel-art
          - tile-texture
          description: Guides the image model towards a particular style.
      required:
      - image
      - prompt
    StabilityImageGenrationUpscaleCreative_Response_200:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/StabilityGenerationID'
      required:
      - id
    StabilityImageGenrationUpscaleCreative_Response_400:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
    StabilityImageGenrationUpscaleCreative_Response_413:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: 4212a4b66fbe1cedca4bf2133d35dca5
        name: payload_too_large
        errors:
        - 'body: payloads cannot be larger than 10MiB in size'
    StabilityImageGenrationUpscaleCreative_Response_422:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
    StabilityImageGenrationUpscaleCreative_Response_429:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: rate_limit_exceeded
        name: rate_limit_exceeded
        errors:
        - You have exceeded the rate limit of 150 requests within a 10 second period,
          and have been timed out for 60 seconds.
    StabilityImageGenrationUpscaleCreative_Response_500:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
        name: internal_error
        errors:
        - An unexpected server error has occurred, please try again later.
    StabilityImageGenrationUpscaleFast_Request:
      type: object
      properties:
        image:
          type: string
          description: 'The image you wish to upscale.


            Supported Formats:

            - jpeg

            - png

            - webp


            Validation Rules:

            - Width must be between 32 and 1,536 pixels

            - Height must be between 32 and 1,536 pixels

            - Total pixel count must be between 1,024 and 1,048,576 pixels'
          format: binary
          example: ./some/image.png
        output_format:
          type: string
          enum:
          - jpeg
          - png
          - webp
          default: png
          description: Dictates the `content-type` of the generated image.
      required:
      - image
    StabilityImageGenrationUpscaleFast_Response_200:
      type: object
      properties:
        image:
          type: string
          description: The generated image, encoded to base64.
          example: AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1...
        seed:
          type: number
          minimum: 0
          maximum: 4294967294
          default: 0
          description: The seed used as random noise for this generation.
          example: 343940597
        finish_reason:
          type: string
          enum:
          - SUCCESS
          - CONTENT_FILTERED
          description: 'The reason the generation finished.


            - `SUCCESS` = successful generation.

            - `CONTENT_FILTERED` = successful generation, however the output violated
            our content moderation

            policy and has been blurred as a result.'
          example: SUCCESS
      required:
      - image
      - finish_reason
    StabilityImageGenrationUpscaleFast_Response_400:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
    StabilityImageGenrationUpscaleFast_Response_413:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: 4212a4b66fbe1cedca4bf2133d35dca5
        name: payload_too_large
        errors:
        - 'body: payloads cannot be larger than 10MiB in size'
    StabilityImageGenrationUpscaleFast_Response_422:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
    StabilityImageGenrationUpscaleFast_Response_429:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: rate_limit_exceeded
        name: rate_limit_exceeded
        errors:
        - You have exceeded the rate limit of 150 requests within a 10 second period,
          and have been timed out for 60 seconds.
    StabilityGetResultResponse_202:
      type: object
      properties:
        status:
          type: string
          enum:
          - in-progress
        id:
          type: string
          description: The ID of the generation result.
          example: 1234567890
    APIKey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        key_prefix:
          type: string
        created_at:
          type: string
          format: date-time
    APIKeyWithPlaintext:
      allOf:
        - $ref: '#/components/schemas/APIKey'
        - type: object
          properties:
            plaintext_key:
              type: string
              description: The full API key (only returned at creation)
    GeminiGenerateContentRequest:
      type: object
      required: [ contents ]
      properties:
        contents:
          type: array
          items:
            $ref: "#/components/schemas/GeminiContent"
        tools:
          type: array
          items:
            $ref: "#/components/schemas/GeminiTool"
        safetySettings:
          type: array
          items:
            $ref: "#/components/schemas/GeminiSafetySetting"
        generationConfig:
          $ref: "#/components/schemas/GeminiGenerationConfig"
        systemInstruction:
          $ref: "#/components/schemas/GeminiSystemInstructionContent"
        videoMetadata:
          $ref: "#/components/schemas/GeminiVideoMetadata"
    GeminiGenerateContentResponse:
      type: object
      properties:
        candidates:
          type: array
          items:
            $ref: "#/components/schemas/GeminiCandidate"
        promptFeedback:
          $ref: "#/components/schemas/GeminiPromptFeedback"
        usageMetadata:
          $ref: "#/components/schemas/GeminiUsageMetadata"
    GeminiUsageMetadata:
      type: object
      properties:
        promptTokenCount:
          type: integer
          description: Number of tokens in the request. When cachedContent is set, this is still the total effective prompt size meaning this includes the number of tokens in the cached content.
        candidatesTokenCount:
          type: integer
          description: Number of tokens in the response(s).
        toolUsePromptTokenCount:
          type: integer
          description: Number of tokens present in tool-use prompt(s).
        thoughtsTokenCount:
          type: integer
          description: Number of tokens present in thoughts output.
        cachedContentTokenCount:
          type: integer
          description: Output only. Number of tokens in the cached part in the input (the cached content).
        promptTokensDetails:
          type: array
          items:
            $ref: '#/components/schemas/ModalityTokenCount'
          description: Breakdown of prompt tokens by modality.
        candidatesTokensDetails:
          type: array
          items:
            $ref: '#/components/schemas/ModalityTokenCount'
          description: Breakdown of candidate tokens by modality.
    ModalityTokenCount:
      type: object
      properties:
        modality:
          $ref: '#/components/schemas/Modality'
        tokenCount:
          type: integer
          description: Number of tokens for the given modality.
    Modality:
      type: string
      enum:
        - MODALITY_UNSPECIFIED
        - TEXT
        - IMAGE
        - VIDEO
        - AUDIO
        - DOCUMENT
      description: Type of input or output content modality.
    GeminiSystemInstructionContent:
      type: object
      required: [ role, parts ]
      description: |
        Available for gemini-2.0-flash and gemini-2.0-flash-lite. Instructions for the model to steer it toward better performance. For example, "Answer as concisely as possible" or "Don't use technical terms in your response". The text strings count toward the token limit. The role field of systemInstruction is ignored and doesn't affect the performance of the model. Note: Only text should be used in parts and content in each part should be in a separate paragraph.
      properties:
        role:
          type: string
          description: |
            The identity of the entity that creates the message. The following values are supported: user: This indicates that the message is sent by a real person, typically a user-generated message. model: This indicates that the message is generated by the model. The model value is used to insert messages from the model into the conversation during multi-turn conversations. For non-multi-turn conversations, this field can be left blank or unset.
          enum:
            - user
            - model
          example: "user"
        parts:
          type: array
          description: |
            A list of ordered parts that make up a single message. Different parts may have different IANA MIME types. For limits on the inputs, such as the maximum number of tokens or the number of images, see the model specifications on the Google models page.
          items:
            $ref: "#/components/schemas/GeminiTextPart"
    GeminiContent:
      type: object
      required: [ role, parts ]
      description: |
        The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history and the latest request.
      properties:
        role:
          type: string
          enum:
            - user
            - model
          example: "user"
        parts:
          type: array
          items:
            $ref: "#/components/schemas/GeminiPart"
    GeminiTool:
      type: object
      description: |
        A piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. See Function calling.
      properties:
        functionDeclarations:
          type: array
          items:
            $ref: "#/components/schemas/GeminiFunctionDeclaration"
    GeminiSafetySetting:
      type: object
      description: |
        Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.
      required: [ category, threshold ]
      properties:
        category:
          $ref: "#/components/schemas/GeminiSafetyCategory"
        threshold:
          $ref: "#/components/schemas/GeminiSafetyThreshold"
    GeminiSafetyCategory:
      type: string
      enum:
        - HARM_CATEGORY_SEXUALLY_EXPLICIT
        - HARM_CATEGORY_HATE_SPEECH
        - HARM_CATEGORY_HARASSMENT
        - HARM_CATEGORY_DANGEROUS_CONTENT
    GeminiSafetyThreshold:
      type: string
      enum:
        - OFF
        - BLOCK_NONE
        - BLOCK_LOW_AND_ABOVE
        - BLOCK_MEDIUM_AND_ABOVE
        - BLOCK_ONLY_HIGH
    GeminiGenerationConfig:
      type: object
      properties:
        temperature:
          type: number
          format: float
          description: |
            The temperature is used for sampling during response generation, which occurs when topP and topK are applied. Temperature controls the degree of randomness in token selection. Lower temperatures are good for prompts that require a less open-ended or creative response, while higher temperatures can lead to more diverse or creative results. A temperature of 0 means that the highest probability tokens are always selected. In this case, responses for a given prompt are mostly deterministic, but a small amount of variation is still possible. If the model returns a response that's too generic, too short, or the model gives a fallback response, try increasing the temperature
          default: 1
          minimum: 0
          maximum: 2
        topP:
          type: number
          format: float
          description: |
            If specified, nucleus sampling is used.
            Top-P changes how the model selects tokens for output. Tokens are selected from the most (see top-K) to least probable until the sum of their probabilities equals the top-P value. For example, if tokens A, B, and C have a probability of 0.3, 0.2, and 0.1 and the top-P value is 0.5, then the model will select either A or B as the next token by using temperature and excludes C as a candidate.
            Specify a lower value for less random responses and a higher value for more random responses.
          default: 0.95
          minimum: 0
          maximum: 1
        topK:
          type: integer
          description: |
            Top-K changes how the model selects tokens for output. A top-K of 1 means the next selected token is the most probable among all tokens in the model's vocabulary. A top-K of 3 means that the next token is selected from among the 3 most probable tokens by using temperature.
          default: 40
          minimum: 1
          example: 40
        maxOutputTokens:
          type: integer
          description: |
            Maximum number of tokens that can be generated in the response. A token is approximately 4 characters. 100 tokens correspond to roughly 60-80 words.
          minimum: 16
          maximum: 8192
          example: 2048
        seed:
          type: integer
          description: |
            When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. Deterministic output isn't guaranteed. Also, changing the model or parameter settings, such as the temperature, can cause variations in the response even when you use the same seed value. By default, a random seed value is used. Available for the following models:, gemini-2.5-flash-preview-04-1, gemini-2.5-pro-preview-05-0, gemini-2.0-flash-lite-00, gemini-2.0-flash-001
          example: 343940597
        stopSequences:
          type: array
          items:
            type: string
    GeminiVideoMetadata:
      type: object
      description: |
        For video input, the start and end offset of the video in Duration format. For example, to specify a 10 second clip starting at 1:00, set "startOffset": { "seconds": 60 } and "endOffset": { "seconds": 70 }. The metadata should only be specified while the video data is presented in inlineData or fileData.
      properties:
        startOffset:
          $ref: "#/components/schemas/GeminiOffset"
        endOffset:
          $ref: "#/components/schemas/GeminiOffset"
    GeminiOffset:
      type: object
      description: |
        Represents a duration offset for video timeline positions.
      properties:
        seconds:
          type: integer
          description: |
            Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive.
          minimum: -315576000000
          maximum: 315576000000
          example: 60
        nanos:
          type: integer
          description: |
            Signed fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values.
          minimum: 0
          maximum: 999999999
          example: 0
    GeminiCandidate:
      type: object
      properties:
        content:
          $ref: "#/components/schemas/GeminiContent"
        finishReason:
          type: string
        safetyRatings:
          type: array
          items:
            $ref: "#/components/schemas/GeminiSafetyRating"
        citationMetadata:
          $ref: "#/components/schemas/GeminiCitationMetadata"
    GeminiMimeType:
      type: string
      description: The media type of the file specified in the data or fileUri fields. Acceptable values include the following. For gemini-2.0-flash-lite and gemini-2.0-flash, the maximum length of an audio file is 8.4 hours and the maximum length of a video file (without audio) is one hour. For more information, see Gemini audio and video requirements. Text files must be UTF-8 encoded. The contents of the text file count toward the token limit. There is no limit on image resolution.
      enum:
        - application/pdf
        - audio/mpeg
        - audio/mp3
        - audio/wav
        - image/png
        - image/jpeg
        - image/webp
        - text/plain
        - video/mov
        - video/mpeg
        - video/mp4
        - video/mpg
        - video/avi
        - video/wmv
        - video/mpegps
        - video/flv
    GeminiPromptFeedback:
      type: object
      properties:
        safetyRatings:
          type: array
          items:
            $ref: "#/components/schemas/GeminiSafetyRating"
        blockReason:
          type: string
        blockReasonMessage:
          type: string
    GeminiTextPart:
      type: object
      properties:
        text:
          type: string
          description: A text prompt or code snippet.
          example: "Answer as concisely as possible"
    GeminiPart:
      type: object
      properties:
        text:
          type: string
          description: A text prompt or code snippet.
          example: "Write a story about a robot learning to paint"
        inlineData:
          $ref: "#/components/schemas/GeminiInlineData"
    GeminiFunctionDeclaration:
      type: object
      required: [ name, parameters ]
      properties:
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
          description: JSON schema for the function parameters
    GeminiSafetyRating:
      type: object
      properties:
        category:
          $ref: "#/components/schemas/GeminiSafetyCategory"
        probability:
          type: string
          enum:
            - NEGLIGIBLE
            - LOW
            - MEDIUM
            - HIGH
            - UNKNOWN
          description: The probability that the content violates the specified safety category
    GeminiCitationMetadata:
      type: object
      properties:
        citations:
          type: array
          items:
            $ref: "#/components/schemas/GeminiCitation"
    GeminiInlineData:
      type: object
      description: |
        Inline data in raw bytes. For gemini-2.0-flash-lite and gemini-2.0-flash, you can specify up to 3000 images by using inlineData.
      properties:
        mimeType:
          $ref: "#/components/schemas/GeminiMimeType"
        data:
          type: string
          description: |
            The base64 encoding of the image, PDF, or video to include inline in the prompt. When including media inline, you must also specify the media type (mimeType) of the data. Size limit: 20MB
          format: byte
    GeminiCitation:
      type: object
      properties:
        startIndex:
          type: integer
        endIndex:
          type: integer
        uri:
          type: string
        title:
          type: string
        license:
          type: string
        publicationDate:
          type: string
          format: date
        authors:
          type: array
          items:
            type: string
    Rodin3DGenerateRequest:
      type: object
      required:
        - images
      properties:
        images:
          type: string
          description: The reference images to generate 3D Assets.
        seed:
          type: integer
          description: Seed.
        tier:
          $ref: "#/components/schemas/RodinTierType"
        material:
          $ref: "#/components/schemas/RodinMaterialType"
        quality:
          $ref: "#/components/schemas/RodinQualityType"
        mesh_mode:
          $ref: "#/components/schemas/RodinMeshModeType"
    RodinTierType:
      type: string
      description: Rodin Tier para options
      enum: [ Regular, Sketch, Detail, Smooth ]
    RodinMaterialType:
      type: string
      description: Rodin Material para options
      enum: [ PBR , Shaded ]
    RodinQualityType:
      type: string
      description: Rodin Quality para options
      enum: [ extra-low, low, medium, high ]
    RodinMeshModeType:
      type: string
      description: Rodin Mesh_Mode para options
      enum: [ Quad, Raw ]
    Rodin3DCheckStatusRequest:
      type: object
      required:
        - subscription_key
      properties:
        subscription_key:
          type: string
          description: subscription from generate endpoint
    Rodin3DDownloadRequest:
      type: object
      required:
        - task_uuid
      properties:
        task_uuid:
          type: string
          description: Task UUID
    Rodin3DGenerateResponse:
      type: object
      properties:
        message:
          type: string
          description: message
        prompt:
          type: string
          description: prompt
        submit_time:
          type: string
          description: Time
        uuid:
          type: string
          description: Task UUID
        jobs:
          $ref: "#/components/schemas/RodinGenerateJobsData"
    RodinGenerateJobsData:
      type: object
      properties:
        uuids:
          type: array
          description: subjobs uuid.
          items:
            type: string
        subscription_key:
          type: string
          description: Subscription Key.
    Rodin3DCheckStatusResponse:
      type: object
      properties:
        jobs:
          type: array
          description: Details for the generation status.
          items:
            $ref: "#/components/schemas/RodinCheckStatusJobItem"
    RodinCheckStatusJobItem:
      type: object
      properties:
        uuid:
          type: string
          description: sub uuid
        status:
          $ref: "#/components/schemas/RodinStatusOptions"
    RodinStatusOptions:
      type: string
      enum: [ Done, Failed, Generating, Waiting ]
    Rodin3DDownloadResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/RodinResourceItem"
    RodinResourceItem:
      type: object
      properties:
        url:
          type: string
          description: Download url
        name:
          type: string
          description: File name
    CreateAPIKeyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
    StabilityImageGenrationUpscaleFast_Response_500:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          description: 'A unique identifier associated with this error. Please include
            this in any [support tickets](https://kb.stability.ai/knowledge-base/kb-tickets/new)

            you file, as it will greatly assist us in diagnosing the root cause of
            the problem.'
          example: a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4
        name:
          type: string
          minLength: 1
          description: Short-hand name for an error, useful for discriminating between
            errors with the same status code.
          example: bad_request
        errors:
          type: array
          items:
            type: string
          minItems: 1
          description: One or more error messages indicating what went wrong.
          example:
          - 'some-field: is required'
      required:
      - id
      - name
      - errors
      example:
        id: 2a1b2d4eafe2bc6ab4cd4d5c6133f513
        name: internal_error
        errors:
        - An unexpected server error has occurred, please try again later.
    ModelResponseProperties:
      type: object
      description: Common properties for model responses
      properties:
        model:
          type: string
          description: The model used to generate the response
        instructions:
          type: string
        
          description: Instructions for the model on how to generate the response
        max_output_tokens:
          type: integer
        
          description: Maximum number of tokens to generate
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          description: Controls randomness in the response
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          description: Controls diversity of the response via nucleus sampling
        truncation:
          type: string
          enum: [disabled, auto]
          default: disabled
          description: How to handle truncation of the response
    InputFileContent:
      properties:
        type:
          type: string
          enum:
            - input_file
          description: The type of the input item. Always `input_file`.
          default: input_file
          x-stainless-const: true
        file_id:
          type: string
          description: The ID of the file to be sent to the model.
        filename:
          type: string
          description: The name of the file to be sent to the model.
        file_data:
          type: string
          description: |
            The content of the file to be sent to the model.
      type: object
      required: &a1
        - type
      title: Input file
      description: A file input to the model.
    ResponseProperties:
      type: object
      properties:
        previous_response_id:
          type: string
          description: |
            The unique ID of the previous response to the model. Use this to
            create multi-turn conversations. Learn more about 
            [conversation state](/docs/guides/conversation-state).
        
        model:
          description: >
            Model ID used to generate the response, like `gpt-4o` or `o3`.
            OpenAI

            offers a wide range of models with different capabilities,
            performance

            characteristics, and price points. Refer to the [model
            guide](/docs/models)

            to browse and compare available models.
          
          $ref: '#/components/schemas/OpenAIModels'
          
        reasoning:
          $ref: "#/components/schemas/Reasoning"
        
        max_output_tokens:
          description: >
            An upper bound for the number of tokens that can be generated for a
            response, including visible output tokens and [reasoning
            tokens](/docs/guides/reasoning).
          type: integer
        
        instructions:
          type: string
          description: >
            Inserts a system (or developer) message as the first item in the
            model's context.


            When using along with `previous_response_id`, the instructions from
            a previous

            response will not be carried over to the next response. This makes
            it simple

            to swap out system (or developer) messages in new responses.
        
        text:
          type: object
          properties:
            format:
              $ref: "#/components/schemas/TextResponseFormatConfiguration"
        tools:
          type: array
          items:
            $ref: "#/components/schemas/Tool"
        tool_choice:
          description: >
            How the model should select which tool (or tools) to use when
            generating

            a response. See the `tools` parameter to see how to specify which
            tools

            the model can call.
          oneOf:
            - $ref: "#/components/schemas/ToolChoiceOptions"
            - $ref: "#/components/schemas/ToolChoiceTypes"
            - $ref: "#/components/schemas/ToolChoiceFunction"
        truncation:
          type: string
          description: >
            The truncation strategy to use for the model response.

            - `auto`: If the context of this response and previous ones exceeds
              the model's context window size, the model will truncate the 
              response to fit the context window by dropping input items in the
              middle of the conversation. 
            - `disabled` (default): If a model response will exceed the context
            window 
              size for a model, the request will fail with a 400 error.
          enum:
            - auto
            - disabled
        
          default: disabled
    TextResponseFormatConfiguration:
      description: >
        An object specifying the format that the model must output.


        Configuring `{ "type": "json_schema" }` enables Structured Outputs, 

        which ensures the model will match your supplied JSON schema. Learn more
        in the 

        [Structured Outputs guide](/docs/guides/structured-outputs).


        The default format is `{ "type": "text" }` with no additional options.


        **Not recommended for gpt-4o and newer models:**


        Setting to `{ "type": "json_object" }` enables the older JSON mode,
        which

        ensures the message the model generates is valid JSON. Using
        `json_schema`

        is preferred for models that support it.
      oneOf:
        - $ref: "#/components/schemas/ResponseFormatText"
        - $ref: "#/components/schemas/TextResponseFormatJsonSchema"
        - $ref: "#/components/schemas/ResponseFormatJsonObject"
    ResponseFormatJsonObject:
      type: object
      title: JSON object
      description: >
        JSON object response format. An older method of generating JSON
        responses.

        Using `json_schema` is recommended for models that support it. Note that
        the

        model will not generate JSON without a system or user message
        instructing it

        to do so.
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_object`.
          enum:
            - json_object
          x-stainless-const: true
      required:
        - type
    ResponseFormatJsonSchema:
      type: object
      title: JSON schema
      description: |
        JSON Schema response format. Used to generate structured JSON responses.
        Learn more about [Structured Outputs](/docs/guides/structured-outputs).
      properties:
        type:
          type: string
          default: json_schema
          x-stainless-const: true
        json_schema:
          type: object
          title: JSON schema
          description: |
            Structured Outputs configuration options, including a JSON Schema.
          properties:
            description:
              type: string
              description: >
                A description of what the response format is for, used by the
                model to

                determine how to respond in the format.
            name:
              type: string
              description: >
                The name of the response format. Must be a-z, A-Z, 0-9, or
                contain

                underscores and dashes, with a maximum length of 64.
            schema:
              $ref: "#/components/schemas/ResponseFormatJsonSchemaSchema"
            strict:
              type: boolean
              
              default: false
              description: >
                Whether to enable strict schema adherence when generating the
                output.

                If set to true, the model will always follow the exact schema
                defined

                in the `schema` field. Only a subset of JSON Schema is supported
                when

                `strict` is `true`. To learn more, read the [Structured Outputs

                guide](/docs/guides/structured-outputs).
          required:
            - name
      required:
        - type
        - json_schema
    ResponseFormatJsonSchemaSchema:
      type: object
      title: JSON schema
      description: |
        The schema for the response format, described as a JSON Schema object.
        Learn how to build JSON schemas [here](https://json-schema.org/).
      additionalProperties: true
    ResponseFormatText:
      type: object
      title: Text
      description: |
        Default response format. Used to generate text responses.
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `text`.
          enum:
            - text
          x-stainless-const: true
      required:
        - type
    TextResponseFormatJsonSchema:
      type: object
      title: JSON schema
      description: |
        JSON Schema response format. Used to generate structured JSON responses.
        Learn more about [Structured Outputs](/docs/guides/structured-outputs).
      properties:
        type:
          type: string
          description: The type of response format being defined. Always `json_schema`.
          enum:
            - json_schema
          x-stainless-const: true
        description:
          type: string
          description: >
            A description of what the response format is for, used by the model
            to

            determine how to respond in the format.
        name:
          type: string
          description: |
            The name of the response format. Must be a-z, A-Z, 0-9, or contain
            underscores and dashes, with a maximum length of 64.
        schema:
          $ref: "#/components/schemas/ResponseFormatJsonSchemaSchema"
        strict:
          type: boolean
          default: false
          description: >
            Whether to enable strict schema adherence when generating the
            output.

            If set to true, the model will always follow the exact schema
            defined

            in the `schema` field. Only a subset of JSON Schema is supported
            when

            `strict` is `true`. To learn more, read the [Structured Outputs

            guide](/docs/guides/structured-outputs).
      required:
        - type
        - schema
        - name
    
    Reasoning:
      type: object
      description: |
        **o-series models only**

        Configuration options for 
        [reasoning models](https://platform.openai.com/docs/guides/reasoning).
      title: Reasoning
      properties:
        effort:
          $ref: "#/components/schemas/ReasoningEffort"
        summary:
          type: string
          description: >
            A summary of the reasoning performed by the model. This can be

            useful for debugging and understanding the model's reasoning
            process.

            One of `auto`, `concise`, or `detailed`.
          enum:
            - auto
            - concise
            - detailed
        
        generate_summary:
          type: string
          deprecated: true
          description: >
            **Deprecated:** use `summary` instead.


            A summary of the reasoning performed by the model. This can be

            useful for debugging and understanding the model's reasoning
            process.

            One of `auto`, `concise`, or `detailed`.
          enum:
            - auto
            - concise
            - detailed
    ReasoningEffort:
      type: string
      enum:
        - low
        - medium
        - high
      default: medium
      description: |
        **o-series models only** 

        Constrains effort on reasoning for 
        [reasoning models](https://platform.openai.com/docs/guides/reasoning).
        Currently supported values are `low`, `medium`, and `high`. Reducing
        reasoning effort can result in faster responses and fewer tokens used
        on reasoning in a response.
    WebSearchPreviewTool:
      properties:
        type:
          type: string
          enum:
            - web_search_preview
            - web_search_preview_2025_03_11
          description: The type of the web search tool. One of `web_search_preview` or
            `web_search_preview_2025_03_11`.
          default: web_search_preview
          x-stainless-const: true
        search_context_size:
          type: string
          enum:
            - low
            - medium
            - high
          description: High level guidance for the amount of context window space to use
            for the search. One of `low`, `medium`, or `high`. `medium` is the
            default.
      type: object
      required: *a1
      title: Web search preview
      description: This tool searches the web for relevant results to use in a
        response. Learn more about the [web search
        tool](https://platform.openai.com/docs/guides/tools-web-search).
    ComputerUsePreviewTool:
      properties:
        type:
          type: string
          enum:
            - computer_use_preview
          description: The type of the computer use tool. Always `computer_use_preview`.
          default: computer_use_preview
          x-stainless-const: true
        environment:
          type: string
          enum:
            - windows
            - mac
            - linux
            - ubuntu
            - browser
          description: The type of computer environment to control.
        display_width:
          type: integer
          description: The width of the computer display.
        display_height:
          type: integer
          description: The height of the computer display.
      type: object
      required:
        - type
        - environment
        - display_width
        - display_height
      title: Computer use preview
      description: A tool that controls a virtual computer. Learn more about the
        [computer
        tool](https://platform.openai.com/docs/guides/tools-computer-use).
    Tool:
      oneOf:
        - $ref: "#/components/schemas/FileSearchTool"
        - $ref: "#/components/schemas/FunctionTool"
        - $ref: "#/components/schemas/WebSearchPreviewTool"
        - $ref: "#/components/schemas/ComputerUsePreviewTool"
      discriminator:
        propertyName: type
    ResponseErrorEvent:
      type: object
      description: Emitted when an error occurs.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `error`.
          enum:
            - error
          x-stainless-const: true
        code:
          type: string
          description: |
            The error code.
        
        message:
          type: string
          description: |
            The error message.
        param:
          type: string
          description: |
            The error parameter.
        
      required:
        - type
        - code
        - message
        - param
    ResponseOutputItemAddedEvent:
      type: object
      description: Emitted when a new output item is added.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_item.added`.
          enum:
            - response.output_item.added
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that was added.
        item:
          $ref: "#/components/schemas/OutputItem"
          description: |
            The output item that was added.
      required:
        - type
        - output_index
        - item
    ResponseOutputItemDoneEvent:
      type: object
      description: Emitted when an output item is marked done.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.output_item.done`.
          enum:
            - response.output_item.done
          x-stainless-const: true
        output_index:
          type: integer
          description: |
            The index of the output item that was marked done.
        item:
          $ref: "#/components/schemas/OutputItem"
          description: |
            The output item that was marked done.
      required:
        - type
        - output_index
        - item
    ToolChoiceFunction:
      type: object
      title: Function tool
      description: |
        Use this option to force the model to call a specific function.
      properties:
        type:
          type: string
          enum:
            - function
          description: For function calling, the type is always `function`.
          x-stainless-const: true
        name:
          type: string
          description: The name of the function to call.
      required:
        - type
        - name
    ToolChoiceOptions:
      type: string
      title: Tool choice mode
      description: >
        Controls which (if any) tool is called by the model.


        `none` means the model will not call any tool and instead generates a
        message.


        `auto` means the model can pick between generating a message or calling
        one or

        more tools.


        `required` means the model must call one or more tools.
      enum:
        - none
        - auto
        - required
    ToolChoiceTypes:
      type: object
      title: Hosted tool
      description: >
        Indicates that the model should use a built-in tool to generate a
        response.

        [Learn more about built-in tools](/docs/guides/tools).
      properties:
        type:
          type: string
          description: |
            The type of hosted tool the model should to use. Learn more about
            [built-in tools](/docs/guides/tools).

            Allowed values are:
            - `file_search`
            - `web_search_preview`
            - `computer_use_preview`
          enum:
            - file_search
            - web_search_preview
            - computer_use_preview
            - web_search_preview_2025_03_11
      required:
        - type
    
    ResponseFailedEvent:
      type: object
      description: |
        An event that is emitted when a response fails.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.failed`.
          enum:
            - response.failed
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/OpenAIResponse"
          description: |
            The response that failed.
      required:
        - type
        - response
    ResponseInProgressEvent:
      type: object
      description: Emitted when the response is in progress.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.in_progress`.
          enum:
            - response.in_progress
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/OpenAIResponse"
          description: |
            The response that is in progress.
      required:
        - type
        - response
    ResponseIncompleteEvent:
      type: object
      description: |
        An event that is emitted when a response finishes as incomplete.
      properties:
        type:
          type: string
          description: |
            The type of the event. Always `response.incomplete`.
          enum:
            - response.incomplete
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/OpenAIResponse"
          description: |
            The response that was incomplete.
      required:
        - type
        - response
    ResponseCreatedEvent:
      type: object
      description: An event that is emitted when a response is created.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.created`.
          enum:
            - response.created
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/OpenAIResponse"
          description: The response that was created.
      required:
        - type
        - response

    ResponseCompletedEvent:
      type: object
      description: Emitted when the model response is complete.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.completed`.
          enum:
            - response.completed
          x-stainless-const: true
        response:
          $ref: "#/components/schemas/OpenAIResponse"
          description: Properties of the completed response.
      required:
        - type
        - response

    ResponseContentPartAddedEvent:
      type: object
      description: Emitted when a new content part is added.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.content_part.added`.
          enum:
            - response.content_part.added
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the output item that the content part was added to.
        output_index:
          type: integer
          description: The index of the output item that the content part was added to.
        content_index:
          type: integer
          description: The index of the content part that was added.
        part:
          $ref: "#/components/schemas/OutputContent"
          description: The content part that was added.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - part

    
    ResponseContentPartDoneEvent:
      type: object
      description: Emitted when a content part is done.
      properties:
        type:
          type: string
          description: The type of the event. Always `response.content_part.done`.
          enum:
            - response.content_part.done
          x-stainless-const: true
        item_id:
          type: string
          description: The ID of the output item that the content part was added to.
        output_index:
          type: integer
          description: The index of the output item that the content part was added to.
        content_index:
          type: integer
          description: The index of the content part that is done.
        part:
          $ref: "#/components/schemas/OutputContent"
          description: The content part that is done.
      required:
        - type
        - item_id
        - output_index
        - content_index
        - part
    ResponseTool:
      oneOf:
        - $ref: "#/components/schemas/WebSearchTool"
        - $ref: "#/components/schemas/FileSearchTool"
        - $ref: "#/components/schemas/FunctionTool"

    WebSearchTool:
      type: object
      properties:
        type:
          type: string
          enum: [web_search]
          description: The type of tool
        domains:
          type: array
          items:
            type: string
          description: Optional list of domains to restrict search to
      required:
        - type

    FileSearchTool:
      type: object
      properties:
        type:
          type: string
          enum: [file_search]
          description: The type of tool
        vector_store_ids:
          type: array
          items:
            type: string
          description: IDs of vector stores to search in
      required:
        - type
        - vector_store_ids

    FunctionTool:
      type: object
      properties:
        type:
          type: string
          enum: [function]
          description: The type of tool
        name:
          type: string
          description: Name of the function
        description:
          type: string
          description: Description of what the function does
        parameters:
          type: object
          description: JSON Schema object describing the function parameters
      required:
        - type
        - name
        - parameters

    OutputItem:
      oneOf:
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/FileSearchToolCall"
        - $ref: "#/components/schemas/FunctionToolCall"
        - $ref: "#/components/schemas/WebSearchToolCall"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/ReasoningItem"
    WebSearchToolCall:
      type: object
      title: Web search tool call
      description: |
        The results of a web search tool call. See the 
        [web search guide](/docs/guides/tools-web-search) for more information.
      properties:
        id:
          type: string
          description: |
            The unique ID of the web search tool call.
        type:
          type: string
          enum:
            - web_search_call
          description: |
            The type of the web search tool call. Always `web_search_call`.
          x-stainless-const: true
        status:
          type: string
          description: |
            The status of the web search tool call.
          enum:
            - in_progress
            - searching
            - completed
            - failed
      required:
        - id
        - type
        - status
    
    FileSearchToolCall:
      type: object
      title: File search tool call
      description: >
        The results of a file search tool call. See the 

        [file search guide](/docs/guides/tools-file-search) for more
        information.
      properties:
        id:
          type: string
          description: |
            The unique ID of the file search tool call.
        type:
          type: string
          enum:
            - file_search_call
          description: |
            The type of the file search tool call. Always `file_search_call`.
          x-stainless-const: true
        status:
          type: string
          description: |
            The status of the file search tool call. One of `in_progress`, 
            `searching`, `incomplete` or `failed`,
          enum:
            - in_progress
            - searching
            - completed
            - incomplete
            - failed
        queries:
          type: array
          items:
            type: string
          description: |
            The queries used to search for files.
        results:
          type: array
          description: |
            The results of the file search tool call.
          items:
            type: object
            properties:
              file_id:
                type: string
                description: |
                  The unique ID of the file.
              text:
                type: string
                description: |
                  The text that was retrieved from the file.
              filename:
                type: string
                description: |
                  The name of the file.
              score:
                type: number
                format: float
                description: |
                  The relevance score of the file - a value between 0 and 1.
        
      required:
        - id
        - type
        - status
        - queries
    FunctionToolCall:
      type: object
      title: Function tool call
      description: >
        A tool call to run a function. See the 

        [function calling guide](/docs/guides/function-calling) for more
        information.
      properties:
        id:
          type: string
          description: |
            The unique ID of the function tool call.
        type:
          type: string
          enum:
            - function_call
          description: |
            The type of the function tool call. Always `function_call`.
          x-stainless-const: true
        call_id:
          type: string
          description: |
            The unique ID of the function tool call generated by the model.
        name:
          type: string
          description: |
            The name of the function to run.
        arguments:
          type: string
          description: |
            A JSON string of the arguments to pass to the function.
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - call_id
        - name
        - arguments
    
    OutputMessage:
      type: object
      properties:
        type:
          type: string
          enum: [message]
          description: The type of output item
        role:
          type: string
          enum: [assistant]
          description: The role of the message
        content:
          type: array
          items:
            $ref: "#/components/schemas/OutputContent"
          description: The content of the message
      required:
        - type
        - role
        - content

    OutputContent:
      oneOf:
        - $ref: "#/components/schemas/OutputTextContent"
        - $ref: "#/components/schemas/OutputAudioContent"

    OutputTextContent:
      type: object
      properties:
        type:
          type: string
          enum: [output_text]
          description: The type of output content
        text:
          type: string
          description: The text content
      required:
        - type
        - text

    OutputAudioContent:
      type: object
      properties:
        type:
          type: string
          enum: [output_audio]
          description: The type of output content
        data:
          type: string
          description: Base64-encoded audio data
        transcript:
          type: string
          description: Transcript of the audio
      required:
        - type
        - data
        - transcript

    ResponseUsage:
      type: object
      description: |
        Represents token usage details including input tokens, output tokens,
        a breakdown of output tokens, and the total tokens used.
      properties:
        input_tokens:
          type: integer
          description: The number of input tokens.
        input_tokens_details:
          type: object
          description: A detailed breakdown of the input tokens.
          properties:
            cached_tokens:
              type: integer
              description: |
                The number of tokens that were retrieved from the cache. 
                [More on prompt caching](/docs/guides/prompt-caching).
          required:
            - cached_tokens
        output_tokens:
          type: integer
          description: The number of output tokens.
        output_tokens_details:
          type: object
          description: A detailed breakdown of the output tokens.
          properties:
            reasoning_tokens:
              type: integer
              description: The number of reasoning tokens.
          required:
            - reasoning_tokens
        total_tokens:
          type: integer
          description: The total number of tokens used.
      required:
        - input_tokens
        - input_tokens_details
        - output_tokens
        - output_tokens_details
        - total_tokens
    OpenAIResponse:
      type: object
      description: A response from the model
      allOf:
        - $ref: "#/components/schemas/ModelResponseProperties"
        - $ref: "#/components/schemas/ResponseProperties"
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for this Response.
            object:
              type: string
              description: The object type of this resource - always set to `response`.
              enum:
                - response
              x-stainless-const: true
            status:
              type: string
              description: The status of the response generation. One of `completed`, `failed`, `in_progress`, or `incomplete`.
              enum:
                - completed
                - failed
                - in_progress
                - incomplete
            created_at:
              type: number
              description: Unix timestamp (in seconds) of when this Response was created.
            error:
              $ref: "#/components/schemas/ResponseError"
            incomplete_details:
              type: object
              nullable: true
              description: |
                Details about why the response is incomplete.
              properties:
                reason:
                  type: string
                  description: The reason why the response is incomplete.
                  enum:
                    - max_output_tokens
                    - content_filter
            output:
              type: array
              description: >
                An array of content items generated by the model.


                - The length and order of items in the `output` array is
                dependent
                  on the model's response.
                - Rather than accessing the first item in the `output` array
                and 
                  assuming it's an `assistant` message with the content generated by
                  the model, you might consider using the `output_text` property where
                  supported in SDKs.
              items:
                $ref: "#/components/schemas/OutputItem"
            output_text:
              type: string
              nullable: true
              description: >
                SDK-only convenience property that contains the aggregated text
                output 

                from all `output_text` items in the `output` array, if any are
                present. 

                Supported in the Python and JavaScript SDKs.
              x-oaiSupportedSDKs:
                - python
                - javascript
            usage:
              $ref: "#/components/schemas/ResponseUsage"
            parallel_tool_calls:
              type: boolean
              description: |
                Whether to allow the model to run tool calls in parallel.
              default: true

    ResponseError:
      type: object
      description: An error object returned when the model fails to generate a Response.
    
      properties:
        code:
          $ref: "#/components/schemas/ResponseErrorCode"
        message:
          type: string
          description: A human-readable description of the error.
      required:
        - code
        - message

    ResponseErrorCode:
      type: string
      description: The error code for the response.
      enum:
        - server_error
        - rate_limit_exceeded
        - invalid_prompt
        - vector_store_timeout
        - invalid_image
        - invalid_image_format
        - invalid_base64_image
        - invalid_image_url
        - image_too_large
        - image_too_small
        - image_parse_error
        - image_content_policy_violation
        - invalid_image_mode
        - image_file_too_large
        - unsupported_image_media_type
        - empty_image_file
        - failed_to_download_image
        - image_file_not_found

    OpenAIResponseStreamEvent:
      type: object
      description: Events that can be emitted during response streaming
      anyOf:
        - $ref: "#/components/schemas/ResponseCreatedEvent"
        - $ref: "#/components/schemas/ResponseInProgressEvent"
        - $ref: "#/components/schemas/ResponseCompletedEvent"
        - $ref: "#/components/schemas/ResponseFailedEvent"
        - $ref: "#/components/schemas/ResponseIncompleteEvent"
        - $ref: "#/components/schemas/ResponseOutputItemAddedEvent"
        - $ref: "#/components/schemas/ResponseOutputItemDoneEvent"
        - $ref: "#/components/schemas/ResponseContentPartAddedEvent"
        - $ref: "#/components/schemas/ResponseContentPartDoneEvent"
        - $ref: "#/components/schemas/ResponseErrorEvent"

    InputMessage:
      type: object
      properties:
        type:
          type: string
          enum:
            - message
        role:
          type: string
          enum:
            - user
            - system
            - developer
        status:
          type: string
          enum:
            - in_progress
            - completed
            - incomplete
        content:
          $ref: "#/components/schemas/InputMessageContentList"
    InputMessageContentList:
      type: array
      title: Input item content list
      description: >
        A list of one or many input items to the model, containing different
        content 

        types.
      items:
        $ref: "#/components/schemas/InputContent"
    InputContent:
      oneOf:
        - $ref: "#/components/schemas/InputTextContent"
        - $ref: "#/components/schemas/InputImageContent"
        - $ref: "#/components/schemas/InputFileContent"
    InputTextContent:
      properties:
        type:
          type: string
          enum:
            - input_text
          description: The type of the input item. Always `input_text`.
          default: input_text
          x-stainless-const: true
        text:
          type: string
          description: The text input to the model.
      type: object
      required:
        - type
        - text
      title: Input text
      description: A text input to the model.
    InputImageContent:
      properties:
        type:
          type: string
          enum:
            - input_image
          description: The type of the input item. Always `input_image`.
          default: input_image
          x-stainless-const: true
        image_url:
          type: string
          description: The URL of the image to be sent to the model. A fully qualified URL
                or base64 encoded image in a data URL.
        file_id:
          type: string
          description: The ID of the file to be sent to the model.
        detail:
          type: string
          enum:
            - low
            - high
            - auto
          description: The detail level of the image to be sent to the model. One of
            `high`, `low`, or `auto`. Defaults to `auto`.
      type: object
      required:
        - type
        - detail
      title: Input image
      description: An image input to the model. Learn about [image
        inputs](/docs/guides/vision).
    
    InputMessageResource:
      allOf:
        - $ref: "#/components/schemas/InputMessage"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the message input.
          required:
            - id
    ItemResource:
      description: |
        Content item used to generate a response.
      oneOf:
        - $ref: "#/components/schemas/InputMessageResource"
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/FileSearchToolCall"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/WebSearchToolCall"
        - $ref: "#/components/schemas/FunctionToolCallResource"
      discriminator:
        propertyName: type
    FunctionToolCallResource:
      allOf:
        - $ref: "#/components/schemas/FunctionToolCall"
        - type: object
          properties:
            id:
              type: string
              description: |
                The unique ID of the function tool call.
          required:
            - id
    ComputerToolCall:
      type: object
      title: Computer tool call
      description: >
        A tool call to a computer use tool. See the 

        [computer use guide](/docs/guides/tools-computer-use) for more
        information.
      properties:
        type:
          type: string
          description: The type of the computer call. Always `computer_call`.
          enum:
            - computer_call
          default: computer_call
        id:
          type: string
          description: The unique ID of the computer call.
        call_id:
          type: string
          description: |
            An identifier used when responding to the tool call with output.
        action:
          type: object
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - type
        - id
        - action
        - call_id
        - pending_safety_checks
        - status
    ResponseItemList:
      type: object
      description: A list of Response items.
      properties:
        object:
          type: string
          description: The type of object returned, must be `list`.
          enum:
            - list
          x-stainless-const: true
        data:
          type: array
          description: A list of items used to generate this response.
          items:
            $ref: "#/components/schemas/ItemResource"
        has_more:
          type: boolean
          description: Whether there are more items available.
        first_id:
          type: string
          description: The ID of the first item in the list.
        last_id:
          type: string
          description: The ID of the last item in the list.
      required:
        - object
        - data
        - has_more
        - first_id
        - last_id
    Includable:
      type: string
      description: >
        Specify additional output data to include in the model response.
        Currently

        supported values are:

        - `file_search_call.results`: Include the search results of
          the file search tool call.
        - `message.input_image.image_url`: Include image urls from the input
        message.

        - `computer_call_output.output.image_url`: Include image urls from the
        computer call output.
      enum:
        - file_search_call.results
        - message.input_image.image_url
        - computer_call_output.output.image_url
    CreateModelResponseProperties:
      allOf:
        - $ref: "#/components/schemas/ModelResponseProperties"
    InputItem:
      oneOf:
        - $ref: "#/components/schemas/EasyInputMessage"
        - $ref: "#/components/schemas/Item"
    Item:
      type: object
      description: |
        Content item used to generate a response.
      oneOf:
        - $ref: "#/components/schemas/InputMessage"
        - $ref: "#/components/schemas/OutputMessage"
        - $ref: "#/components/schemas/FileSearchToolCall"
        - $ref: "#/components/schemas/ComputerToolCall"
        - $ref: "#/components/schemas/WebSearchToolCall"
        - $ref: "#/components/schemas/FunctionToolCall"
        - $ref: "#/components/schemas/ReasoningItem"
    ReasoningItem:
      type: object
      description: >
        A description of the chain of thought used by a reasoning model while
        generating

        a response.
      title: Reasoning
      properties:
        type:
          type: string
          description: |
            The type of the object. Always `reasoning`.
          enum:
            - reasoning
          x-stainless-const: true
        id:
          type: string
          description: |
            The unique identifier of the reasoning content.
        summary:
          type: array
          description: |
            Reasoning text contents.
          items:
            type: object
            properties:
              type:
                type: string
                description: |
                  The type of the object. Always `summary_text`.
                enum:
                  - summary_text
                x-stainless-const: true
              text:
                type: string
                description: >
                  A short summary of the reasoning used by the model when
                  generating

                  the response.
            required:
              - type
              - text
        status:
          type: string
          description: |
            The status of the item. One of `in_progress`, `completed`, or
            `incomplete`. Populated when items are returned via API.
          enum:
            - in_progress
            - completed
            - incomplete
      required:
        - id
        - summary
        - type
    EasyInputMessage:
      type: object
      title: Input message
      description: >
        A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role. Messages with
        the

        `assistant` role are presumed to have been generated by the model in
        previous

        interactions.
      properties:
        role:
          type: string
          description: >
            The role of the message input. One of `user`, `assistant`, `system`,
            or

            `developer`.
          enum:
            - user
            - assistant
            - system
            - developer
        content:
          description: >
            Text, image, or audio input to the model, used to generate a
            response.

            Can also contain previous assistant responses.
          oneOf:
            - type: string
              title: Text input
              description: |
                A text input to the model.
            - $ref: "#/components/schemas/InputMessageContentList"
        type:
          type: string
          description: |
            The type of the message input. Always `message`.
          enum:
            - message
          x-stainless-const: true
      required:
        - role
        - content
    OpenAICreateResponse:
      allOf:
        - $ref: "#/components/schemas/CreateModelResponseProperties"
        - $ref: "#/components/schemas/ResponseProperties"
        - type: object
          properties:
            input:
              description: >
                Text, image, or file inputs to the model, used to generate a
                response.


                Learn more:

                - [Text inputs and outputs](/docs/guides/text)

                - [Image inputs](/docs/guides/images)

                - [File inputs](/docs/guides/pdf-files)

                - [Conversation state](/docs/guides/conversation-state)

                - [Function calling](/docs/guides/function-calling)
              oneOf:
                - type: string
                  title: Text input
                  description: >
                    A text input to the model, equivalent to a text input with
                    the 

                    `user` role.
                - type: array
                  title: Input item list
                  description: |
                    A list of one or many input items to the model, containing 
                    different content types.
                  items:
                    $ref: "#/components/schemas/InputItem"
            include:
              type: array
              description: >
                Specify additional output data to include in the model response.
                Currently

                supported values are:

                - `file_search_call.results`: Include the search results of
                  the file search tool call.
                - `message.input_image.image_url`: Include image urls from the
                input message.

                - `computer_call_output.output.image_url`: Include image urls
                from the computer call output.
              items:
                $ref: "#/components/schemas/Includable"
              nullable: true
            usage:
              $ref: "#/components/schemas/ResponseUsage"
            parallel_tool_calls:
              type: boolean
              description: |
                Whether to allow the model to run tool calls in parallel.
              default: true
              nullable: true
            store:
              type: boolean
              description: >
                Whether to store the generated model response for later
                retrieval via

                API.
              default: true
              nullable: true
            stream:
              description: |
                If set to true, the model response data will be streamed to the client
                as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
                See the [Streaming section below](/docs/api-reference/responses-streaming)
                for more information.
              type: boolean
              nullable: true
              default: false
          required:
            - model
            - input
    OpenAIModels:
      type: string
      enum:
        # Base GPT-4 Models
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-4-0125-preview
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview

        # GPT-3.5 Models
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0301
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613

        # GPT-4.1 Models
        - gpt-4.1
        - gpt-4.1-mini
        - gpt-4.1-nano
        - gpt-4.1-2025-04-14
        - gpt-4.1-mini-2025-04-14
        - gpt-4.1-nano-2025-04-14

        # O-Series Models
        - o1
        - o1-mini
        - o1-preview
        - o1-pro
        - o1-2024-12-17
        - o1-preview-2024-09-12
        - o1-mini-2024-09-12
        - o1-pro-2025-03-19

        - o3
        - o3-mini
        - o3-2025-04-16
        - o3-mini-2025-01-31

        - o4-mini
        - o4-mini-2025-04-16

        # GPT-4O Models
        - gpt-4o
        - gpt-4o-mini
        - gpt-4o-2024-11-20
        - gpt-4o-2024-08-06
        - gpt-4o-2024-05-13
        - gpt-4o-mini-2024-07-18

        # GPT-4O Special Purpose Models
        - gpt-4o-audio-preview
        - gpt-4o-audio-preview-2024-10-01
        - gpt-4o-audio-preview-2024-12-17
        - gpt-4o-mini-audio-preview
        - gpt-4o-mini-audio-preview-2024-12-17
        - gpt-4o-search-preview
        - gpt-4o-mini-search-preview
        - gpt-4o-search-preview-2025-03-11
        - gpt-4o-mini-search-preview-2025-03-11

        # Computer Use Models
        - computer-use-preview
        - computer-use-preview-2025-03-11

        # Other
        - chatgpt-4o-latest

    MoonvalleyInferenceParams:
        type: object
        properties:
            height: {type: integer, default: 1080}
            width: {type: integer, default: 1920}
            num_frames: {type: integer, default: 64}
            fps: {type: integer, default: 24}
            guidance_scale: {type: number, format: float, default: 12.5}
            seed: {type: integer}
            steps: {type: integer, default: 80}
            use_timestep_transform: {type: boolean, default: true}
            shift_value: {type: number, format: float, default: 3.0}
            use_guidance_schedule: {type: boolean, default: true}
            add_quality_guidance: {type: boolean, default: true}
            clip_value: {type: number, format: float, default: 3.0}
            use_negative_prompts: {type: boolean, default: false}
            negative_prompt: {type: string}
            warmup_steps: {type: integer}
            cooldown_steps: {type: integer}
            caching_coefficient: {type: number, format: float, default: 0.3}
            caching_warmup: {type: integer, default: 3}
            caching_cooldown: {type: integer, default: 3}
            conditioning_frame_index: {type: integer, default: 0}
    MoonvalleyPromptResponse:
        type: object
        properties:
            id:
                type: string
            status:
                type: string
            prompt_text:
                type: string
            output_url:
                type: string
            inference_params:
                type: object
            model_params:
                type: object
            meta:
                type: object
            frame_conditioning:
                type: object
            error:
                type: object
    MoonvalleyCreatePromptRequest:
        type: object
        properties:
            prompt_text:
                type: string
            image_url:
                type: string
            inference_params:
                $ref: '#/components/schemas/MoonvalleyInferenceParams'
            webhook_url:
                type: string
        required:
            - prompt_text
    MoonvalleyCreatePromptResponse:
        type: object
        properties:
            id: {type: string}
            status: {type: string}
            approximate_wait_time: {type: integer}
    MoonvalleyCreateVideoToVideoRequest:
        type: object
        properties:
            prompt_text:
                type: string
            video_url:
                type: string
            control_type:
                type: string
                enum: [motion_control]
            inference_params:
                $ref: '#/components/schemas/MoonvalleyInferenceParams'
            webhook_url:
                type: string
        required:
            - prompt_text
            - video_url
            - control_type
    MoonvalleyUploadResponse:
        type: object
        properties:
            access_url:
                type: string

        
  parameters:
      PixverseAiTraceId:
          name: Ai-trace-id
          in: header
          required: true
          schema:
              type: string
          description: Unique UUID for each request.

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

